
WCB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000402  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800100  00800100  00000402  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000402  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012ad  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b33  00000000  00000000  00001809  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008cb  00000000  00000000  0000233c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000244  00000000  00000000  00002c08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000631  00000000  00000000  00002e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000057b  00000000  00000000  0000347d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000039f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ee e8       	ldi	r30, 0x8E	; 142
  c8:	f3 e0       	ldi	r31, 0x03	; 3
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 30       	cpi	r26, 0x00	; 0
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a0 e0       	ldi	r26, 0x00	; 0
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ab 30       	cpi	r26, 0x0B	; 11
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 a9 01 	call	0x352	; 0x352 <main>
  ea:	0c 94 c5 01 	jmp	0x38a	; 0x38a <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <GPIO_init>:
void Claw_6(){
	PORTD ^= (1<<PORTD6);
}

void Spare(){
	PORTD ^= (1<<PORTD5);
  f2:	52 98       	cbi	0x0a, 2	; 10
  f4:	08 95       	ret

000000f6 <INTERRUPT_init>:
  f6:	e8 9a       	sbi	0x1d, 0	; 29
  f8:	e9 e6       	ldi	r30, 0x69	; 105
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	8c 7f       	andi	r24, 0xFC	; 252
 100:	80 83       	st	Z, r24
 102:	78 94       	sei
 104:	08 95       	ret

00000106 <SPI_masterInit>:
 106:	22 9a       	sbi	0x04, 2	; 4
 108:	23 9a       	sbi	0x04, 3	; 4
 10a:	25 9a       	sbi	0x04, 5	; 4
 10c:	2a 9a       	sbi	0x05, 2	; 5
 10e:	2b 98       	cbi	0x05, 3	; 5
 110:	2d 98       	cbi	0x05, 5	; 5
 112:	8c b5       	in	r24, 0x2c	; 44
 114:	80 65       	ori	r24, 0x50	; 80
 116:	8c bd       	out	0x2c, r24	; 44
 118:	8c b5       	in	r24, 0x2c	; 44
 11a:	83 60       	ori	r24, 0x03	; 3
 11c:	8c bd       	out	0x2c, r24	; 44
 11e:	08 95       	ret

00000120 <SPI_txrx>:
 120:	8e bd       	out	0x2e, r24	; 46
 122:	0d b4       	in	r0, 0x2d	; 45
 124:	07 fe       	sbrs	r0, 7
 126:	fd cf       	rjmp	.-6      	; 0x122 <SPI_txrx+0x2>
 128:	87 ec       	ldi	r24, 0xC7	; 199
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <SPI_txrx+0xc>
 130:	00 c0       	rjmp	.+0      	; 0x132 <SPI_txrx+0x12>
 132:	00 00       	nop
 134:	8e b5       	in	r24, 0x2e	; 46
 136:	08 95       	ret

00000138 <mcp2515_write_register>:
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	d8 2f       	mov	r29, r24
 13e:	c6 2f       	mov	r28, r22
 140:	2a 98       	cbi	0x05, 2	; 5
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	0e 94 90 00 	call	0x120	; 0x120 <SPI_txrx>
 148:	8d 2f       	mov	r24, r29
 14a:	0e 94 90 00 	call	0x120	; 0x120 <SPI_txrx>
 14e:	8c 2f       	mov	r24, r28
 150:	0e 94 90 00 	call	0x120	; 0x120 <SPI_txrx>
 154:	2a 9a       	sbi	0x05, 2	; 5
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <mcp2515_read_register>:
 15c:	cf 93       	push	r28
 15e:	c8 2f       	mov	r28, r24
 160:	2a 98       	cbi	0x05, 2	; 5
 162:	83 e0       	ldi	r24, 0x03	; 3
 164:	0e 94 90 00 	call	0x120	; 0x120 <SPI_txrx>
 168:	8c 2f       	mov	r24, r28
 16a:	0e 94 90 00 	call	0x120	; 0x120 <SPI_txrx>
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	0e 94 90 00 	call	0x120	; 0x120 <SPI_txrx>
 174:	2a 9a       	sbi	0x05, 2	; 5
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <mcp2515_read_status>:
 17a:	2a 98       	cbi	0x05, 2	; 5
 17c:	0e 94 90 00 	call	0x120	; 0x120 <SPI_txrx>
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	0e 94 90 00 	call	0x120	; 0x120 <SPI_txrx>
 186:	2a 9a       	sbi	0x05, 2	; 5
 188:	08 95       	ret

0000018a <mcp2515_init>:
 18a:	cf 93       	push	r28
 18c:	c8 2f       	mov	r28, r24
 18e:	2a 98       	cbi	0x05, 2	; 5
 190:	80 ec       	ldi	r24, 0xC0	; 192
 192:	0e 94 90 00 	call	0x120	; 0x120 <SPI_txrx>
 196:	2a 9a       	sbi	0x05, 2	; 5
 198:	8a e6       	ldi	r24, 0x6A	; 106
 19a:	8a 95       	dec	r24
 19c:	f1 f7       	brne	.-4      	; 0x19a <mcp2515_init+0x10>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <mcp2515_init+0x16>
 1a0:	2a 98       	cbi	0x05, 2	; 5
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	0e 94 90 00 	call	0x120	; 0x120 <SPI_txrx>
 1a8:	88 e2       	ldi	r24, 0x28	; 40
 1aa:	0e 94 90 00 	call	0x120	; 0x120 <SPI_txrx>
 1ae:	82 e0       	ldi	r24, 0x02	; 2
 1b0:	0e 94 90 00 	call	0x120	; 0x120 <SPI_txrx>
 1b4:	80 e9       	ldi	r24, 0x90	; 144
 1b6:	0e 94 90 00 	call	0x120	; 0x120 <SPI_txrx>
 1ba:	8c 2f       	mov	r24, r28
 1bc:	0e 94 90 00 	call	0x120	; 0x120 <SPI_txrx>
 1c0:	83 e0       	ldi	r24, 0x03	; 3
 1c2:	0e 94 90 00 	call	0x120	; 0x120 <SPI_txrx>
 1c6:	2a 9a       	sbi	0x05, 2	; 5
 1c8:	8a e2       	ldi	r24, 0x2A	; 42
 1ca:	0e 94 ae 00 	call	0x15c	; 0x15c <mcp2515_read_register>
 1ce:	c8 13       	cpse	r28, r24
 1d0:	16 c0       	rjmp	.+44     	; 0x1fe <mcp2515_init+0x74>
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	8c e0       	ldi	r24, 0x0C	; 12
 1d6:	0e 94 9c 00 	call	0x138	; 0x138 <mcp2515_write_register>
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	8d e0       	ldi	r24, 0x0D	; 13
 1de:	0e 94 9c 00 	call	0x138	; 0x138 <mcp2515_write_register>
 1e2:	60 e6       	ldi	r22, 0x60	; 96
 1e4:	80 e6       	ldi	r24, 0x60	; 96
 1e6:	0e 94 9c 00 	call	0x138	; 0x138 <mcp2515_write_register>
 1ea:	60 e6       	ldi	r22, 0x60	; 96
 1ec:	80 e7       	ldi	r24, 0x70	; 112
 1ee:	0e 94 9c 00 	call	0x138	; 0x138 <mcp2515_write_register>
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	8f e0       	ldi	r24, 0x0F	; 15
 1f6:	0e 94 9c 00 	call	0x138	; 0x138 <mcp2515_write_register>
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	01 c0       	rjmp	.+2      	; 0x200 <mcp2515_init+0x76>
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	cf 91       	pop	r28
 202:	08 95       	ret

00000204 <mcp2515_send_message>:
 204:	bf 92       	push	r11
 206:	cf 92       	push	r12
 208:	df 92       	push	r13
 20a:	ef 92       	push	r14
 20c:	ff 92       	push	r15
 20e:	0f 93       	push	r16
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	1f 92       	push	r1
 218:	cd b7       	in	r28, 0x3d	; 61
 21a:	de b7       	in	r29, 0x3e	; 62
 21c:	6c 01       	movw	r12, r24
 21e:	80 ea       	ldi	r24, 0xA0	; 160
 220:	0e 94 bd 00 	call	0x17a	; 0x17a <mcp2515_read_status>
 224:	89 83       	std	Y+1, r24	; 0x01
 226:	89 81       	ldd	r24, Y+1	; 0x01
 228:	82 ff       	sbrs	r24, 2
 22a:	0a c0       	rjmp	.+20     	; 0x240 <mcp2515_send_message+0x3c>
 22c:	89 81       	ldd	r24, Y+1	; 0x01
 22e:	84 ff       	sbrs	r24, 4
 230:	09 c0       	rjmp	.+18     	; 0x244 <mcp2515_send_message+0x40>
 232:	89 81       	ldd	r24, Y+1	; 0x01
 234:	86 fd       	sbrc	r24, 6
 236:	5d c0       	rjmp	.+186    	; 0x2f2 <mcp2515_send_message+0xee>
 238:	68 94       	set
 23a:	bb 24       	eor	r11, r11
 23c:	b2 f8       	bld	r11, 2
 23e:	05 c0       	rjmp	.+10     	; 0x24a <mcp2515_send_message+0x46>
 240:	b1 2c       	mov	r11, r1
 242:	03 c0       	rjmp	.+6      	; 0x24a <mcp2515_send_message+0x46>
 244:	68 94       	set
 246:	bb 24       	eor	r11, r11
 248:	b1 f8       	bld	r11, 1
 24a:	2a 98       	cbi	0x05, 2	; 5
 24c:	8b 2d       	mov	r24, r11
 24e:	80 64       	ori	r24, 0x40	; 64
 250:	0e 94 90 00 	call	0x120	; 0x120 <SPI_txrx>
 254:	f6 01       	movw	r30, r12
 256:	80 81       	ld	r24, Z
 258:	91 81       	ldd	r25, Z+1	; 0x01
 25a:	96 95       	lsr	r25
 25c:	87 95       	ror	r24
 25e:	96 95       	lsr	r25
 260:	87 95       	ror	r24
 262:	96 95       	lsr	r25
 264:	87 95       	ror	r24
 266:	0e 94 90 00 	call	0x120	; 0x120 <SPI_txrx>
 26a:	f6 01       	movw	r30, r12
 26c:	80 81       	ld	r24, Z
 26e:	82 95       	swap	r24
 270:	88 0f       	add	r24, r24
 272:	80 7e       	andi	r24, 0xE0	; 224
 274:	0e 94 90 00 	call	0x120	; 0x120 <SPI_txrx>
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	0e 94 90 00 	call	0x120	; 0x120 <SPI_txrx>
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	0e 94 90 00 	call	0x120	; 0x120 <SPI_txrx>
 284:	f6 01       	movw	r30, r12
 286:	82 81       	ldd	r24, Z+2	; 0x02
 288:	f8 2e       	mov	r15, r24
 28a:	f6 94       	lsr	r15
 28c:	ff 2d       	mov	r31, r15
 28e:	ff 70       	andi	r31, 0x0F	; 15
 290:	ff 2e       	mov	r15, r31
 292:	80 ff       	sbrs	r24, 0
 294:	05 c0       	rjmp	.+10     	; 0x2a0 <mcp2515_send_message+0x9c>
 296:	8f 2f       	mov	r24, r31
 298:	80 64       	ori	r24, 0x40	; 64
 29a:	0e 94 90 00 	call	0x120	; 0x120 <SPI_txrx>
 29e:	18 c0       	rjmp	.+48     	; 0x2d0 <mcp2515_send_message+0xcc>
 2a0:	8f 2f       	mov	r24, r31
 2a2:	0e 94 90 00 	call	0x120	; 0x120 <SPI_txrx>
 2a6:	ff 20       	and	r15, r15
 2a8:	99 f0       	breq	.+38     	; 0x2d0 <mcp2515_send_message+0xcc>
 2aa:	86 01       	movw	r16, r12
 2ac:	0d 5f       	subi	r16, 0xFD	; 253
 2ae:	1f 4f       	sbci	r17, 0xFF	; 255
 2b0:	fa 94       	dec	r15
 2b2:	ef 2c       	mov	r14, r15
 2b4:	f1 2c       	mov	r15, r1
 2b6:	84 e0       	ldi	r24, 0x04	; 4
 2b8:	e8 0e       	add	r14, r24
 2ba:	f1 1c       	adc	r15, r1
 2bc:	ec 0c       	add	r14, r12
 2be:	fd 1c       	adc	r15, r13
 2c0:	f8 01       	movw	r30, r16
 2c2:	81 91       	ld	r24, Z+
 2c4:	8f 01       	movw	r16, r30
 2c6:	0e 94 90 00 	call	0x120	; 0x120 <SPI_txrx>
 2ca:	0e 15       	cp	r16, r14
 2cc:	1f 05       	cpc	r17, r15
 2ce:	c1 f7       	brne	.-16     	; 0x2c0 <mcp2515_send_message+0xbc>
 2d0:	2a 9a       	sbi	0x05, 2	; 5
 2d2:	f5 e0       	ldi	r31, 0x05	; 5
 2d4:	fa 95       	dec	r31
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <mcp2515_send_message+0xd0>
 2d8:	00 00       	nop
 2da:	2a 98       	cbi	0x05, 2	; 5
 2dc:	b1 10       	cpse	r11, r1
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <mcp2515_send_message+0xe0>
 2e0:	bb 24       	eor	r11, r11
 2e2:	b3 94       	inc	r11
 2e4:	8b 2d       	mov	r24, r11
 2e6:	80 68       	ori	r24, 0x80	; 128
 2e8:	0e 94 90 00 	call	0x120	; 0x120 <SPI_txrx>
 2ec:	2a 9a       	sbi	0x05, 2	; 5
 2ee:	8b 2d       	mov	r24, r11
 2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <mcp2515_send_message+0xf0>
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	0f 90       	pop	r0
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	1f 91       	pop	r17
 2fc:	0f 91       	pop	r16
 2fe:	ff 90       	pop	r15
 300:	ef 90       	pop	r14
 302:	df 90       	pop	r13
 304:	cf 90       	pop	r12
 306:	bf 90       	pop	r11
 308:	08 95       	ret

0000030a <setup>:
}

void setup()
{	
	// Set outputs
	DDRB |= (1<<DDB0);	// D8	Claw 4
 30a:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= (1<<DDB1);	// D9	Claw 3
 30c:	21 9a       	sbi	0x04, 1	; 4
	
	DDRC |= (1<<DDC0);	// A0	Dropper 2
 30e:	38 9a       	sbi	0x07, 0	; 7
	DDRC |= (1<<DDC1);	// A1	Dropper 1
 310:	39 9a       	sbi	0x07, 1	; 7
	DDRC |= (1<<DDC2);	// A2	Torpedo 2
 312:	3a 9a       	sbi	0x07, 2	; 7
	DDRC |= (1<<DDC3);	// A3	Torpedo 1
 314:	3b 9a       	sbi	0x07, 3	; 7
	
	DDRD |= (1<<DDD3);	// D3	Laser 2
 316:	53 9a       	sbi	0x0a, 3	; 10
	DDRD |= (1<<DDD4);	// D4	Laser 1
 318:	54 9a       	sbi	0x0a, 4	; 10
	DDRD |= (1<<DDD5);	// D5	Spare
 31a:	55 9a       	sbi	0x0a, 5	; 10
	DDRD |= (1<<DDD6);	// D6	Claw 6
 31c:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |= (1<<DDD7);	// D7	Claw 5
 31e:	57 9a       	sbi	0x0a, 7	; 10
	
	DDRE |= (1<<DDE2);	// A6	Claw 2
 320:	6a 9a       	sbi	0x0d, 2	; 13
	DDRE |= (1<<DDE3);	// A7	Claw 1
 322:	6b 9a       	sbi	0x0d, 3	; 13
	
	// Ensure all outputs are off
	PORTB &= ~(1<<PORTB0);
 324:	28 98       	cbi	0x05, 0	; 5
	PORTB &= ~(1<<PORTB1);
 326:	29 98       	cbi	0x05, 1	; 5
	
	PORTC &= ~(1<<PORTC0);
 328:	40 98       	cbi	0x08, 0	; 8
	PORTC &= ~(1<<PORTC1);
 32a:	41 98       	cbi	0x08, 1	; 8
	PORTC &= ~(1<<PORTC2);
 32c:	42 98       	cbi	0x08, 2	; 8
	PORTC &= ~(1<<PORTC3);
 32e:	43 98       	cbi	0x08, 3	; 8
	
	PORTD &= ~(1<<PORTD3);
 330:	5b 98       	cbi	0x0b, 3	; 11
	PORTD &= ~(1<<PORTD4);
 332:	5c 98       	cbi	0x0b, 4	; 11
	PORTD &= ~(1<<PORTD5);
 334:	5d 98       	cbi	0x0b, 5	; 11
	PORTD &= ~(1<<PORTD6);
 336:	5e 98       	cbi	0x0b, 6	; 11
	PORTD &= ~(1<<PORTD7);
 338:	5f 98       	cbi	0x0b, 7	; 11
	
	PORTE &= ~(1<<PORTE2);
 33a:	72 98       	cbi	0x0e, 2	; 14
	PORTE &= ~(1<<PORTE3);
 33c:	73 98       	cbi	0x0e, 3	; 14
	
	// CAN bus stuff
	GPIO_init();
 33e:	0e 94 79 00 	call	0xf2	; 0xf2 <GPIO_init>
	INTERRUPT_init();
 342:	0e 94 7b 00 	call	0xf6	; 0xf6 <INTERRUPT_init>
	SPI_masterInit();
 346:	0e 94 83 00 	call	0x106	; 0x106 <SPI_masterInit>
	
	
	
	// Initializes comms with CAN transciever / controller
	mcp2515_init(CANSPEED_500);
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	0e 94 c5 00 	call	0x18a	; 0x18a <mcp2515_init>
 350:	08 95       	ret

00000352 <main>:
//uint8_t TxID = 0x001;	//S
tCAN spi_char;		// message package

int main(void)
{
	setup();
 352:	0e 94 85 01 	call	0x30a	; 0x30a <setup>
	
	//This is temporary. Reference back to know how to make the frame
	spi_char.id = 0x10;
 356:	e0 e0       	ldi	r30, 0x00	; 0
 358:	f1 e0       	ldi	r31, 0x01	; 1
 35a:	80 e1       	ldi	r24, 0x10	; 16
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	91 83       	std	Z+1, r25	; 0x01
 360:	80 83       	st	Z, r24
	spi_char.header.length = 4;
 362:	a2 e0       	ldi	r26, 0x02	; 2
 364:	b1 e0       	ldi	r27, 0x01	; 1
 366:	8c 91       	ld	r24, X
 368:	81 7e       	andi	r24, 0xE1	; 225
	spi_char.header.rtr = 0;
 36a:	88 60       	ori	r24, 0x08	; 8
 36c:	8e 7f       	andi	r24, 0xFE	; 254
 36e:	8c 93       	st	X, r24
	spi_char.data[0] = 'F';
 370:	86 e4       	ldi	r24, 0x46	; 70
 372:	83 83       	std	Z+3, r24	; 0x03
	spi_char.data[1] = 'U';
 374:	85 e5       	ldi	r24, 0x55	; 85
 376:	84 83       	std	Z+4, r24	; 0x04
	spi_char.data[2] = 'C';
 378:	83 e4       	ldi	r24, 0x43	; 67
 37a:	85 83       	std	Z+5, r24	; 0x05
	spi_char.data[3] = 'FK';
 37c:	8b e4       	ldi	r24, 0x4B	; 75
 37e:	86 83       	std	Z+6, r24	; 0x06
	Laser_1();*/
	//mcp2515_send_message(&spi_char);
	
	while(1) // Infinite loop while 1 is true.
	{
		 uint8_t test = mcp2515_send_message(&spi_char);
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	91 e0       	ldi	r25, 0x01	; 1
 384:	0e 94 02 01 	call	0x204	; 0x204 <mcp2515_send_message>
 388:	fb cf       	rjmp	.-10     	; 0x380 <main+0x2e>

0000038a <_exit>:
 38a:	f8 94       	cli

0000038c <__stop_program>:
 38c:	ff cf       	rjmp	.-2      	; 0x38c <__stop_program>
