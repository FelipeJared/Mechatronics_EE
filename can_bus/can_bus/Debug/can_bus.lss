
can_bus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  0000047e  00000512  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000047e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800126  00800126  00000538  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000568  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a84  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000338  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006af  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  00001ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000337  00000000  00000000  00001cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006e4  00000000  00000000  00002007  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000026eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 14 02 	jmp	0x428	; 0x428 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e7       	ldi	r30, 0x7E	; 126
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 32       	cpi	r26, 0x26	; 38
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e2       	ldi	r26, 0x26	; 38
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 33       	cpi	r26, 0x3D	; 61
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b1 01 	call	0x362	; 0x362 <main>
  9e:	0c 94 3d 02 	jmp	0x47a	; 0x47a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_init>:
	address = (address == 0) ? 1 : address;
	SPI_txrx(CAN_RTS | address);
	SET_H(SS);

	return address;
}
  a6:	52 98       	cbi	0x0a, 2	; 10
  a8:	20 9a       	sbi	0x04, 0	; 4
  aa:	08 95       	ret

000000ac <INTERRUPT_init>:
  ac:	e8 9a       	sbi	0x1d, 0	; 29
  ae:	e9 e6       	ldi	r30, 0x69	; 105
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	8c 7f       	andi	r24, 0xFC	; 252
  b6:	80 83       	st	Z, r24
  b8:	78 94       	sei
  ba:	08 95       	ret

000000bc <SPI_masterInit>:
  bc:	22 9a       	sbi	0x04, 2	; 4
  be:	23 9a       	sbi	0x04, 3	; 4
  c0:	25 9a       	sbi	0x04, 5	; 4
  c2:	2a 9a       	sbi	0x05, 2	; 5
  c4:	2b 98       	cbi	0x05, 3	; 5
  c6:	2d 98       	cbi	0x05, 5	; 5
  c8:	8c b5       	in	r24, 0x2c	; 44
  ca:	80 65       	ori	r24, 0x50	; 80
  cc:	8c bd       	out	0x2c, r24	; 44
  ce:	8c b5       	in	r24, 0x2c	; 44
  d0:	83 60       	ori	r24, 0x03	; 3
  d2:	8c bd       	out	0x2c, r24	; 44
  d4:	08 95       	ret

000000d6 <SPI_txrx>:
  d6:	8e bd       	out	0x2e, r24	; 46
  d8:	0d b4       	in	r0, 0x2d	; 45
  da:	07 fe       	sbrs	r0, 7
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <SPI_txrx+0x2>
  de:	87 ec       	ldi	r24, 0xC7	; 199
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <SPI_txrx+0xc>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <SPI_txrx+0x12>
  e8:	00 00       	nop
  ea:	8e b5       	in	r24, 0x2e	; 46
  ec:	08 95       	ret

000000ee <USART_Init>:
  ee:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  f2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  f6:	e1 ec       	ldi	r30, 0xC1	; 193
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	88 61       	ori	r24, 0x18	; 24
  fe:	80 83       	st	Z, r24
 100:	e2 ec       	ldi	r30, 0xC2	; 194
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	86 60       	ori	r24, 0x06	; 6
 108:	80 83       	st	Z, r24
 10a:	08 95       	ret

0000010c <USART_Transmit>:
 10c:	e0 ec       	ldi	r30, 0xC0	; 192
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	90 81       	ld	r25, Z
 112:	95 ff       	sbrs	r25, 5
 114:	fd cf       	rjmp	.-6      	; 0x110 <USART_Transmit+0x4>
 116:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 11a:	08 95       	ret

0000011c <USART_Transmit_TX>:
 11c:	ef 92       	push	r14
 11e:	ff 92       	push	r15
 120:	0f 93       	push	r16
 122:	1f 93       	push	r17
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	fc 01       	movw	r30, r24
 12a:	01 90       	ld	r0, Z+
 12c:	00 20       	and	r0, r0
 12e:	e9 f7       	brne	.-6      	; 0x12a <USART_Transmit_TX+0xe>
 130:	31 97       	sbiw	r30, 0x01	; 1
 132:	7f 01       	movw	r14, r30
 134:	e8 1a       	sub	r14, r24
 136:	f9 0a       	sbc	r15, r25
 138:	61 f0       	breq	.+24     	; 0x152 <USART_Transmit_TX+0x36>
 13a:	8c 01       	movw	r16, r24
 13c:	c0 e0       	ldi	r28, 0x00	; 0
 13e:	d0 e0       	ldi	r29, 0x00	; 0
 140:	f8 01       	movw	r30, r16
 142:	81 91       	ld	r24, Z+
 144:	8f 01       	movw	r16, r30
 146:	0e 94 86 00 	call	0x10c	; 0x10c <USART_Transmit>
 14a:	21 96       	adiw	r28, 0x01	; 1
 14c:	ec 16       	cp	r14, r28
 14e:	fd 06       	cpc	r15, r29
 150:	b9 f7       	brne	.-18     	; 0x140 <USART_Transmit_TX+0x24>
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	1f 91       	pop	r17
 158:	0f 91       	pop	r16
 15a:	ff 90       	pop	r15
 15c:	ef 90       	pop	r14
 15e:	08 95       	ret

00000160 <mcp2515_write_register>:
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	d8 2f       	mov	r29, r24
 166:	c6 2f       	mov	r28, r22
 168:	2a 98       	cbi	0x05, 2	; 5
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
 170:	8d 2f       	mov	r24, r29
 172:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
 176:	8c 2f       	mov	r24, r28
 178:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
 17c:	2a 9a       	sbi	0x05, 2	; 5
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <mcp2515_read_register>:
 184:	cf 93       	push	r28
 186:	c8 2f       	mov	r28, r24
 188:	2a 98       	cbi	0x05, 2	; 5
 18a:	83 e0       	ldi	r24, 0x03	; 3
 18c:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
 190:	8c 2f       	mov	r24, r28
 192:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
 196:	8f ef       	ldi	r24, 0xFF	; 255
 198:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
 19c:	2a 9a       	sbi	0x05, 2	; 5
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <mcp2515_bit_modify>:
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	18 2f       	mov	r17, r24
 1aa:	d6 2f       	mov	r29, r22
 1ac:	c4 2f       	mov	r28, r20
 1ae:	2a 98       	cbi	0x05, 2	; 5
 1b0:	85 e0       	ldi	r24, 0x05	; 5
 1b2:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
 1b6:	81 2f       	mov	r24, r17
 1b8:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
 1bc:	8d 2f       	mov	r24, r29
 1be:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
 1c2:	8c 2f       	mov	r24, r28
 1c4:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
 1c8:	2a 9a       	sbi	0x05, 2	; 5
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	1f 91       	pop	r17
 1d0:	08 95       	ret

000001d2 <mcp2515_read_status>:
 1d2:	2a 98       	cbi	0x05, 2	; 5
 1d4:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
 1d8:	8f ef       	ldi	r24, 0xFF	; 255
 1da:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
 1de:	2a 9a       	sbi	0x05, 2	; 5
 1e0:	08 95       	ret

000001e2 <mcp2515_init>:
 1e2:	cf 93       	push	r28
 1e4:	c8 2f       	mov	r28, r24
 1e6:	2a 98       	cbi	0x05, 2	; 5
 1e8:	80 ec       	ldi	r24, 0xC0	; 192
 1ea:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
 1ee:	2a 9a       	sbi	0x05, 2	; 5
 1f0:	8a e6       	ldi	r24, 0x6A	; 106
 1f2:	8a 95       	dec	r24
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <mcp2515_init+0x10>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <mcp2515_init+0x16>
 1f8:	2a 98       	cbi	0x05, 2	; 5
 1fa:	82 e0       	ldi	r24, 0x02	; 2
 1fc:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
 200:	88 e2       	ldi	r24, 0x28	; 40
 202:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
 20c:	80 e9       	ldi	r24, 0x90	; 144
 20e:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
 212:	8c 2f       	mov	r24, r28
 214:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
 218:	83 e0       	ldi	r24, 0x03	; 3
 21a:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
 21e:	2a 9a       	sbi	0x05, 2	; 5
 220:	8a e2       	ldi	r24, 0x2A	; 42
 222:	0e 94 c2 00 	call	0x184	; 0x184 <mcp2515_read_register>
 226:	8c 17       	cp	r24, r28
 228:	19 f0       	breq	.+6      	; 0x230 <mcp2515_init+0x4e>
 22a:	28 9a       	sbi	0x05, 0	; 5
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	16 c0       	rjmp	.+44     	; 0x25c <mcp2515_init+0x7a>
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	8c e0       	ldi	r24, 0x0C	; 12
 234:	0e 94 b0 00 	call	0x160	; 0x160 <mcp2515_write_register>
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	8d e0       	ldi	r24, 0x0D	; 13
 23c:	0e 94 b0 00 	call	0x160	; 0x160 <mcp2515_write_register>
 240:	60 e6       	ldi	r22, 0x60	; 96
 242:	80 e6       	ldi	r24, 0x60	; 96
 244:	0e 94 b0 00 	call	0x160	; 0x160 <mcp2515_write_register>
 248:	60 e6       	ldi	r22, 0x60	; 96
 24a:	80 e7       	ldi	r24, 0x70	; 112
 24c:	0e 94 b0 00 	call	0x160	; 0x160 <mcp2515_write_register>
 250:	60 e0       	ldi	r22, 0x00	; 0
 252:	8f e0       	ldi	r24, 0x0F	; 15
 254:	0e 94 b0 00 	call	0x160	; 0x160 <mcp2515_write_register>
 258:	28 98       	cbi	0x05, 0	; 5
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <mcp2515_get_message>:
 260:	cf 92       	push	r12
 262:	df 92       	push	r13
 264:	ef 92       	push	r14
 266:	ff 92       	push	r15
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	1f 92       	push	r1
 272:	cd b7       	in	r28, 0x3d	; 61
 274:	de b7       	in	r29, 0x3e	; 62
 276:	6c 01       	movw	r12, r24
 278:	80 eb       	ldi	r24, 0xB0	; 176
 27a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <mcp2515_read_status>
 27e:	89 83       	std	Y+1, r24	; 0x01
 280:	99 81       	ldd	r25, Y+1	; 0x01
 282:	89 2f       	mov	r24, r25
 284:	80 74       	andi	r24, 0x40	; 64
 286:	96 fd       	sbrc	r25, 6
 288:	06 c0       	rjmp	.+12     	; 0x296 <mcp2515_get_message+0x36>
 28a:	99 81       	ldd	r25, Y+1	; 0x01
 28c:	99 23       	and	r25, r25
 28e:	0c f0       	brlt	.+2      	; 0x292 <mcp2515_get_message+0x32>
 290:	5e c0       	rjmp	.+188    	; 0x34e <mcp2515_get_message+0xee>
 292:	84 e9       	ldi	r24, 0x94	; 148
 294:	01 c0       	rjmp	.+2      	; 0x298 <mcp2515_get_message+0x38>
 296:	80 e9       	ldi	r24, 0x90	; 144
 298:	2a 98       	cbi	0x05, 2	; 5
 29a:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
 29e:	8f ef       	ldi	r24, 0xFF	; 255
 2a0:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
 2a4:	28 e0       	ldi	r18, 0x08	; 8
 2a6:	82 9f       	mul	r24, r18
 2a8:	c0 01       	movw	r24, r0
 2aa:	11 24       	eor	r1, r1
 2ac:	f6 01       	movw	r30, r12
 2ae:	91 83       	std	Z+1, r25	; 0x01
 2b0:	80 83       	st	Z, r24
 2b2:	8f ef       	ldi	r24, 0xFF	; 255
 2b4:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
 2b8:	28 2f       	mov	r18, r24
 2ba:	22 95       	swap	r18
 2bc:	26 95       	lsr	r18
 2be:	27 70       	andi	r18, 0x07	; 7
 2c0:	f6 01       	movw	r30, r12
 2c2:	80 81       	ld	r24, Z
 2c4:	91 81       	ldd	r25, Z+1	; 0x01
 2c6:	82 2b       	or	r24, r18
 2c8:	91 83       	std	Z+1, r25	; 0x01
 2ca:	80 83       	st	Z, r24
 2cc:	8f ef       	ldi	r24, 0xFF	; 255
 2ce:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
 2d2:	8f ef       	ldi	r24, 0xFF	; 255
 2d4:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
 2d8:	8f ef       	ldi	r24, 0xFF	; 255
 2da:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
 2de:	98 2f       	mov	r25, r24
 2e0:	9f 70       	andi	r25, 0x0F	; 15
 2e2:	29 2f       	mov	r18, r25
 2e4:	22 0f       	add	r18, r18
 2e6:	f6 01       	movw	r30, r12
 2e8:	82 81       	ldd	r24, Z+2	; 0x02
 2ea:	81 7e       	andi	r24, 0xE1	; 225
 2ec:	82 2b       	or	r24, r18
 2ee:	82 83       	std	Z+2, r24	; 0x02
 2f0:	29 81       	ldd	r18, Y+1	; 0x01
 2f2:	23 fb       	bst	r18, 3
 2f4:	22 27       	eor	r18, r18
 2f6:	20 f9       	bld	r18, 0
 2f8:	20 fb       	bst	r18, 0
 2fa:	80 f9       	bld	r24, 0
 2fc:	82 83       	std	Z+2, r24	; 0x02
 2fe:	99 23       	and	r25, r25
 300:	a1 f0       	breq	.+40     	; 0x32a <mcp2515_get_message+0xca>
 302:	86 01       	movw	r16, r12
 304:	0d 5f       	subi	r16, 0xFD	; 253
 306:	1f 4f       	sbci	r17, 0xFF	; 255
 308:	91 50       	subi	r25, 0x01	; 1
 30a:	e9 2e       	mov	r14, r25
 30c:	f1 2c       	mov	r15, r1
 30e:	f4 e0       	ldi	r31, 0x04	; 4
 310:	ef 0e       	add	r14, r31
 312:	f1 1c       	adc	r15, r1
 314:	ec 0c       	add	r14, r12
 316:	fd 1c       	adc	r15, r13
 318:	8f ef       	ldi	r24, 0xFF	; 255
 31a:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_txrx>
 31e:	f8 01       	movw	r30, r16
 320:	81 93       	st	Z+, r24
 322:	8f 01       	movw	r16, r30
 324:	ee 15       	cp	r30, r14
 326:	ff 05       	cpc	r31, r15
 328:	b9 f7       	brne	.-18     	; 0x318 <mcp2515_get_message+0xb8>
 32a:	2a 9a       	sbi	0x05, 2	; 5
 32c:	89 81       	ldd	r24, Y+1	; 0x01
 32e:	86 ff       	sbrs	r24, 6
 330:	06 c0       	rjmp	.+12     	; 0x33e <mcp2515_get_message+0xde>
 332:	40 e0       	ldi	r20, 0x00	; 0
 334:	61 e0       	ldi	r22, 0x01	; 1
 336:	8c e2       	ldi	r24, 0x2C	; 44
 338:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <mcp2515_bit_modify>
 33c:	05 c0       	rjmp	.+10     	; 0x348 <mcp2515_get_message+0xe8>
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	62 e0       	ldi	r22, 0x02	; 2
 342:	8c e2       	ldi	r24, 0x2C	; 44
 344:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <mcp2515_bit_modify>
 348:	89 81       	ldd	r24, Y+1	; 0x01
 34a:	87 70       	andi	r24, 0x07	; 7
 34c:	8f 5f       	subi	r24, 0xFF	; 255
 34e:	0f 90       	pop	r0
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	1f 91       	pop	r17
 356:	0f 91       	pop	r16
 358:	ff 90       	pop	r15
 35a:	ef 90       	pop	r14
 35c:	df 90       	pop	r13
 35e:	cf 90       	pop	r12
 360:	08 95       	ret

00000362 <main>:
	start of main()|
******************************************************************************/
int main(void)
{
		//initialization functions
	GPIO_init();
 362:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_init>
	INTERRUPT_init();
 366:	0e 94 56 00 	call	0xac	; 0xac <INTERRUPT_init>
	USART_Init(103);//103 sets baud rate at 9600
 36a:	87 e6       	ldi	r24, 0x67	; 103
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 77 00 	call	0xee	; 0xee <USART_Init>
	SPI_masterInit();
 372:	0e 94 5e 00 	call	0xbc	; 0xbc <SPI_masterInit>
	
	//MCP2515 initialization
	if(mcp2515_init(CANSPEED_500))
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <mcp2515_init>
 37c:	88 23       	and	r24, r24
 37e:	29 f0       	breq	.+10     	; 0x38a <main+0x28>
	{
		USART_Transmit_TX("Can Init SUCCESS!");
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	91 e0       	ldi	r25, 0x01	; 1
 384:	0e 94 8e 00 	call	0x11c	; 0x11c <USART_Transmit_TX>
 388:	04 c0       	rjmp	.+8      	; 0x392 <main+0x30>
	}else
	{
		USART_Transmit_TX("Can Init FAILURE!");
 38a:	83 e1       	ldi	r24, 0x13	; 19
 38c:	91 e0       	ldi	r25, 0x01	; 1
 38e:	0e 94 8e 00 	call	0x11c	; 0x11c <USART_Transmit_TX>
	}
	
	
	//setup the transmit frame
	usart_char.id = TxID;			//set target device ID
 392:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <TxID>
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <usart_char+0x1>
 39c:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <usart_char>
	usart_char.header.rtr = 0;		//no remote transmit(i.e. request info)
 3a0:	e4 e3       	ldi	r30, 0x34	; 52
 3a2:	f1 e0       	ldi	r31, 0x01	; 1
 3a4:	80 81       	ld	r24, Z
	usart_char.header.length = 1;	//single byte(could be up to 8)
 3a6:	80 7e       	andi	r24, 0xE0	; 224
 3a8:	82 60       	ori	r24, 0x02	; 2
 3aa:	80 83       	st	Z, r24
		//if rx_flag is set, that means there's a received message stored in
		//spi_char, so ATOMIC_BLOCK disabled interrupts, then transmits it
		//over uart.
		if(rx_flag){
				ATOMIC_BLOCK(ATOMIC_FORCEON){
				USART_Transmit(spi_char.id >> 8); //CanID_High
 3ac:	07 e2       	ldi	r16, 0x27	; 39
 3ae:	11 e0       	ldi	r17, 0x01	; 1

				USART_Transmit(spi_char.id); //CandID_Low

				USART_Transmit(spi_char.header.rtr); //rtr
 3b0:	c9 e2       	ldi	r28, 0x29	; 41
 3b2:	d1 e0       	ldi	r29, 0x01	; 1
				USART_Transmit(spi_char.header.length); //length

				
				//read back all data received.
				if(!spi_char.header.rtr){
					for (uint8_t t = 0; t < spi_char.header.length;t++) {
 3b4:	c1 2c       	mov	r12, r1
 3b6:	d1 2c       	mov	r13, r1
 3b8:	e1 2c       	mov	r14, r1
	while (1)
	{
		//if rx_flag is set, that means there's a received message stored in
		//spi_char, so ATOMIC_BLOCK disabled interrupts, then transmits it
		//over uart.
		if(rx_flag){
 3ba:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 3be:	88 23       	and	r24, r24
 3c0:	e1 f3       	breq	.-8      	; 0x3ba <main+0x58>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 3c2:	f8 94       	cli
				ATOMIC_BLOCK(ATOMIC_FORCEON){
				USART_Transmit(spi_char.id >> 8); //CanID_High
 3c4:	f8 01       	movw	r30, r16
 3c6:	81 81       	ldd	r24, Z+1	; 0x01
 3c8:	0e 94 86 00 	call	0x10c	; 0x10c <USART_Transmit>

				USART_Transmit(spi_char.id); //CandID_Low
 3cc:	f8 01       	movw	r30, r16
 3ce:	80 81       	ld	r24, Z
 3d0:	0e 94 86 00 	call	0x10c	; 0x10c <USART_Transmit>

				USART_Transmit(spi_char.header.rtr); //rtr
 3d4:	88 81       	ld	r24, Y
 3d6:	87 95       	ror	r24
 3d8:	88 27       	eor	r24, r24
 3da:	87 95       	ror	r24
 3dc:	88 0f       	add	r24, r24
 3de:	88 0b       	sbc	r24, r24
 3e0:	0e 94 86 00 	call	0x10c	; 0x10c <USART_Transmit>

				USART_Transmit(spi_char.header.length); //length
 3e4:	88 81       	ld	r24, Y
 3e6:	86 95       	lsr	r24
 3e8:	8f 70       	andi	r24, 0x0F	; 15
 3ea:	0e 94 86 00 	call	0x10c	; 0x10c <USART_Transmit>

				
				//read back all data received.
				if(!spi_char.header.rtr){
 3ee:	88 81       	ld	r24, Y
 3f0:	80 fd       	sbrc	r24, 0
 3f2:	16 c0       	rjmp	.+44     	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
					for (uint8_t t = 0; t < spi_char.header.length;t++) {
 3f4:	86 95       	lsr	r24
 3f6:	8f 70       	andi	r24, 0x0F	; 15
 3f8:	99 f0       	breq	.+38     	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
 3fa:	2c 2d       	mov	r18, r12
 3fc:	3d 2d       	mov	r19, r13
 3fe:	fe 2c       	mov	r15, r14
						USART_Transmit(spi_char.data[t]); //data
 400:	f9 01       	movw	r30, r18
 402:	e9 5d       	subi	r30, 0xD9	; 217
 404:	fe 4f       	sbci	r31, 0xFE	; 254
 406:	83 81       	ldd	r24, Z+3	; 0x03
 408:	0e 94 86 00 	call	0x10c	; 0x10c <USART_Transmit>
				USART_Transmit(spi_char.header.length); //length

				
				//read back all data received.
				if(!spi_char.header.rtr){
					for (uint8_t t = 0; t < spi_char.header.length;t++) {
 40c:	f3 94       	inc	r15
 40e:	2f 2d       	mov	r18, r15
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	88 81       	ld	r24, Y
 414:	86 95       	lsr	r24
 416:	8f 70       	andi	r24, 0x0F	; 15
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	28 17       	cp	r18, r24
 41c:	39 07       	cpc	r19, r25
 41e:	84 f3       	brlt	.-32     	; 0x400 <__FUSE_REGION_LENGTH__>
						USART_Transmit(spi_char.data[t]); //data

					}
				}
				
				rx_flag = 0;
 420:	e0 92 26 01 	sts	0x0126, r14	; 0x800126 <__data_end>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 424:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
 426:	c9 cf       	rjmp	.-110    	; 0x3ba <main+0x58>

00000428 <__vector_1>:

/******************************************************************************
	RECEIVE interrupt on pin PD2|
******************************************************************************/
ISR(INT0_vect)
{
 428:	1f 92       	push	r1
 42a:	0f 92       	push	r0
 42c:	0f b6       	in	r0, 0x3f	; 63
 42e:	0f 92       	push	r0
 430:	11 24       	eor	r1, r1
 432:	2f 93       	push	r18
 434:	3f 93       	push	r19
 436:	4f 93       	push	r20
 438:	5f 93       	push	r21
 43a:	6f 93       	push	r22
 43c:	7f 93       	push	r23
 43e:	8f 93       	push	r24
 440:	9f 93       	push	r25
 442:	af 93       	push	r26
 444:	bf 93       	push	r27
 446:	ef 93       	push	r30
 448:	ff 93       	push	r31
	mcp2515_get_message(&spi_char);//get canbus message
 44a:	87 e2       	ldi	r24, 0x27	; 39
 44c:	91 e0       	ldi	r25, 0x01	; 1
 44e:	0e 94 30 01 	call	0x260	; 0x260 <mcp2515_get_message>
	rx_flag = 1;  //set flag
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
}
 458:	ff 91       	pop	r31
 45a:	ef 91       	pop	r30
 45c:	bf 91       	pop	r27
 45e:	af 91       	pop	r26
 460:	9f 91       	pop	r25
 462:	8f 91       	pop	r24
 464:	7f 91       	pop	r23
 466:	6f 91       	pop	r22
 468:	5f 91       	pop	r21
 46a:	4f 91       	pop	r20
 46c:	3f 91       	pop	r19
 46e:	2f 91       	pop	r18
 470:	0f 90       	pop	r0
 472:	0f be       	out	0x3f, r0	; 63
 474:	0f 90       	pop	r0
 476:	1f 90       	pop	r1
 478:	18 95       	reti

0000047a <_exit>:
 47a:	f8 94       	cli

0000047c <__stop_program>:
 47c:	ff cf       	rjmp	.-2      	; 0x47c <__stop_program>
