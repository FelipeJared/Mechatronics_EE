
can_bus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000866  000008fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000866  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800102  00800102  000008fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000092c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000114b  00000000  00000000  00000a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000033a  00000000  00000000  00001b67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000081b  00000000  00000000  00001ea1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b4  00000000  00000000  000026bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000083d  00000000  00000000  00002970  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a08  00000000  00000000  000031ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003bb5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 db 02 	jmp	0x5b6	; 0x5b6 <__vector_1>
   8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  10:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  14:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  18:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  1c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  20:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  24:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  2c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  30:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  34:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  38:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  3c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  40:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  44:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  48:	0c 94 04 03 	jmp	0x608	; 0x608 <__vector_18>
  4c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  50:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  54:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  58:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  5c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  60:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  68:	5e 03       	fmul	r21, r22
  6a:	77 03       	mulsu	r23, r23
  6c:	90 03       	fmuls	r17, r16
  6e:	a9 03       	fmulsu	r18, r17
  70:	c2 03       	fmuls	r20, r18
  72:	db 03       	fmulsu	r21, r19
  74:	f4 03       	fmuls	r23, r20
  76:	0d 04       	cpc	r0, r13
  78:	17 04       	cpc	r1, r7
  7a:	17 04       	cpc	r1, r7
  7c:	17 04       	cpc	r1, r7
  7e:	17 04       	cpc	r1, r7
  80:	17 04       	cpc	r1, r7
  82:	17 04       	cpc	r1, r7
  84:	17 04       	cpc	r1, r7
  86:	25 03       	mulsu	r18, r21
  88:	17 04       	cpc	r1, r7
  8a:	17 04       	cpc	r1, r7
  8c:	17 04       	cpc	r1, r7
  8e:	17 04       	cpc	r1, r7
  90:	17 04       	cpc	r1, r7
  92:	17 04       	cpc	r1, r7
  94:	17 04       	cpc	r1, r7
  96:	17 04       	cpc	r1, r7
  98:	17 04       	cpc	r1, r7
  9a:	17 04       	cpc	r1, r7
  9c:	17 04       	cpc	r1, r7
  9e:	17 04       	cpc	r1, r7
  a0:	17 04       	cpc	r1, r7
  a2:	17 04       	cpc	r1, r7
  a4:	17 04       	cpc	r1, r7
  a6:	38 03       	fmul	r19, r16

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	e6 e6       	ldi	r30, 0x66	; 102
  bc:	f8 e0       	ldi	r31, 0x08	; 8
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a2 30       	cpi	r26, 0x02	; 2
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>

000000ca <__do_clear_bss>:
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	a2 e0       	ldi	r26, 0x02	; 2
  ce:	b1 e0       	ldi	r27, 0x01	; 1
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
  d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
  d4:	a9 31       	cpi	r26, 0x19	; 25
  d6:	b2 07       	cpc	r27, r18
  d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
  da:	0e 94 a4 02 	call	0x548	; 0x548 <main>
  de:	0c 94 31 04 	jmp	0x862	; 0x862 <_exit>

000000e2 <__bad_interrupt>:
  e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e6 <GPIO_init>:
	while(wordsize != counter)
	{
		USART_Transmit(string[counter]);
		counter++;
	}
}
  e6:	52 98       	cbi	0x0a, 2	; 10
  e8:	20 9a       	sbi	0x04, 0	; 4
  ea:	08 95       	ret

000000ec <INTERRUPT_init>:
  ec:	e8 9a       	sbi	0x1d, 0	; 29
  ee:	e9 e6       	ldi	r30, 0x69	; 105
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	8c 7f       	andi	r24, 0xFC	; 252
  f6:	80 83       	st	Z, r24
  f8:	78 94       	sei
  fa:	08 95       	ret

000000fc <SPI_masterInit>:
  fc:	22 9a       	sbi	0x04, 2	; 4
  fe:	23 9a       	sbi	0x04, 3	; 4
 100:	25 9a       	sbi	0x04, 5	; 4
 102:	2a 9a       	sbi	0x05, 2	; 5
 104:	2b 98       	cbi	0x05, 3	; 5
 106:	2d 98       	cbi	0x05, 5	; 5
 108:	8c b5       	in	r24, 0x2c	; 44
 10a:	80 65       	ori	r24, 0x50	; 80
 10c:	8c bd       	out	0x2c, r24	; 44
 10e:	8c b5       	in	r24, 0x2c	; 44
 110:	83 60       	ori	r24, 0x03	; 3
 112:	8c bd       	out	0x2c, r24	; 44
 114:	08 95       	ret

00000116 <SPI_txrx>:
 116:	8e bd       	out	0x2e, r24	; 46
 118:	0d b4       	in	r0, 0x2d	; 45
 11a:	07 fe       	sbrs	r0, 7
 11c:	fd cf       	rjmp	.-6      	; 0x118 <SPI_txrx+0x2>
 11e:	87 ec       	ldi	r24, 0xC7	; 199
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <SPI_txrx+0xc>
 126:	00 c0       	rjmp	.+0      	; 0x128 <SPI_txrx+0x12>
 128:	00 00       	nop
 12a:	8e b5       	in	r24, 0x2e	; 46
 12c:	08 95       	ret

0000012e <mcp2515_write_register>:
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	d8 2f       	mov	r29, r24
 134:	c6 2f       	mov	r28, r22
 136:	2a 98       	cbi	0x05, 2	; 5
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 13e:	8d 2f       	mov	r24, r29
 140:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 144:	8c 2f       	mov	r24, r28
 146:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 14a:	2a 9a       	sbi	0x05, 2	; 5
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <mcp2515_read_register>:
 152:	cf 93       	push	r28
 154:	c8 2f       	mov	r28, r24
 156:	2a 98       	cbi	0x05, 2	; 5
 158:	83 e0       	ldi	r24, 0x03	; 3
 15a:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 15e:	8c 2f       	mov	r24, r28
 160:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 16a:	2a 9a       	sbi	0x05, 2	; 5
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <mcp2515_bit_modify>:
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	18 2f       	mov	r17, r24
 178:	d6 2f       	mov	r29, r22
 17a:	c4 2f       	mov	r28, r20
 17c:	2a 98       	cbi	0x05, 2	; 5
 17e:	85 e0       	ldi	r24, 0x05	; 5
 180:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 184:	81 2f       	mov	r24, r17
 186:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 18a:	8d 2f       	mov	r24, r29
 18c:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 190:	8c 2f       	mov	r24, r28
 192:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 196:	2a 9a       	sbi	0x05, 2	; 5
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	1f 91       	pop	r17
 19e:	08 95       	ret

000001a0 <mcp2515_read_status>:
 1a0:	2a 98       	cbi	0x05, 2	; 5
 1a2:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 1ac:	2a 9a       	sbi	0x05, 2	; 5
 1ae:	08 95       	ret

000001b0 <mcp2515_init>:
 1b0:	cf 93       	push	r28
 1b2:	c8 2f       	mov	r28, r24
 1b4:	2a 98       	cbi	0x05, 2	; 5
 1b6:	80 ec       	ldi	r24, 0xC0	; 192
 1b8:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 1bc:	2a 9a       	sbi	0x05, 2	; 5
 1be:	8a e6       	ldi	r24, 0x6A	; 106
 1c0:	8a 95       	dec	r24
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <mcp2515_init+0x10>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <mcp2515_init+0x16>
 1c6:	2a 98       	cbi	0x05, 2	; 5
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 1ce:	88 e2       	ldi	r24, 0x28	; 40
 1d0:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 1da:	80 e9       	ldi	r24, 0x90	; 144
 1dc:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 1e0:	8c 2f       	mov	r24, r28
 1e2:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 1e6:	83 e0       	ldi	r24, 0x03	; 3
 1e8:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 1ec:	2a 9a       	sbi	0x05, 2	; 5
 1ee:	8a e2       	ldi	r24, 0x2A	; 42
 1f0:	0e 94 a9 00 	call	0x152	; 0x152 <mcp2515_read_register>
 1f4:	8c 17       	cp	r24, r28
 1f6:	19 f0       	breq	.+6      	; 0x1fe <mcp2515_init+0x4e>
 1f8:	28 9a       	sbi	0x05, 0	; 5
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	16 c0       	rjmp	.+44     	; 0x22a <mcp2515_init+0x7a>
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	8c e0       	ldi	r24, 0x0C	; 12
 202:	0e 94 97 00 	call	0x12e	; 0x12e <mcp2515_write_register>
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	8d e0       	ldi	r24, 0x0D	; 13
 20a:	0e 94 97 00 	call	0x12e	; 0x12e <mcp2515_write_register>
 20e:	60 e6       	ldi	r22, 0x60	; 96
 210:	80 e6       	ldi	r24, 0x60	; 96
 212:	0e 94 97 00 	call	0x12e	; 0x12e <mcp2515_write_register>
 216:	60 e6       	ldi	r22, 0x60	; 96
 218:	80 e7       	ldi	r24, 0x70	; 112
 21a:	0e 94 97 00 	call	0x12e	; 0x12e <mcp2515_write_register>
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	8f e0       	ldi	r24, 0x0F	; 15
 222:	0e 94 97 00 	call	0x12e	; 0x12e <mcp2515_write_register>
 226:	28 98       	cbi	0x05, 0	; 5
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <mcp2515_get_message>:
 22e:	cf 92       	push	r12
 230:	df 92       	push	r13
 232:	ef 92       	push	r14
 234:	ff 92       	push	r15
 236:	0f 93       	push	r16
 238:	1f 93       	push	r17
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	1f 92       	push	r1
 240:	cd b7       	in	r28, 0x3d	; 61
 242:	de b7       	in	r29, 0x3e	; 62
 244:	6c 01       	movw	r12, r24
 246:	80 eb       	ldi	r24, 0xB0	; 176
 248:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <mcp2515_read_status>
 24c:	89 83       	std	Y+1, r24	; 0x01
 24e:	99 81       	ldd	r25, Y+1	; 0x01
 250:	89 2f       	mov	r24, r25
 252:	80 74       	andi	r24, 0x40	; 64
 254:	96 fd       	sbrc	r25, 6
 256:	06 c0       	rjmp	.+12     	; 0x264 <mcp2515_get_message+0x36>
 258:	99 81       	ldd	r25, Y+1	; 0x01
 25a:	99 23       	and	r25, r25
 25c:	0c f0       	brlt	.+2      	; 0x260 <mcp2515_get_message+0x32>
 25e:	5e c0       	rjmp	.+188    	; 0x31c <mcp2515_get_message+0xee>
 260:	84 e9       	ldi	r24, 0x94	; 148
 262:	01 c0       	rjmp	.+2      	; 0x266 <mcp2515_get_message+0x38>
 264:	80 e9       	ldi	r24, 0x90	; 144
 266:	2a 98       	cbi	0x05, 2	; 5
 268:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 26c:	8f ef       	ldi	r24, 0xFF	; 255
 26e:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 272:	28 e0       	ldi	r18, 0x08	; 8
 274:	82 9f       	mul	r24, r18
 276:	c0 01       	movw	r24, r0
 278:	11 24       	eor	r1, r1
 27a:	f6 01       	movw	r30, r12
 27c:	91 83       	std	Z+1, r25	; 0x01
 27e:	80 83       	st	Z, r24
 280:	8f ef       	ldi	r24, 0xFF	; 255
 282:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 286:	28 2f       	mov	r18, r24
 288:	22 95       	swap	r18
 28a:	26 95       	lsr	r18
 28c:	27 70       	andi	r18, 0x07	; 7
 28e:	f6 01       	movw	r30, r12
 290:	80 81       	ld	r24, Z
 292:	91 81       	ldd	r25, Z+1	; 0x01
 294:	82 2b       	or	r24, r18
 296:	91 83       	std	Z+1, r25	; 0x01
 298:	80 83       	st	Z, r24
 29a:	8f ef       	ldi	r24, 0xFF	; 255
 29c:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 2a0:	8f ef       	ldi	r24, 0xFF	; 255
 2a2:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 2a6:	8f ef       	ldi	r24, 0xFF	; 255
 2a8:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 2ac:	98 2f       	mov	r25, r24
 2ae:	9f 70       	andi	r25, 0x0F	; 15
 2b0:	29 2f       	mov	r18, r25
 2b2:	22 0f       	add	r18, r18
 2b4:	f6 01       	movw	r30, r12
 2b6:	82 81       	ldd	r24, Z+2	; 0x02
 2b8:	81 7e       	andi	r24, 0xE1	; 225
 2ba:	82 2b       	or	r24, r18
 2bc:	82 83       	std	Z+2, r24	; 0x02
 2be:	29 81       	ldd	r18, Y+1	; 0x01
 2c0:	23 fb       	bst	r18, 3
 2c2:	22 27       	eor	r18, r18
 2c4:	20 f9       	bld	r18, 0
 2c6:	20 fb       	bst	r18, 0
 2c8:	80 f9       	bld	r24, 0
 2ca:	82 83       	std	Z+2, r24	; 0x02
 2cc:	99 23       	and	r25, r25
 2ce:	a1 f0       	breq	.+40     	; 0x2f8 <mcp2515_get_message+0xca>
 2d0:	86 01       	movw	r16, r12
 2d2:	0d 5f       	subi	r16, 0xFD	; 253
 2d4:	1f 4f       	sbci	r17, 0xFF	; 255
 2d6:	91 50       	subi	r25, 0x01	; 1
 2d8:	e9 2e       	mov	r14, r25
 2da:	f1 2c       	mov	r15, r1
 2dc:	f4 e0       	ldi	r31, 0x04	; 4
 2de:	ef 0e       	add	r14, r31
 2e0:	f1 1c       	adc	r15, r1
 2e2:	ec 0c       	add	r14, r12
 2e4:	fd 1c       	adc	r15, r13
 2e6:	8f ef       	ldi	r24, 0xFF	; 255
 2e8:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 2ec:	f8 01       	movw	r30, r16
 2ee:	81 93       	st	Z+, r24
 2f0:	8f 01       	movw	r16, r30
 2f2:	ee 15       	cp	r30, r14
 2f4:	ff 05       	cpc	r31, r15
 2f6:	b9 f7       	brne	.-18     	; 0x2e6 <mcp2515_get_message+0xb8>
 2f8:	2a 9a       	sbi	0x05, 2	; 5
 2fa:	89 81       	ldd	r24, Y+1	; 0x01
 2fc:	86 ff       	sbrs	r24, 6
 2fe:	06 c0       	rjmp	.+12     	; 0x30c <mcp2515_get_message+0xde>
 300:	40 e0       	ldi	r20, 0x00	; 0
 302:	61 e0       	ldi	r22, 0x01	; 1
 304:	8c e2       	ldi	r24, 0x2C	; 44
 306:	0e 94 b8 00 	call	0x170	; 0x170 <mcp2515_bit_modify>
 30a:	05 c0       	rjmp	.+10     	; 0x316 <mcp2515_get_message+0xe8>
 30c:	40 e0       	ldi	r20, 0x00	; 0
 30e:	62 e0       	ldi	r22, 0x02	; 2
 310:	8c e2       	ldi	r24, 0x2C	; 44
 312:	0e 94 b8 00 	call	0x170	; 0x170 <mcp2515_bit_modify>
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	87 70       	andi	r24, 0x07	; 7
 31a:	8f 5f       	subi	r24, 0xFF	; 255
 31c:	0f 90       	pop	r0
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	1f 91       	pop	r17
 324:	0f 91       	pop	r16
 326:	ff 90       	pop	r15
 328:	ef 90       	pop	r14
 32a:	df 90       	pop	r13
 32c:	cf 90       	pop	r12
 32e:	08 95       	ret

00000330 <mcp2515_send_message>:
 330:	bf 92       	push	r11
 332:	cf 92       	push	r12
 334:	df 92       	push	r13
 336:	ef 92       	push	r14
 338:	ff 92       	push	r15
 33a:	0f 93       	push	r16
 33c:	1f 93       	push	r17
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	1f 92       	push	r1
 344:	cd b7       	in	r28, 0x3d	; 61
 346:	de b7       	in	r29, 0x3e	; 62
 348:	6c 01       	movw	r12, r24
 34a:	80 ea       	ldi	r24, 0xA0	; 160
 34c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <mcp2515_read_status>
 350:	89 83       	std	Y+1, r24	; 0x01
 352:	89 81       	ldd	r24, Y+1	; 0x01
 354:	82 ff       	sbrs	r24, 2
 356:	0a c0       	rjmp	.+20     	; 0x36c <mcp2515_send_message+0x3c>
 358:	89 81       	ldd	r24, Y+1	; 0x01
 35a:	84 ff       	sbrs	r24, 4
 35c:	09 c0       	rjmp	.+18     	; 0x370 <mcp2515_send_message+0x40>
 35e:	89 81       	ldd	r24, Y+1	; 0x01
 360:	86 fd       	sbrc	r24, 6
 362:	69 c0       	rjmp	.+210    	; 0x436 <__FUSE_REGION_LENGTH__+0x36>
 364:	68 94       	set
 366:	bb 24       	eor	r11, r11
 368:	b2 f8       	bld	r11, 2
 36a:	05 c0       	rjmp	.+10     	; 0x376 <mcp2515_send_message+0x46>
 36c:	b1 2c       	mov	r11, r1
 36e:	03 c0       	rjmp	.+6      	; 0x376 <mcp2515_send_message+0x46>
 370:	68 94       	set
 372:	bb 24       	eor	r11, r11
 374:	b1 f8       	bld	r11, 1
 376:	2a 98       	cbi	0x05, 2	; 5
 378:	8b 2d       	mov	r24, r11
 37a:	80 64       	ori	r24, 0x40	; 64
 37c:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 380:	d6 01       	movw	r26, r12
 382:	8d 91       	ld	r24, X+
 384:	9c 91       	ld	r25, X
 386:	96 95       	lsr	r25
 388:	87 95       	ror	r24
 38a:	96 95       	lsr	r25
 38c:	87 95       	ror	r24
 38e:	96 95       	lsr	r25
 390:	87 95       	ror	r24
 392:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 396:	f6 01       	movw	r30, r12
 398:	80 81       	ld	r24, Z
 39a:	82 95       	swap	r24
 39c:	88 0f       	add	r24, r24
 39e:	80 7e       	andi	r24, 0xE0	; 224
 3a0:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 3b0:	d6 01       	movw	r26, r12
 3b2:	12 96       	adiw	r26, 0x02	; 2
 3b4:	8c 91       	ld	r24, X
 3b6:	e8 2e       	mov	r14, r24
 3b8:	e6 94       	lsr	r14
 3ba:	be 2d       	mov	r27, r14
 3bc:	bf 70       	andi	r27, 0x0F	; 15
 3be:	eb 2e       	mov	r14, r27
 3c0:	80 ff       	sbrs	r24, 0
 3c2:	05 c0       	rjmp	.+10     	; 0x3ce <mcp2515_send_message+0x9e>
 3c4:	8b 2f       	mov	r24, r27
 3c6:	80 64       	ori	r24, 0x40	; 64
 3c8:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 3cc:	17 c0       	rjmp	.+46     	; 0x3fc <mcp2515_send_message+0xcc>
 3ce:	8b 2f       	mov	r24, r27
 3d0:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 3d4:	ee 20       	and	r14, r14
 3d6:	91 f0       	breq	.+36     	; 0x3fc <mcp2515_send_message+0xcc>
 3d8:	86 01       	movw	r16, r12
 3da:	0d 5f       	subi	r16, 0xFD	; 253
 3dc:	1f 4f       	sbci	r17, 0xFF	; 255
 3de:	ea 94       	dec	r14
 3e0:	f1 2c       	mov	r15, r1
 3e2:	e4 e0       	ldi	r30, 0x04	; 4
 3e4:	ee 0e       	add	r14, r30
 3e6:	f1 1c       	adc	r15, r1
 3e8:	ec 0c       	add	r14, r12
 3ea:	fd 1c       	adc	r15, r13
 3ec:	d8 01       	movw	r26, r16
 3ee:	8d 91       	ld	r24, X+
 3f0:	8d 01       	movw	r16, r26
 3f2:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 3f6:	0e 15       	cp	r16, r14
 3f8:	1f 05       	cpc	r17, r15
 3fa:	c1 f7       	brne	.-16     	; 0x3ec <mcp2515_send_message+0xbc>
 3fc:	2a 9a       	sbi	0x05, 2	; 5
 3fe:	b5 e0       	ldi	r27, 0x05	; 5
 400:	ba 95       	dec	r27
 402:	f1 f7       	brne	.-4      	; 0x400 <__FUSE_REGION_LENGTH__>
 404:	00 00       	nop
 406:	2a 98       	cbi	0x05, 2	; 5
 408:	b1 10       	cpse	r11, r1
 40a:	02 c0       	rjmp	.+4      	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
 40c:	bb 24       	eor	r11, r11
 40e:	b3 94       	inc	r11
 410:	8b 2d       	mov	r24, r11
 412:	80 68       	ori	r24, 0x80	; 128
 414:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_txrx>
 418:	2a 9a       	sbi	0x05, 2	; 5
 41a:	f6 01       	movw	r30, r12
 41c:	11 82       	std	Z+1, r1	; 0x01
 41e:	10 82       	st	Z, r1
 420:	82 81       	ldd	r24, Z+2	; 0x02
 422:	80 7e       	andi	r24, 0xE0	; 224
 424:	82 83       	std	Z+2, r24	; 0x02
 426:	33 96       	adiw	r30, 0x03	; 3
 428:	88 e0       	ldi	r24, 0x08	; 8
 42a:	df 01       	movw	r26, r30
 42c:	1d 92       	st	X+, r1
 42e:	8a 95       	dec	r24
 430:	e9 f7       	brne	.-6      	; 0x42c <__FUSE_REGION_LENGTH__+0x2c>
 432:	8b 2d       	mov	r24, r11
 434:	01 c0       	rjmp	.+2      	; 0x438 <__FUSE_REGION_LENGTH__+0x38>
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	0f 90       	pop	r0
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	1f 91       	pop	r17
 440:	0f 91       	pop	r16
 442:	ff 90       	pop	r15
 444:	ef 90       	pop	r14
 446:	df 90       	pop	r13
 448:	cf 90       	pop	r12
 44a:	bf 90       	pop	r11
 44c:	08 95       	ret

0000044e <USART_Init>:
 44e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 452:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 456:	e1 ec       	ldi	r30, 0xC1	; 193
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	80 81       	ld	r24, Z
 45c:	88 69       	ori	r24, 0x98	; 152
 45e:	80 83       	st	Z, r24
 460:	e2 ec       	ldi	r30, 0xC2	; 194
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	80 81       	ld	r24, Z
 466:	86 60       	ori	r24, 0x06	; 6
 468:	80 83       	st	Z, r24
 46a:	08 95       	ret

0000046c <USART_Receive>:
 46c:	e0 ec       	ldi	r30, 0xC0	; 192
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
 472:	88 23       	and	r24, r24
 474:	ec f7       	brge	.-6      	; 0x470 <USART_Receive+0x4>
 476:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 47a:	08 95       	ret

0000047c <USART_Transmit>:
 47c:	e0 ec       	ldi	r30, 0xC0	; 192
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	90 81       	ld	r25, Z
 482:	95 ff       	sbrs	r25, 5
 484:	fd cf       	rjmp	.-6      	; 0x480 <USART_Transmit+0x4>
 486:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 48a:	08 95       	ret

0000048c <USART_CAN_TX>:
/******************************************************************************
	USART CAN FRAME transmit|
		transmits a full CAN frame struct(tCAN) over UART
******************************************************************************/
void USART_CAN_TX(tCAN data)
{
 48c:	cf 92       	push	r12
 48e:	df 92       	push	r13
 490:	ef 92       	push	r14
 492:	ff 92       	push	r15
 494:	0f 93       	push	r16
 496:	1f 93       	push	r17
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	cd b7       	in	r28, 0x3d	; 61
 49e:	de b7       	in	r29, 0x3e	; 62
 4a0:	2b 97       	sbiw	r28, 0x0b	; 11
 4a2:	0f b6       	in	r0, 0x3f	; 63
 4a4:	f8 94       	cli
 4a6:	de bf       	out	0x3e, r29	; 62
 4a8:	0f be       	out	0x3f, r0	; 63
 4aa:	cd bf       	out	0x3d, r28	; 61
 4ac:	e9 82       	std	Y+1, r14	; 0x01
 4ae:	fa 82       	std	Y+2, r15	; 0x02
 4b0:	0b 83       	std	Y+3, r16	; 0x03
 4b2:	1c 83       	std	Y+4, r17	; 0x04
 4b4:	2d 83       	std	Y+5, r18	; 0x05
 4b6:	3e 83       	std	Y+6, r19	; 0x06
 4b8:	4f 83       	std	Y+7, r20	; 0x07
 4ba:	58 87       	std	Y+8, r21	; 0x08
 4bc:	69 87       	std	Y+9, r22	; 0x09
 4be:	7a 87       	std	Y+10, r23	; 0x0a
 4c0:	8b 87       	std	Y+11, r24	; 0x0b
 4c2:	c9 80       	ldd	r12, Y+1	; 0x01
 4c4:	da 80       	ldd	r13, Y+2	; 0x02
 4c6:	06 95       	lsr	r16
 4c8:	0f 70       	andi	r16, 0x0F	; 15
	USART_Transmit(data.id >> 3); //CanID_High
 4ca:	c6 01       	movw	r24, r12
 4cc:	96 95       	lsr	r25
 4ce:	87 95       	ror	r24
 4d0:	96 95       	lsr	r25
 4d2:	87 95       	ror	r24
 4d4:	96 95       	lsr	r25
 4d6:	87 95       	ror	r24
 4d8:	0e 94 3e 02 	call	0x47c	; 0x47c <USART_Transmit>
	
	USART_Transmit((data.id << 5) | (data.header.rtr <<4) | data.header.length);
 4dc:	cc 0c       	add	r12, r12
 4de:	cc 0c       	add	r12, r12
 4e0:	cc 0c       	add	r12, r12
 4e2:	cc 0c       	add	r12, r12
 4e4:	cc 0c       	add	r12, r12
 4e6:	8b 81       	ldd	r24, Y+3	; 0x03
 4e8:	81 70       	andi	r24, 0x01	; 1
 4ea:	82 95       	swap	r24
 4ec:	80 7f       	andi	r24, 0xF0	; 240
 4ee:	8c 29       	or	r24, r12
 4f0:	80 2b       	or	r24, r16
 4f2:	0e 94 3e 02 	call	0x47c	; 0x47c <USART_Transmit>
	
	//read back all data received.
	if(!data.header.rtr){
 4f6:	8b 81       	ldd	r24, Y+3	; 0x03
 4f8:	80 fd       	sbrc	r24, 0
 4fa:	17 c0       	rjmp	.+46     	; 0x52a <USART_CAN_TX+0x9e>
		for (uint8_t t = 0; t < data.header.length;t++) {
 4fc:	e0 2e       	mov	r14, r16
 4fe:	f1 2c       	mov	r15, r1
 500:	1e 14       	cp	r1, r14
 502:	1f 04       	cpc	r1, r15
 504:	94 f4       	brge	.+36     	; 0x52a <USART_CAN_TX+0x9e>
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	10 e0       	ldi	r17, 0x00	; 0
			USART_Transmit(data.data[t]); //data
 50c:	e4 e0       	ldi	r30, 0x04	; 4
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	ec 0f       	add	r30, r28
 512:	fd 1f       	adc	r31, r29
 514:	e8 0f       	add	r30, r24
 516:	f9 1f       	adc	r31, r25
 518:	80 81       	ld	r24, Z
 51a:	0e 94 3e 02 	call	0x47c	; 0x47c <USART_Transmit>
	
	USART_Transmit((data.id << 5) | (data.header.rtr <<4) | data.header.length);
	
	//read back all data received.
	if(!data.header.rtr){
		for (uint8_t t = 0; t < data.header.length;t++) {
 51e:	1f 5f       	subi	r17, 0xFF	; 255
 520:	81 2f       	mov	r24, r17
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	8e 15       	cp	r24, r14
 526:	9f 05       	cpc	r25, r15
 528:	8c f3       	brlt	.-30     	; 0x50c <USART_CAN_TX+0x80>
			USART_Transmit(data.data[t]); //data
		}
	}
 52a:	2b 96       	adiw	r28, 0x0b	; 11
 52c:	0f b6       	in	r0, 0x3f	; 63
 52e:	f8 94       	cli
 530:	de bf       	out	0x3e, r29	; 62
 532:	0f be       	out	0x3f, r0	; 63
 534:	cd bf       	out	0x3d, r28	; 61
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	1f 91       	pop	r17
 53c:	0f 91       	pop	r16
 53e:	ff 90       	pop	r15
 540:	ef 90       	pop	r14
 542:	df 90       	pop	r13
 544:	cf 90       	pop	r12
 546:	08 95       	ret

00000548 <main>:
	start of main()|
******************************************************************************/
int main(void)
{
	//initialization functions
	GPIO_init();
 548:	0e 94 73 00 	call	0xe6	; 0xe6 <GPIO_init>
	INTERRUPT_init();
 54c:	0e 94 76 00 	call	0xec	; 0xec <INTERRUPT_init>
	USART_Init(103);//103 sets baud rate at 9600
 550:	87 e6       	ldi	r24, 0x67	; 103
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	0e 94 27 02 	call	0x44e	; 0x44e <USART_Init>
	SPI_masterInit();
 558:	0e 94 7e 00 	call	0xfc	; 0xfc <SPI_masterInit>
	
	
	//MCP2515 initialization
	if(mcp2515_init(CANSPEED_500))
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <mcp2515_init>
 562:	88 23       	and	r24, r24
 564:	21 f0       	breq	.+8      	; 0x56e <main+0x26>
	{
		USART_Transmit(0xFF);
 566:	8f ef       	ldi	r24, 0xFF	; 255
 568:	0e 94 3e 02 	call	0x47c	; 0x47c <USART_Transmit>
 56c:	03 c0       	rjmp	.+6      	; 0x574 <main+0x2c>
	}else
	{
		USART_Transmit(0x00);
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	0e 94 3e 02 	call	0x47c	; 0x47c <USART_Transmit>
	while (1)
	{
		//if rx_flag is set, that means there's a received message stored in
		//spi_char, so ATOMIC_BLOCK disabled interrupts, then transmits it
		//over uart.
		if(rx_flag){
 574:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 578:	88 23       	and	r24, r24
 57a:	e1 f3       	breq	.-8      	; 0x574 <main+0x2c>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 57c:	f8 94       	cli
				ATOMIC_BLOCK(ATOMIC_FORCEON){
				USART_CAN_TX(CANRX_buffer);
 57e:	e0 90 03 01 	lds	r14, 0x0103	; 0x800103 <CANRX_buffer>
 582:	f0 90 04 01 	lds	r15, 0x0104	; 0x800104 <CANRX_buffer+0x1>
 586:	00 91 05 01 	lds	r16, 0x0105	; 0x800105 <CANRX_buffer+0x2>
 58a:	10 91 06 01 	lds	r17, 0x0106	; 0x800106 <CANRX_buffer+0x3>
 58e:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <CANRX_buffer+0x4>
 592:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <CANRX_buffer+0x5>
 596:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <CANRX_buffer+0x6>
 59a:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <CANRX_buffer+0x7>
 59e:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <CANRX_buffer+0x8>
 5a2:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <CANRX_buffer+0x9>
 5a6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <CANRX_buffer+0xa>
 5aa:	0e 94 46 02 	call	0x48c	; 0x48c <USART_CAN_TX>
				rx_flag = 0;
 5ae:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 5b2:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
 5b4:	df cf       	rjmp	.-66     	; 0x574 <main+0x2c>

000005b6 <__vector_1>:

/******************************************************************************
	RECEIVE interrupt on pin PD2|
******************************************************************************/
ISR(INT0_vect)
{
 5b6:	1f 92       	push	r1
 5b8:	0f 92       	push	r0
 5ba:	0f b6       	in	r0, 0x3f	; 63
 5bc:	0f 92       	push	r0
 5be:	11 24       	eor	r1, r1
 5c0:	2f 93       	push	r18
 5c2:	3f 93       	push	r19
 5c4:	4f 93       	push	r20
 5c6:	5f 93       	push	r21
 5c8:	6f 93       	push	r22
 5ca:	7f 93       	push	r23
 5cc:	8f 93       	push	r24
 5ce:	9f 93       	push	r25
 5d0:	af 93       	push	r26
 5d2:	bf 93       	push	r27
 5d4:	ef 93       	push	r30
 5d6:	ff 93       	push	r31
	mcp2515_get_message(&CANRX_buffer);//get canbus message
 5d8:	83 e0       	ldi	r24, 0x03	; 3
 5da:	91 e0       	ldi	r25, 0x01	; 1
 5dc:	0e 94 17 01 	call	0x22e	; 0x22e <mcp2515_get_message>
	rx_flag = 1;  //set flag
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
}
 5e6:	ff 91       	pop	r31
 5e8:	ef 91       	pop	r30
 5ea:	bf 91       	pop	r27
 5ec:	af 91       	pop	r26
 5ee:	9f 91       	pop	r25
 5f0:	8f 91       	pop	r24
 5f2:	7f 91       	pop	r23
 5f4:	6f 91       	pop	r22
 5f6:	5f 91       	pop	r21
 5f8:	4f 91       	pop	r20
 5fa:	3f 91       	pop	r19
 5fc:	2f 91       	pop	r18
 5fe:	0f 90       	pop	r0
 600:	0f be       	out	0x3f, r0	; 63
 602:	0f 90       	pop	r0
 604:	1f 90       	pop	r1
 606:	18 95       	reti

00000608 <__vector_18>:

ISR(USART_RX_vect)
{	
 608:	1f 92       	push	r1
 60a:	0f 92       	push	r0
 60c:	0f b6       	in	r0, 0x3f	; 63
 60e:	0f 92       	push	r0
 610:	11 24       	eor	r1, r1
 612:	2f 93       	push	r18
 614:	3f 93       	push	r19
 616:	4f 93       	push	r20
 618:	5f 93       	push	r21
 61a:	6f 93       	push	r22
 61c:	7f 93       	push	r23
 61e:	8f 93       	push	r24
 620:	9f 93       	push	r25
 622:	af 93       	push	r26
 624:	bf 93       	push	r27
 626:	ef 93       	push	r30
 628:	ff 93       	push	r31
	uint8_t receive_buff = USART_Receive();
 62a:	0e 94 36 02 	call	0x46c	; 0x46c <USART_Receive>
	
	//select which adc to sample from
	switch(Rx_frame_state){
 62e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <Rx_frame_state>
 632:	4e 2f       	mov	r20, r30
 634:	50 e0       	ldi	r21, 0x00	; 0
 636:	fa 01       	movw	r30, r20
 638:	31 97       	sbiw	r30, 0x01	; 1
 63a:	e0 32       	cpi	r30, 0x20	; 32
 63c:	f1 05       	cpc	r31, r1
 63e:	08 f0       	brcs	.+2      	; 0x642 <__vector_18+0x3a>
 640:	f6 c0       	rjmp	.+492    	; 0x82e <__vector_18+0x226>
 642:	ec 5c       	subi	r30, 0xCC	; 204
 644:	ff 4f       	sbci	r31, 0xFF	; 255
 646:	0c 94 2b 04 	jmp	0x856	; 0x856 <__tablejump2__>
		case s_RxIDH : //frameID High
		CANTX_buffer.id |= (receive_buff <<3);
 64a:	ee e0       	ldi	r30, 0x0E	; 14
 64c:	f1 e0       	ldi	r31, 0x01	; 1
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	88 0f       	add	r24, r24
 652:	99 1f       	adc	r25, r25
 654:	88 0f       	add	r24, r24
 656:	99 1f       	adc	r25, r25
 658:	88 0f       	add	r24, r24
 65a:	99 1f       	adc	r25, r25
 65c:	20 81       	ld	r18, Z
 65e:	31 81       	ldd	r19, Z+1	; 0x01
 660:	82 2b       	or	r24, r18
 662:	93 2b       	or	r25, r19
 664:	91 83       	std	Z+1, r25	; 0x01
 666:	80 83       	st	Z, r24
		Rx_frame_state = s_RxIDL;
 668:	80 e2       	ldi	r24, 0x20	; 32
 66a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
		break;
 66e:	e2 c0       	rjmp	.+452    	; 0x834 <__vector_18+0x22c>
		case s_RxIDL : //frameID Low, rtr, & length = 0bXXXYZZZZ
		CANTX_buffer.id |= (receive_buff >>5);
 670:	ee e0       	ldi	r30, 0x0E	; 14
 672:	f1 e0       	ldi	r31, 0x01	; 1
 674:	98 2f       	mov	r25, r24
 676:	92 95       	swap	r25
 678:	96 95       	lsr	r25
 67a:	97 70       	andi	r25, 0x07	; 7
 67c:	20 81       	ld	r18, Z
 67e:	31 81       	ldd	r19, Z+1	; 0x01
 680:	29 2b       	or	r18, r25
 682:	31 83       	std	Z+1, r19	; 0x01
 684:	20 83       	st	Z, r18
		CANTX_buffer.header.rtr =  ((receive_buff >>4) & 0x01);
 686:	28 2f       	mov	r18, r24
 688:	22 95       	swap	r18
 68a:	2f 70       	andi	r18, 0x0F	; 15
 68c:	e0 e1       	ldi	r30, 0x10	; 16
 68e:	f1 e0       	ldi	r31, 0x01	; 1
 690:	90 81       	ld	r25, Z
 692:	20 fb       	bst	r18, 0
 694:	90 f9       	bld	r25, 0
		CANTX_buffer.header.length = (receive_buff & 0x0F);
 696:	8f 70       	andi	r24, 0x0F	; 15
 698:	88 0f       	add	r24, r24
 69a:	91 7e       	andi	r25, 0xE1	; 225
 69c:	89 2b       	or	r24, r25
 69e:	80 83       	st	Z, r24
		if(CANTX_buffer.header.rtr){
 6a0:	80 ff       	sbrs	r24, 0
 6a2:	08 c0       	rjmp	.+16     	; 0x6b4 <__vector_18+0xac>
			mcp2515_send_message(&CANTX_buffer);
 6a4:	8e e0       	ldi	r24, 0x0E	; 14
 6a6:	91 e0       	ldi	r25, 0x01	; 1
 6a8:	0e 94 98 01 	call	0x330	; 0x330 <mcp2515_send_message>
			receive_buff = 0;
			Rx_frame_state = s_RxIDH;
 6ac:	80 e1       	ldi	r24, 0x10	; 16
 6ae:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 6b2:	c0 c0       	rjmp	.+384    	; 0x834 <__vector_18+0x22c>
			} else {
			Rx_frame_state = s_Rxdata1;
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 6ba:	bc c0       	rjmp	.+376    	; 0x834 <__vector_18+0x22c>
		}
		break;
		case s_Rxdata1 : //data1
		CANTX_buffer.data[0] = receive_buff;
 6bc:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <CANTX_buffer+0x3>
		if(Rx_frame_state < CANTX_buffer.header.length){
 6c0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 6c4:	30 e0       	ldi	r19, 0x00	; 0
 6c6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <CANTX_buffer+0x2>
 6ca:	86 95       	lsr	r24
 6cc:	8f 70       	andi	r24, 0x0F	; 15
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	28 17       	cp	r18, r24
 6d2:	39 07       	cpc	r19, r25
 6d4:	24 f4       	brge	.+8      	; 0x6de <__vector_18+0xd6>
			Rx_frame_state = s_Rxdata2;
 6d6:	82 e0       	ldi	r24, 0x02	; 2
 6d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 6dc:	ab c0       	rjmp	.+342    	; 0x834 <__vector_18+0x22c>
			}else{
			mcp2515_send_message(&CANTX_buffer);
 6de:	8e e0       	ldi	r24, 0x0E	; 14
 6e0:	91 e0       	ldi	r25, 0x01	; 1
 6e2:	0e 94 98 01 	call	0x330	; 0x330 <mcp2515_send_message>
			receive_buff = 0;
			Rx_frame_state = s_RxIDH;
 6e6:	80 e1       	ldi	r24, 0x10	; 16
 6e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 6ec:	a3 c0       	rjmp	.+326    	; 0x834 <__vector_18+0x22c>
		}
		break;
		case s_Rxdata2 ://data2
		CANTX_buffer.data[1] = receive_buff;
 6ee:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <CANTX_buffer+0x4>
		if(Rx_frame_state < CANTX_buffer.header.length){
 6f2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 6f6:	30 e0       	ldi	r19, 0x00	; 0
 6f8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <CANTX_buffer+0x2>
 6fc:	86 95       	lsr	r24
 6fe:	8f 70       	andi	r24, 0x0F	; 15
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	28 17       	cp	r18, r24
 704:	39 07       	cpc	r19, r25
 706:	24 f4       	brge	.+8      	; 0x710 <__vector_18+0x108>
			Rx_frame_state = s_Rxdata3;
 708:	83 e0       	ldi	r24, 0x03	; 3
 70a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 70e:	92 c0       	rjmp	.+292    	; 0x834 <__vector_18+0x22c>
			}else{
			mcp2515_send_message(&CANTX_buffer);
 710:	8e e0       	ldi	r24, 0x0E	; 14
 712:	91 e0       	ldi	r25, 0x01	; 1
 714:	0e 94 98 01 	call	0x330	; 0x330 <mcp2515_send_message>
			receive_buff = 0;
			Rx_frame_state = s_RxIDH;
 718:	80 e1       	ldi	r24, 0x10	; 16
 71a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 71e:	8a c0       	rjmp	.+276    	; 0x834 <__vector_18+0x22c>
		}
		break;
		case s_Rxdata3 ://data3
		CANTX_buffer.data[2] = receive_buff;
 720:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <CANTX_buffer+0x5>
		if(Rx_frame_state < CANTX_buffer.header.length){
 724:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 728:	30 e0       	ldi	r19, 0x00	; 0
 72a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <CANTX_buffer+0x2>
 72e:	86 95       	lsr	r24
 730:	8f 70       	andi	r24, 0x0F	; 15
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	28 17       	cp	r18, r24
 736:	39 07       	cpc	r19, r25
 738:	24 f4       	brge	.+8      	; 0x742 <__vector_18+0x13a>
			Rx_frame_state = s_Rxdata4;
 73a:	84 e0       	ldi	r24, 0x04	; 4
 73c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 740:	79 c0       	rjmp	.+242    	; 0x834 <__vector_18+0x22c>
			}else{
			mcp2515_send_message(&CANTX_buffer);
 742:	8e e0       	ldi	r24, 0x0E	; 14
 744:	91 e0       	ldi	r25, 0x01	; 1
 746:	0e 94 98 01 	call	0x330	; 0x330 <mcp2515_send_message>
			receive_buff = 0;
			Rx_frame_state = s_RxIDH;
 74a:	80 e1       	ldi	r24, 0x10	; 16
 74c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 750:	71 c0       	rjmp	.+226    	; 0x834 <__vector_18+0x22c>
		}
		break;
		case s_Rxdata4 ://data4
		CANTX_buffer.data[3] = receive_buff;
 752:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <CANTX_buffer+0x6>
		if(Rx_frame_state < CANTX_buffer.header.length){
 756:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 75a:	30 e0       	ldi	r19, 0x00	; 0
 75c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <CANTX_buffer+0x2>
 760:	86 95       	lsr	r24
 762:	8f 70       	andi	r24, 0x0F	; 15
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	28 17       	cp	r18, r24
 768:	39 07       	cpc	r19, r25
 76a:	24 f4       	brge	.+8      	; 0x774 <__vector_18+0x16c>
			Rx_frame_state = s_Rxdata5;
 76c:	85 e0       	ldi	r24, 0x05	; 5
 76e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 772:	60 c0       	rjmp	.+192    	; 0x834 <__vector_18+0x22c>
			}else{
			mcp2515_send_message(&CANTX_buffer);
 774:	8e e0       	ldi	r24, 0x0E	; 14
 776:	91 e0       	ldi	r25, 0x01	; 1
 778:	0e 94 98 01 	call	0x330	; 0x330 <mcp2515_send_message>
			receive_buff = 0;
			Rx_frame_state = s_RxIDH;
 77c:	80 e1       	ldi	r24, 0x10	; 16
 77e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 782:	58 c0       	rjmp	.+176    	; 0x834 <__vector_18+0x22c>
		}
		break;
		case s_Rxdata5 ://data5
		CANTX_buffer.data[4] = receive_buff;
 784:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <CANTX_buffer+0x7>
		if(Rx_frame_state < CANTX_buffer.header.length){
 788:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 78c:	30 e0       	ldi	r19, 0x00	; 0
 78e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <CANTX_buffer+0x2>
 792:	86 95       	lsr	r24
 794:	8f 70       	andi	r24, 0x0F	; 15
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	28 17       	cp	r18, r24
 79a:	39 07       	cpc	r19, r25
 79c:	24 f4       	brge	.+8      	; 0x7a6 <__vector_18+0x19e>
			Rx_frame_state = s_Rxdata6;
 79e:	86 e0       	ldi	r24, 0x06	; 6
 7a0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 7a4:	47 c0       	rjmp	.+142    	; 0x834 <__vector_18+0x22c>
			}else{
			mcp2515_send_message(&CANTX_buffer);
 7a6:	8e e0       	ldi	r24, 0x0E	; 14
 7a8:	91 e0       	ldi	r25, 0x01	; 1
 7aa:	0e 94 98 01 	call	0x330	; 0x330 <mcp2515_send_message>
			receive_buff = 0;
			Rx_frame_state = s_RxIDH;
 7ae:	80 e1       	ldi	r24, 0x10	; 16
 7b0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 7b4:	3f c0       	rjmp	.+126    	; 0x834 <__vector_18+0x22c>
		}
		break;
		case s_Rxdata6 ://data6
		CANTX_buffer.data[5] = receive_buff;
 7b6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <CANTX_buffer+0x8>
		if(Rx_frame_state < CANTX_buffer.header.length){
 7ba:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 7be:	30 e0       	ldi	r19, 0x00	; 0
 7c0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <CANTX_buffer+0x2>
 7c4:	86 95       	lsr	r24
 7c6:	8f 70       	andi	r24, 0x0F	; 15
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	28 17       	cp	r18, r24
 7cc:	39 07       	cpc	r19, r25
 7ce:	24 f4       	brge	.+8      	; 0x7d8 <__vector_18+0x1d0>
			Rx_frame_state = s_Rxdata7;
 7d0:	87 e0       	ldi	r24, 0x07	; 7
 7d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 7d6:	2e c0       	rjmp	.+92     	; 0x834 <__vector_18+0x22c>
			}else{
			mcp2515_send_message(&CANTX_buffer);
 7d8:	8e e0       	ldi	r24, 0x0E	; 14
 7da:	91 e0       	ldi	r25, 0x01	; 1
 7dc:	0e 94 98 01 	call	0x330	; 0x330 <mcp2515_send_message>
			receive_buff = 0;
			Rx_frame_state = s_RxIDH;
 7e0:	80 e1       	ldi	r24, 0x10	; 16
 7e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 7e6:	26 c0       	rjmp	.+76     	; 0x834 <__vector_18+0x22c>
		}
		break;
		case s_Rxdata7 ://data7
		CANTX_buffer.data[6] = receive_buff;
 7e8:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <CANTX_buffer+0x9>
		if(Rx_frame_state < CANTX_buffer.header.length){
 7ec:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 7f0:	30 e0       	ldi	r19, 0x00	; 0
 7f2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <CANTX_buffer+0x2>
 7f6:	86 95       	lsr	r24
 7f8:	8f 70       	andi	r24, 0x0F	; 15
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	28 17       	cp	r18, r24
 7fe:	39 07       	cpc	r19, r25
 800:	24 f4       	brge	.+8      	; 0x80a <__vector_18+0x202>
			Rx_frame_state = s_Rxdata8;
 802:	88 e0       	ldi	r24, 0x08	; 8
 804:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 808:	15 c0       	rjmp	.+42     	; 0x834 <__vector_18+0x22c>
			}else{
			mcp2515_send_message(&CANTX_buffer);
 80a:	8e e0       	ldi	r24, 0x0E	; 14
 80c:	91 e0       	ldi	r25, 0x01	; 1
 80e:	0e 94 98 01 	call	0x330	; 0x330 <mcp2515_send_message>
			receive_buff = 0;
			Rx_frame_state = s_RxIDH;
 812:	80 e1       	ldi	r24, 0x10	; 16
 814:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 818:	0d c0       	rjmp	.+26     	; 0x834 <__vector_18+0x22c>
		}
		break;
		case s_Rxdata8 ://data8
		CANTX_buffer.data[7] = receive_buff;
 81a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <CANTX_buffer+0xa>
		mcp2515_send_message(&CANTX_buffer);
 81e:	8e e0       	ldi	r24, 0x0E	; 14
 820:	91 e0       	ldi	r25, 0x01	; 1
 822:	0e 94 98 01 	call	0x330	; 0x330 <mcp2515_send_message>
		receive_buff = 0;
		Rx_frame_state = s_RxIDH;
 826:	80 e1       	ldi	r24, 0x10	; 16
 828:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
		break;
 82c:	03 c0       	rjmp	.+6      	; 0x834 <__vector_18+0x22c>
		default : Rx_frame_state = s_RxIDH;
 82e:	80 e1       	ldi	r24, 0x10	; 16
 830:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
		break;
	}
 834:	ff 91       	pop	r31
 836:	ef 91       	pop	r30
 838:	bf 91       	pop	r27
 83a:	af 91       	pop	r26
 83c:	9f 91       	pop	r25
 83e:	8f 91       	pop	r24
 840:	7f 91       	pop	r23
 842:	6f 91       	pop	r22
 844:	5f 91       	pop	r21
 846:	4f 91       	pop	r20
 848:	3f 91       	pop	r19
 84a:	2f 91       	pop	r18
 84c:	0f 90       	pop	r0
 84e:	0f be       	out	0x3f, r0	; 63
 850:	0f 90       	pop	r0
 852:	1f 90       	pop	r1
 854:	18 95       	reti

00000856 <__tablejump2__>:
 856:	ee 0f       	add	r30, r30
 858:	ff 1f       	adc	r31, r31
 85a:	05 90       	lpm	r0, Z+
 85c:	f4 91       	lpm	r31, Z
 85e:	e0 2d       	mov	r30, r0
 860:	09 94       	ijmp

00000862 <_exit>:
 862:	f8 94       	cli

00000864 <__stop_program>:
 864:	ff cf       	rjmp	.-2      	; 0x864 <__stop_program>
