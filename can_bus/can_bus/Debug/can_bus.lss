
can_bus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000896  0000092a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000896  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800102  00800102  0000092c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000095c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000115f  00000000  00000000  00000a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000033a  00000000  00000000  00001bab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000082d  00000000  00000000  00001ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b4  00000000  00000000  00002714  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000083d  00000000  00000000  000029c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a08  00000000  00000000  00003205  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003c0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
   4:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <__vector_1>
   8:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
   c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  10:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  14:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  18:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  1c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  20:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  24:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  28:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  2c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  30:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  34:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  38:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  3c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  40:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  44:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  48:	0c 94 17 03 	jmp	0x62e	; 0x62e <__vector_18>
  4c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  50:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  54:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  58:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  5c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  60:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  64:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  68:	76 03       	mulsu	r23, r22
  6a:	8f 03       	fmulsu	r16, r23
  6c:	a8 03       	fmulsu	r18, r16
  6e:	c1 03       	fmuls	r20, r17
  70:	da 03       	fmulsu	r21, r18
  72:	f3 03       	fmuls	r23, r19
  74:	0c 04       	cpc	r0, r12
  76:	25 04       	cpc	r2, r5
  78:	2f 04       	cpc	r2, r15
  7a:	2f 04       	cpc	r2, r15
  7c:	2f 04       	cpc	r2, r15
  7e:	2f 04       	cpc	r2, r15
  80:	2f 04       	cpc	r2, r15
  82:	2f 04       	cpc	r2, r15
  84:	2f 04       	cpc	r2, r15
  86:	38 03       	fmul	r19, r16
  88:	2f 04       	cpc	r2, r15
  8a:	2f 04       	cpc	r2, r15
  8c:	2f 04       	cpc	r2, r15
  8e:	2f 04       	cpc	r2, r15
  90:	2f 04       	cpc	r2, r15
  92:	2f 04       	cpc	r2, r15
  94:	2f 04       	cpc	r2, r15
  96:	2f 04       	cpc	r2, r15
  98:	2f 04       	cpc	r2, r15
  9a:	2f 04       	cpc	r2, r15
  9c:	2f 04       	cpc	r2, r15
  9e:	2f 04       	cpc	r2, r15
  a0:	2f 04       	cpc	r2, r15
  a2:	2f 04       	cpc	r2, r15
  a4:	2f 04       	cpc	r2, r15
  a6:	3d 03       	fmul	r19, r21
  a8:	2f 04       	cpc	r2, r15
  aa:	2f 04       	cpc	r2, r15
  ac:	2f 04       	cpc	r2, r15
  ae:	2f 04       	cpc	r2, r15
  b0:	2f 04       	cpc	r2, r15
  b2:	2f 04       	cpc	r2, r15
  b4:	2f 04       	cpc	r2, r15
  b6:	2f 04       	cpc	r2, r15
  b8:	2f 04       	cpc	r2, r15
  ba:	2f 04       	cpc	r2, r15
  bc:	2f 04       	cpc	r2, r15
  be:	2f 04       	cpc	r2, r15
  c0:	2f 04       	cpc	r2, r15
  c2:	2f 04       	cpc	r2, r15
  c4:	2f 04       	cpc	r2, r15
  c6:	50 03       	mulsu	r21, r16

000000c8 <__ctors_end>:
  c8:	11 24       	eor	r1, r1
  ca:	1f be       	out	0x3f, r1	; 63
  cc:	cf ef       	ldi	r28, 0xFF	; 255
  ce:	d8 e0       	ldi	r29, 0x08	; 8
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
  d4:	11 e0       	ldi	r17, 0x01	; 1
  d6:	a0 e0       	ldi	r26, 0x00	; 0
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	e6 e9       	ldi	r30, 0x96	; 150
  dc:	f8 e0       	ldi	r31, 0x08	; 8
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
  e0:	05 90       	lpm	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	a2 30       	cpi	r26, 0x02	; 2
  e6:	b1 07       	cpc	r27, r17
  e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	a2 e0       	ldi	r26, 0x02	; 2
  ee:	b1 e0       	ldi	r27, 0x01	; 1
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
  f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
  f4:	a9 31       	cpi	r26, 0x19	; 25
  f6:	b2 07       	cpc	r27, r18
  f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
  fa:	0e 94 b7 02 	call	0x56e	; 0x56e <main>
  fe:	0c 94 49 04 	jmp	0x892	; 0x892 <_exit>

00000102 <__bad_interrupt>:
 102:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000106 <GPIO_init>:
	while(wordsize != counter)
	{
		USART_Transmit(string[counter]);
		counter++;
	}
}
 106:	52 98       	cbi	0x0a, 2	; 10
 108:	20 9a       	sbi	0x04, 0	; 4
 10a:	08 95       	ret

0000010c <INTERRUPT_init>:
 10c:	e8 9a       	sbi	0x1d, 0	; 29
 10e:	e9 e6       	ldi	r30, 0x69	; 105
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	8c 7f       	andi	r24, 0xFC	; 252
 116:	80 83       	st	Z, r24
 118:	78 94       	sei
 11a:	08 95       	ret

0000011c <SPI_masterInit>:
 11c:	22 9a       	sbi	0x04, 2	; 4
 11e:	23 9a       	sbi	0x04, 3	; 4
 120:	25 9a       	sbi	0x04, 5	; 4
 122:	2a 9a       	sbi	0x05, 2	; 5
 124:	2b 98       	cbi	0x05, 3	; 5
 126:	2d 98       	cbi	0x05, 5	; 5
 128:	8c b5       	in	r24, 0x2c	; 44
 12a:	80 65       	ori	r24, 0x50	; 80
 12c:	8c bd       	out	0x2c, r24	; 44
 12e:	8c b5       	in	r24, 0x2c	; 44
 130:	83 60       	ori	r24, 0x03	; 3
 132:	8c bd       	out	0x2c, r24	; 44
 134:	08 95       	ret

00000136 <SPI_txrx>:
 136:	8e bd       	out	0x2e, r24	; 46
 138:	0d b4       	in	r0, 0x2d	; 45
 13a:	07 fe       	sbrs	r0, 7
 13c:	fd cf       	rjmp	.-6      	; 0x138 <SPI_txrx+0x2>
 13e:	87 ec       	ldi	r24, 0xC7	; 199
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <SPI_txrx+0xc>
 146:	00 c0       	rjmp	.+0      	; 0x148 <SPI_txrx+0x12>
 148:	00 00       	nop
 14a:	8e b5       	in	r24, 0x2e	; 46
 14c:	08 95       	ret

0000014e <mcp2515_write_register>:
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	d8 2f       	mov	r29, r24
 154:	c6 2f       	mov	r28, r22
 156:	2a 98       	cbi	0x05, 2	; 5
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 15e:	8d 2f       	mov	r24, r29
 160:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 164:	8c 2f       	mov	r24, r28
 166:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 16a:	2a 9a       	sbi	0x05, 2	; 5
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <mcp2515_read_register>:
 172:	cf 93       	push	r28
 174:	c8 2f       	mov	r28, r24
 176:	2a 98       	cbi	0x05, 2	; 5
 178:	83 e0       	ldi	r24, 0x03	; 3
 17a:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 17e:	8c 2f       	mov	r24, r28
 180:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 18a:	2a 9a       	sbi	0x05, 2	; 5
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <mcp2515_bit_modify>:
 190:	1f 93       	push	r17
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	18 2f       	mov	r17, r24
 198:	d6 2f       	mov	r29, r22
 19a:	c4 2f       	mov	r28, r20
 19c:	2a 98       	cbi	0x05, 2	; 5
 19e:	85 e0       	ldi	r24, 0x05	; 5
 1a0:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 1a4:	81 2f       	mov	r24, r17
 1a6:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 1aa:	8d 2f       	mov	r24, r29
 1ac:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 1b0:	8c 2f       	mov	r24, r28
 1b2:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 1b6:	2a 9a       	sbi	0x05, 2	; 5
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	08 95       	ret

000001c0 <mcp2515_read_status>:
 1c0:	2a 98       	cbi	0x05, 2	; 5
 1c2:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 1cc:	2a 9a       	sbi	0x05, 2	; 5
 1ce:	08 95       	ret

000001d0 <mcp2515_init>:
 1d0:	cf 93       	push	r28
 1d2:	c8 2f       	mov	r28, r24
 1d4:	2a 98       	cbi	0x05, 2	; 5
 1d6:	80 ec       	ldi	r24, 0xC0	; 192
 1d8:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 1dc:	2a 9a       	sbi	0x05, 2	; 5
 1de:	8a e6       	ldi	r24, 0x6A	; 106
 1e0:	8a 95       	dec	r24
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <mcp2515_init+0x10>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <mcp2515_init+0x16>
 1e6:	2a 98       	cbi	0x05, 2	; 5
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 1ee:	88 e2       	ldi	r24, 0x28	; 40
 1f0:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 1fa:	80 e9       	ldi	r24, 0x90	; 144
 1fc:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 200:	8c 2f       	mov	r24, r28
 202:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 206:	83 e0       	ldi	r24, 0x03	; 3
 208:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 20c:	2a 9a       	sbi	0x05, 2	; 5
 20e:	8a e2       	ldi	r24, 0x2A	; 42
 210:	0e 94 b9 00 	call	0x172	; 0x172 <mcp2515_read_register>
 214:	8c 17       	cp	r24, r28
 216:	19 f0       	breq	.+6      	; 0x21e <mcp2515_init+0x4e>
 218:	28 9a       	sbi	0x05, 0	; 5
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	16 c0       	rjmp	.+44     	; 0x24a <mcp2515_init+0x7a>
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	8c e0       	ldi	r24, 0x0C	; 12
 222:	0e 94 a7 00 	call	0x14e	; 0x14e <mcp2515_write_register>
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	8d e0       	ldi	r24, 0x0D	; 13
 22a:	0e 94 a7 00 	call	0x14e	; 0x14e <mcp2515_write_register>
 22e:	60 e6       	ldi	r22, 0x60	; 96
 230:	80 e6       	ldi	r24, 0x60	; 96
 232:	0e 94 a7 00 	call	0x14e	; 0x14e <mcp2515_write_register>
 236:	60 e6       	ldi	r22, 0x60	; 96
 238:	80 e7       	ldi	r24, 0x70	; 112
 23a:	0e 94 a7 00 	call	0x14e	; 0x14e <mcp2515_write_register>
 23e:	60 e0       	ldi	r22, 0x00	; 0
 240:	8f e0       	ldi	r24, 0x0F	; 15
 242:	0e 94 a7 00 	call	0x14e	; 0x14e <mcp2515_write_register>
 246:	28 98       	cbi	0x05, 0	; 5
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <mcp2515_get_message>:
 24e:	cf 92       	push	r12
 250:	df 92       	push	r13
 252:	ef 92       	push	r14
 254:	ff 92       	push	r15
 256:	0f 93       	push	r16
 258:	1f 93       	push	r17
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	1f 92       	push	r1
 260:	cd b7       	in	r28, 0x3d	; 61
 262:	de b7       	in	r29, 0x3e	; 62
 264:	6c 01       	movw	r12, r24
 266:	80 eb       	ldi	r24, 0xB0	; 176
 268:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <mcp2515_read_status>
 26c:	89 83       	std	Y+1, r24	; 0x01
 26e:	99 81       	ldd	r25, Y+1	; 0x01
 270:	89 2f       	mov	r24, r25
 272:	80 74       	andi	r24, 0x40	; 64
 274:	96 fd       	sbrc	r25, 6
 276:	06 c0       	rjmp	.+12     	; 0x284 <mcp2515_get_message+0x36>
 278:	99 81       	ldd	r25, Y+1	; 0x01
 27a:	99 23       	and	r25, r25
 27c:	0c f0       	brlt	.+2      	; 0x280 <mcp2515_get_message+0x32>
 27e:	5e c0       	rjmp	.+188    	; 0x33c <mcp2515_get_message+0xee>
 280:	84 e9       	ldi	r24, 0x94	; 148
 282:	01 c0       	rjmp	.+2      	; 0x286 <mcp2515_get_message+0x38>
 284:	80 e9       	ldi	r24, 0x90	; 144
 286:	2a 98       	cbi	0x05, 2	; 5
 288:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 28c:	8f ef       	ldi	r24, 0xFF	; 255
 28e:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 292:	28 e0       	ldi	r18, 0x08	; 8
 294:	82 9f       	mul	r24, r18
 296:	c0 01       	movw	r24, r0
 298:	11 24       	eor	r1, r1
 29a:	f6 01       	movw	r30, r12
 29c:	91 83       	std	Z+1, r25	; 0x01
 29e:	80 83       	st	Z, r24
 2a0:	8f ef       	ldi	r24, 0xFF	; 255
 2a2:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 2a6:	28 2f       	mov	r18, r24
 2a8:	22 95       	swap	r18
 2aa:	26 95       	lsr	r18
 2ac:	27 70       	andi	r18, 0x07	; 7
 2ae:	f6 01       	movw	r30, r12
 2b0:	80 81       	ld	r24, Z
 2b2:	91 81       	ldd	r25, Z+1	; 0x01
 2b4:	82 2b       	or	r24, r18
 2b6:	91 83       	std	Z+1, r25	; 0x01
 2b8:	80 83       	st	Z, r24
 2ba:	8f ef       	ldi	r24, 0xFF	; 255
 2bc:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
 2c2:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 2c6:	8f ef       	ldi	r24, 0xFF	; 255
 2c8:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 2cc:	98 2f       	mov	r25, r24
 2ce:	9f 70       	andi	r25, 0x0F	; 15
 2d0:	29 2f       	mov	r18, r25
 2d2:	22 0f       	add	r18, r18
 2d4:	f6 01       	movw	r30, r12
 2d6:	82 81       	ldd	r24, Z+2	; 0x02
 2d8:	81 7e       	andi	r24, 0xE1	; 225
 2da:	82 2b       	or	r24, r18
 2dc:	82 83       	std	Z+2, r24	; 0x02
 2de:	29 81       	ldd	r18, Y+1	; 0x01
 2e0:	23 fb       	bst	r18, 3
 2e2:	22 27       	eor	r18, r18
 2e4:	20 f9       	bld	r18, 0
 2e6:	20 fb       	bst	r18, 0
 2e8:	80 f9       	bld	r24, 0
 2ea:	82 83       	std	Z+2, r24	; 0x02
 2ec:	99 23       	and	r25, r25
 2ee:	a1 f0       	breq	.+40     	; 0x318 <mcp2515_get_message+0xca>
 2f0:	86 01       	movw	r16, r12
 2f2:	0d 5f       	subi	r16, 0xFD	; 253
 2f4:	1f 4f       	sbci	r17, 0xFF	; 255
 2f6:	91 50       	subi	r25, 0x01	; 1
 2f8:	e9 2e       	mov	r14, r25
 2fa:	f1 2c       	mov	r15, r1
 2fc:	f4 e0       	ldi	r31, 0x04	; 4
 2fe:	ef 0e       	add	r14, r31
 300:	f1 1c       	adc	r15, r1
 302:	ec 0c       	add	r14, r12
 304:	fd 1c       	adc	r15, r13
 306:	8f ef       	ldi	r24, 0xFF	; 255
 308:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 30c:	f8 01       	movw	r30, r16
 30e:	81 93       	st	Z+, r24
 310:	8f 01       	movw	r16, r30
 312:	ee 15       	cp	r30, r14
 314:	ff 05       	cpc	r31, r15
 316:	b9 f7       	brne	.-18     	; 0x306 <mcp2515_get_message+0xb8>
 318:	2a 9a       	sbi	0x05, 2	; 5
 31a:	89 81       	ldd	r24, Y+1	; 0x01
 31c:	86 ff       	sbrs	r24, 6
 31e:	06 c0       	rjmp	.+12     	; 0x32c <mcp2515_get_message+0xde>
 320:	40 e0       	ldi	r20, 0x00	; 0
 322:	61 e0       	ldi	r22, 0x01	; 1
 324:	8c e2       	ldi	r24, 0x2C	; 44
 326:	0e 94 c8 00 	call	0x190	; 0x190 <mcp2515_bit_modify>
 32a:	05 c0       	rjmp	.+10     	; 0x336 <mcp2515_get_message+0xe8>
 32c:	40 e0       	ldi	r20, 0x00	; 0
 32e:	62 e0       	ldi	r22, 0x02	; 2
 330:	8c e2       	ldi	r24, 0x2C	; 44
 332:	0e 94 c8 00 	call	0x190	; 0x190 <mcp2515_bit_modify>
 336:	89 81       	ldd	r24, Y+1	; 0x01
 338:	87 70       	andi	r24, 0x07	; 7
 33a:	8f 5f       	subi	r24, 0xFF	; 255
 33c:	0f 90       	pop	r0
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	1f 91       	pop	r17
 344:	0f 91       	pop	r16
 346:	ff 90       	pop	r15
 348:	ef 90       	pop	r14
 34a:	df 90       	pop	r13
 34c:	cf 90       	pop	r12
 34e:	08 95       	ret

00000350 <mcp2515_send_message>:
 350:	bf 92       	push	r11
 352:	cf 92       	push	r12
 354:	df 92       	push	r13
 356:	ef 92       	push	r14
 358:	ff 92       	push	r15
 35a:	0f 93       	push	r16
 35c:	1f 93       	push	r17
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	1f 92       	push	r1
 364:	cd b7       	in	r28, 0x3d	; 61
 366:	de b7       	in	r29, 0x3e	; 62
 368:	6c 01       	movw	r12, r24
 36a:	80 ea       	ldi	r24, 0xA0	; 160
 36c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <mcp2515_read_status>
 370:	89 83       	std	Y+1, r24	; 0x01
 372:	89 81       	ldd	r24, Y+1	; 0x01
 374:	82 ff       	sbrs	r24, 2
 376:	0a c0       	rjmp	.+20     	; 0x38c <mcp2515_send_message+0x3c>
 378:	89 81       	ldd	r24, Y+1	; 0x01
 37a:	84 ff       	sbrs	r24, 4
 37c:	09 c0       	rjmp	.+18     	; 0x390 <mcp2515_send_message+0x40>
 37e:	89 81       	ldd	r24, Y+1	; 0x01
 380:	86 fd       	sbrc	r24, 6
 382:	69 c0       	rjmp	.+210    	; 0x456 <__FUSE_REGION_LENGTH__+0x56>
 384:	68 94       	set
 386:	bb 24       	eor	r11, r11
 388:	b2 f8       	bld	r11, 2
 38a:	05 c0       	rjmp	.+10     	; 0x396 <mcp2515_send_message+0x46>
 38c:	b1 2c       	mov	r11, r1
 38e:	03 c0       	rjmp	.+6      	; 0x396 <mcp2515_send_message+0x46>
 390:	68 94       	set
 392:	bb 24       	eor	r11, r11
 394:	b1 f8       	bld	r11, 1
 396:	2a 98       	cbi	0x05, 2	; 5
 398:	8b 2d       	mov	r24, r11
 39a:	80 64       	ori	r24, 0x40	; 64
 39c:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 3a0:	d6 01       	movw	r26, r12
 3a2:	8d 91       	ld	r24, X+
 3a4:	9c 91       	ld	r25, X
 3a6:	96 95       	lsr	r25
 3a8:	87 95       	ror	r24
 3aa:	96 95       	lsr	r25
 3ac:	87 95       	ror	r24
 3ae:	96 95       	lsr	r25
 3b0:	87 95       	ror	r24
 3b2:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 3b6:	f6 01       	movw	r30, r12
 3b8:	80 81       	ld	r24, Z
 3ba:	82 95       	swap	r24
 3bc:	88 0f       	add	r24, r24
 3be:	80 7e       	andi	r24, 0xE0	; 224
 3c0:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 3d0:	d6 01       	movw	r26, r12
 3d2:	12 96       	adiw	r26, 0x02	; 2
 3d4:	8c 91       	ld	r24, X
 3d6:	e8 2e       	mov	r14, r24
 3d8:	e6 94       	lsr	r14
 3da:	be 2d       	mov	r27, r14
 3dc:	bf 70       	andi	r27, 0x0F	; 15
 3de:	eb 2e       	mov	r14, r27
 3e0:	80 ff       	sbrs	r24, 0
 3e2:	05 c0       	rjmp	.+10     	; 0x3ee <mcp2515_send_message+0x9e>
 3e4:	8b 2f       	mov	r24, r27
 3e6:	80 64       	ori	r24, 0x40	; 64
 3e8:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 3ec:	17 c0       	rjmp	.+46     	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
 3ee:	8b 2f       	mov	r24, r27
 3f0:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 3f4:	ee 20       	and	r14, r14
 3f6:	91 f0       	breq	.+36     	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
 3f8:	86 01       	movw	r16, r12
 3fa:	0d 5f       	subi	r16, 0xFD	; 253
 3fc:	1f 4f       	sbci	r17, 0xFF	; 255
 3fe:	ea 94       	dec	r14
 400:	f1 2c       	mov	r15, r1
 402:	e4 e0       	ldi	r30, 0x04	; 4
 404:	ee 0e       	add	r14, r30
 406:	f1 1c       	adc	r15, r1
 408:	ec 0c       	add	r14, r12
 40a:	fd 1c       	adc	r15, r13
 40c:	d8 01       	movw	r26, r16
 40e:	8d 91       	ld	r24, X+
 410:	8d 01       	movw	r16, r26
 412:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 416:	0e 15       	cp	r16, r14
 418:	1f 05       	cpc	r17, r15
 41a:	c1 f7       	brne	.-16     	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
 41c:	2a 9a       	sbi	0x05, 2	; 5
 41e:	b5 e0       	ldi	r27, 0x05	; 5
 420:	ba 95       	dec	r27
 422:	f1 f7       	brne	.-4      	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
 424:	00 00       	nop
 426:	2a 98       	cbi	0x05, 2	; 5
 428:	b1 10       	cpse	r11, r1
 42a:	02 c0       	rjmp	.+4      	; 0x430 <__FUSE_REGION_LENGTH__+0x30>
 42c:	bb 24       	eor	r11, r11
 42e:	b3 94       	inc	r11
 430:	8b 2d       	mov	r24, r11
 432:	80 68       	ori	r24, 0x80	; 128
 434:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 438:	2a 9a       	sbi	0x05, 2	; 5
 43a:	f6 01       	movw	r30, r12
 43c:	11 82       	std	Z+1, r1	; 0x01
 43e:	10 82       	st	Z, r1
 440:	82 81       	ldd	r24, Z+2	; 0x02
 442:	80 7e       	andi	r24, 0xE0	; 224
 444:	82 83       	std	Z+2, r24	; 0x02
 446:	33 96       	adiw	r30, 0x03	; 3
 448:	88 e0       	ldi	r24, 0x08	; 8
 44a:	df 01       	movw	r26, r30
 44c:	1d 92       	st	X+, r1
 44e:	8a 95       	dec	r24
 450:	e9 f7       	brne	.-6      	; 0x44c <__FUSE_REGION_LENGTH__+0x4c>
 452:	8b 2d       	mov	r24, r11
 454:	01 c0       	rjmp	.+2      	; 0x458 <__FUSE_REGION_LENGTH__+0x58>
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	0f 90       	pop	r0
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	1f 91       	pop	r17
 460:	0f 91       	pop	r16
 462:	ff 90       	pop	r15
 464:	ef 90       	pop	r14
 466:	df 90       	pop	r13
 468:	cf 90       	pop	r12
 46a:	bf 90       	pop	r11
 46c:	08 95       	ret

0000046e <USART_Init>:
 46e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 472:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 476:	e1 ec       	ldi	r30, 0xC1	; 193
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	80 81       	ld	r24, Z
 47c:	88 69       	ori	r24, 0x98	; 152
 47e:	80 83       	st	Z, r24
 480:	e2 ec       	ldi	r30, 0xC2	; 194
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	80 81       	ld	r24, Z
 486:	86 60       	ori	r24, 0x06	; 6
 488:	80 83       	st	Z, r24
 48a:	08 95       	ret

0000048c <USART_Receive>:
 48c:	e0 ec       	ldi	r30, 0xC0	; 192
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	80 81       	ld	r24, Z
 492:	88 23       	and	r24, r24
 494:	ec f7       	brge	.-6      	; 0x490 <USART_Receive+0x4>
 496:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 49a:	08 95       	ret

0000049c <USART_Transmit>:
 49c:	e0 ec       	ldi	r30, 0xC0	; 192
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	90 81       	ld	r25, Z
 4a2:	95 ff       	sbrs	r25, 5
 4a4:	fd cf       	rjmp	.-6      	; 0x4a0 <USART_Transmit+0x4>
 4a6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 4aa:	08 95       	ret

000004ac <USART_CAN_TX>:
/******************************************************************************
	USART CAN FRAME transmit|
		transmits a full CAN frame struct(tCAN) over UART
******************************************************************************/
void USART_CAN_TX(tCAN data)
{
 4ac:	cf 92       	push	r12
 4ae:	df 92       	push	r13
 4b0:	ef 92       	push	r14
 4b2:	ff 92       	push	r15
 4b4:	0f 93       	push	r16
 4b6:	1f 93       	push	r17
 4b8:	cf 93       	push	r28
 4ba:	df 93       	push	r29
 4bc:	cd b7       	in	r28, 0x3d	; 61
 4be:	de b7       	in	r29, 0x3e	; 62
 4c0:	2b 97       	sbiw	r28, 0x0b	; 11
 4c2:	0f b6       	in	r0, 0x3f	; 63
 4c4:	f8 94       	cli
 4c6:	de bf       	out	0x3e, r29	; 62
 4c8:	0f be       	out	0x3f, r0	; 63
 4ca:	cd bf       	out	0x3d, r28	; 61
 4cc:	e9 82       	std	Y+1, r14	; 0x01
 4ce:	fa 82       	std	Y+2, r15	; 0x02
 4d0:	0b 83       	std	Y+3, r16	; 0x03
 4d2:	1c 83       	std	Y+4, r17	; 0x04
 4d4:	2d 83       	std	Y+5, r18	; 0x05
 4d6:	3e 83       	std	Y+6, r19	; 0x06
 4d8:	4f 83       	std	Y+7, r20	; 0x07
 4da:	58 87       	std	Y+8, r21	; 0x08
 4dc:	69 87       	std	Y+9, r22	; 0x09
 4de:	7a 87       	std	Y+10, r23	; 0x0a
 4e0:	8b 87       	std	Y+11, r24	; 0x0b
 4e2:	c9 80       	ldd	r12, Y+1	; 0x01
 4e4:	da 80       	ldd	r13, Y+2	; 0x02
 4e6:	06 95       	lsr	r16
 4e8:	0f 70       	andi	r16, 0x0F	; 15
	USART_Transmit(start_byte); //start_byte
 4ea:	8e ee       	ldi	r24, 0xEE	; 238
 4ec:	0e 94 4e 02 	call	0x49c	; 0x49c <USART_Transmit>
	USART_Transmit(data.id >> 3); //CanID_High
 4f0:	c6 01       	movw	r24, r12
 4f2:	96 95       	lsr	r25
 4f4:	87 95       	ror	r24
 4f6:	96 95       	lsr	r25
 4f8:	87 95       	ror	r24
 4fa:	96 95       	lsr	r25
 4fc:	87 95       	ror	r24
 4fe:	0e 94 4e 02 	call	0x49c	; 0x49c <USART_Transmit>
	
	USART_Transmit((data.id << 5) | (data.header.rtr <<4) | data.header.length);
 502:	cc 0c       	add	r12, r12
 504:	cc 0c       	add	r12, r12
 506:	cc 0c       	add	r12, r12
 508:	cc 0c       	add	r12, r12
 50a:	cc 0c       	add	r12, r12
 50c:	8b 81       	ldd	r24, Y+3	; 0x03
 50e:	81 70       	andi	r24, 0x01	; 1
 510:	82 95       	swap	r24
 512:	80 7f       	andi	r24, 0xF0	; 240
 514:	8c 29       	or	r24, r12
 516:	80 2b       	or	r24, r16
 518:	0e 94 4e 02 	call	0x49c	; 0x49c <USART_Transmit>
	
	//read back all data received.
	if(!data.header.rtr){
 51c:	8b 81       	ldd	r24, Y+3	; 0x03
 51e:	80 fd       	sbrc	r24, 0
 520:	17 c0       	rjmp	.+46     	; 0x550 <USART_CAN_TX+0xa4>
		for (uint8_t t = 0; t < data.header.length;t++) {
 522:	e0 2e       	mov	r14, r16
 524:	f1 2c       	mov	r15, r1
 526:	1e 14       	cp	r1, r14
 528:	1f 04       	cpc	r1, r15
 52a:	94 f4       	brge	.+36     	; 0x550 <USART_CAN_TX+0xa4>
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	10 e0       	ldi	r17, 0x00	; 0
			USART_Transmit(data.data[t]); //data
 532:	e4 e0       	ldi	r30, 0x04	; 4
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	ec 0f       	add	r30, r28
 538:	fd 1f       	adc	r31, r29
 53a:	e8 0f       	add	r30, r24
 53c:	f9 1f       	adc	r31, r25
 53e:	80 81       	ld	r24, Z
 540:	0e 94 4e 02 	call	0x49c	; 0x49c <USART_Transmit>
	
	USART_Transmit((data.id << 5) | (data.header.rtr <<4) | data.header.length);
	
	//read back all data received.
	if(!data.header.rtr){
		for (uint8_t t = 0; t < data.header.length;t++) {
 544:	1f 5f       	subi	r17, 0xFF	; 255
 546:	81 2f       	mov	r24, r17
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	8e 15       	cp	r24, r14
 54c:	9f 05       	cpc	r25, r15
 54e:	8c f3       	brlt	.-30     	; 0x532 <USART_CAN_TX+0x86>
			USART_Transmit(data.data[t]); //data
		}
	}
 550:	2b 96       	adiw	r28, 0x0b	; 11
 552:	0f b6       	in	r0, 0x3f	; 63
 554:	f8 94       	cli
 556:	de bf       	out	0x3e, r29	; 62
 558:	0f be       	out	0x3f, r0	; 63
 55a:	cd bf       	out	0x3d, r28	; 61
 55c:	df 91       	pop	r29
 55e:	cf 91       	pop	r28
 560:	1f 91       	pop	r17
 562:	0f 91       	pop	r16
 564:	ff 90       	pop	r15
 566:	ef 90       	pop	r14
 568:	df 90       	pop	r13
 56a:	cf 90       	pop	r12
 56c:	08 95       	ret

0000056e <main>:
	start of main()|
******************************************************************************/
int main(void)
{
	//initialization functions
	GPIO_init();
 56e:	0e 94 83 00 	call	0x106	; 0x106 <GPIO_init>
	INTERRUPT_init();
 572:	0e 94 86 00 	call	0x10c	; 0x10c <INTERRUPT_init>
	USART_Init(103);//103 sets baud rate at 9600
 576:	87 e6       	ldi	r24, 0x67	; 103
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	0e 94 37 02 	call	0x46e	; 0x46e <USART_Init>
	SPI_masterInit();
 57e:	0e 94 8e 00 	call	0x11c	; 0x11c <SPI_masterInit>
	
	
	//MCP2515 initialization
	if(mcp2515_init(CANSPEED_500))
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <mcp2515_init>
 588:	88 23       	and	r24, r24
 58a:	21 f0       	breq	.+8      	; 0x594 <main+0x26>
	{
		USART_Transmit(0xFF);
 58c:	8f ef       	ldi	r24, 0xFF	; 255
 58e:	0e 94 4e 02 	call	0x49c	; 0x49c <USART_Transmit>
 592:	03 c0       	rjmp	.+6      	; 0x59a <main+0x2c>
	}else
	{
		USART_Transmit(0x00);
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	0e 94 4e 02 	call	0x49c	; 0x49c <USART_Transmit>
	while (1)
	{
		//if rx_flag is set, that means there's a received message stored in
		//spi_char, so ATOMIC_BLOCK disabled interrupts, then transmits it
		//over uart.
		if(rx_flag){
 59a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 59e:	88 23       	and	r24, r24
 5a0:	e1 f3       	breq	.-8      	; 0x59a <main+0x2c>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 5a2:	f8 94       	cli
				ATOMIC_BLOCK(ATOMIC_FORCEON){
				USART_CAN_TX(CANRX_buffer);
 5a4:	e0 90 03 01 	lds	r14, 0x0103	; 0x800103 <CANRX_buffer>
 5a8:	f0 90 04 01 	lds	r15, 0x0104	; 0x800104 <CANRX_buffer+0x1>
 5ac:	00 91 05 01 	lds	r16, 0x0105	; 0x800105 <CANRX_buffer+0x2>
 5b0:	10 91 06 01 	lds	r17, 0x0106	; 0x800106 <CANRX_buffer+0x3>
 5b4:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <CANRX_buffer+0x4>
 5b8:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <CANRX_buffer+0x5>
 5bc:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <CANRX_buffer+0x6>
 5c0:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <CANRX_buffer+0x7>
 5c4:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <CANRX_buffer+0x8>
 5c8:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <CANRX_buffer+0x9>
 5cc:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <CANRX_buffer+0xa>
 5d0:	0e 94 56 02 	call	0x4ac	; 0x4ac <USART_CAN_TX>
				rx_flag = 0;
 5d4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 5d8:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
 5da:	df cf       	rjmp	.-66     	; 0x59a <main+0x2c>

000005dc <__vector_1>:

/******************************************************************************
	RECEIVE interrupt on pin PD2|
******************************************************************************/
ISR(INT0_vect)
{
 5dc:	1f 92       	push	r1
 5de:	0f 92       	push	r0
 5e0:	0f b6       	in	r0, 0x3f	; 63
 5e2:	0f 92       	push	r0
 5e4:	11 24       	eor	r1, r1
 5e6:	2f 93       	push	r18
 5e8:	3f 93       	push	r19
 5ea:	4f 93       	push	r20
 5ec:	5f 93       	push	r21
 5ee:	6f 93       	push	r22
 5f0:	7f 93       	push	r23
 5f2:	8f 93       	push	r24
 5f4:	9f 93       	push	r25
 5f6:	af 93       	push	r26
 5f8:	bf 93       	push	r27
 5fa:	ef 93       	push	r30
 5fc:	ff 93       	push	r31
	mcp2515_get_message(&CANRX_buffer);//get canbus message
 5fe:	83 e0       	ldi	r24, 0x03	; 3
 600:	91 e0       	ldi	r25, 0x01	; 1
 602:	0e 94 27 01 	call	0x24e	; 0x24e <mcp2515_get_message>
	rx_flag = 1;  //set flag
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
}
 60c:	ff 91       	pop	r31
 60e:	ef 91       	pop	r30
 610:	bf 91       	pop	r27
 612:	af 91       	pop	r26
 614:	9f 91       	pop	r25
 616:	8f 91       	pop	r24
 618:	7f 91       	pop	r23
 61a:	6f 91       	pop	r22
 61c:	5f 91       	pop	r21
 61e:	4f 91       	pop	r20
 620:	3f 91       	pop	r19
 622:	2f 91       	pop	r18
 624:	0f 90       	pop	r0
 626:	0f be       	out	0x3f, r0	; 63
 628:	0f 90       	pop	r0
 62a:	1f 90       	pop	r1
 62c:	18 95       	reti

0000062e <__vector_18>:

ISR(USART_RX_vect)
{	
 62e:	1f 92       	push	r1
 630:	0f 92       	push	r0
 632:	0f b6       	in	r0, 0x3f	; 63
 634:	0f 92       	push	r0
 636:	11 24       	eor	r1, r1
 638:	2f 93       	push	r18
 63a:	3f 93       	push	r19
 63c:	4f 93       	push	r20
 63e:	5f 93       	push	r21
 640:	6f 93       	push	r22
 642:	7f 93       	push	r23
 644:	8f 93       	push	r24
 646:	9f 93       	push	r25
 648:	af 93       	push	r26
 64a:	bf 93       	push	r27
 64c:	ef 93       	push	r30
 64e:	ff 93       	push	r31
	uint8_t receive_buff = USART_Receive();
 650:	0e 94 46 02 	call	0x48c	; 0x48c <USART_Receive>
	
	//select which adc to sample from
	switch(Rx_frame_state){
 654:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <Rx_frame_state>
 658:	4e 2f       	mov	r20, r30
 65a:	50 e0       	ldi	r21, 0x00	; 0
 65c:	fa 01       	movw	r30, r20
 65e:	31 97       	sbiw	r30, 0x01	; 1
 660:	e0 33       	cpi	r30, 0x30	; 48
 662:	f1 05       	cpc	r31, r1
 664:	08 f0       	brcs	.+2      	; 0x668 <__vector_18+0x3a>
 666:	fb c0       	rjmp	.+502    	; 0x85e <__vector_18+0x230>
 668:	ec 5c       	subi	r30, 0xCC	; 204
 66a:	ff 4f       	sbci	r31, 0xFF	; 255
 66c:	0c 94 43 04 	jmp	0x886	; 0x886 <__tablejump2__>
		case s_RxStart : //start byte
		if (receive_buff == start_byte){
 670:	8e 3e       	cpi	r24, 0xEE	; 238
 672:	19 f4       	brne	.+6      	; 0x67a <__vector_18+0x4c>
			Rx_frame_state = s_RxIDH;
 674:	90 e2       	ldi	r25, 0x20	; 32
 676:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <Rx_frame_state>
		}
		case s_RxIDH : //frameID High
		CANTX_buffer.id |= (receive_buff <<3);
 67a:	ee e0       	ldi	r30, 0x0E	; 14
 67c:	f1 e0       	ldi	r31, 0x01	; 1
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	88 0f       	add	r24, r24
 682:	99 1f       	adc	r25, r25
 684:	88 0f       	add	r24, r24
 686:	99 1f       	adc	r25, r25
 688:	88 0f       	add	r24, r24
 68a:	99 1f       	adc	r25, r25
 68c:	20 81       	ld	r18, Z
 68e:	31 81       	ldd	r19, Z+1	; 0x01
 690:	82 2b       	or	r24, r18
 692:	93 2b       	or	r25, r19
 694:	91 83       	std	Z+1, r25	; 0x01
 696:	80 83       	st	Z, r24
		Rx_frame_state = s_RxIDL;
 698:	80 e3       	ldi	r24, 0x30	; 48
 69a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
		break;
 69e:	e2 c0       	rjmp	.+452    	; 0x864 <__vector_18+0x236>
		case s_RxIDL : //frameID Low, rtr, & length = 0bXXXYZZZZ
		CANTX_buffer.id |= (receive_buff >>5);
 6a0:	ee e0       	ldi	r30, 0x0E	; 14
 6a2:	f1 e0       	ldi	r31, 0x01	; 1
 6a4:	98 2f       	mov	r25, r24
 6a6:	92 95       	swap	r25
 6a8:	96 95       	lsr	r25
 6aa:	97 70       	andi	r25, 0x07	; 7
 6ac:	20 81       	ld	r18, Z
 6ae:	31 81       	ldd	r19, Z+1	; 0x01
 6b0:	29 2b       	or	r18, r25
 6b2:	31 83       	std	Z+1, r19	; 0x01
 6b4:	20 83       	st	Z, r18
		CANTX_buffer.header.rtr =  ((receive_buff >>4) & 0x01);
 6b6:	28 2f       	mov	r18, r24
 6b8:	22 95       	swap	r18
 6ba:	2f 70       	andi	r18, 0x0F	; 15
 6bc:	e0 e1       	ldi	r30, 0x10	; 16
 6be:	f1 e0       	ldi	r31, 0x01	; 1
 6c0:	90 81       	ld	r25, Z
 6c2:	20 fb       	bst	r18, 0
 6c4:	90 f9       	bld	r25, 0
		CANTX_buffer.header.length = (receive_buff & 0x0F);
 6c6:	8f 70       	andi	r24, 0x0F	; 15
 6c8:	88 0f       	add	r24, r24
 6ca:	91 7e       	andi	r25, 0xE1	; 225
 6cc:	89 2b       	or	r24, r25
 6ce:	80 83       	st	Z, r24
		if(CANTX_buffer.header.rtr){
 6d0:	80 ff       	sbrs	r24, 0
 6d2:	08 c0       	rjmp	.+16     	; 0x6e4 <__vector_18+0xb6>
			mcp2515_send_message(&CANTX_buffer);
 6d4:	8e e0       	ldi	r24, 0x0E	; 14
 6d6:	91 e0       	ldi	r25, 0x01	; 1
 6d8:	0e 94 a8 01 	call	0x350	; 0x350 <mcp2515_send_message>
			receive_buff = 0;
			Rx_frame_state = s_RxIDH;
 6dc:	80 e2       	ldi	r24, 0x20	; 32
 6de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 6e2:	c0 c0       	rjmp	.+384    	; 0x864 <__vector_18+0x236>
			} else {
			Rx_frame_state = s_Rxdata1;
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 6ea:	bc c0       	rjmp	.+376    	; 0x864 <__vector_18+0x236>
		}
		break;
		case s_Rxdata1 : //data1
		CANTX_buffer.data[0] = receive_buff;
 6ec:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <CANTX_buffer+0x3>
		if(Rx_frame_state < CANTX_buffer.header.length){
 6f0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <CANTX_buffer+0x2>
 6fa:	86 95       	lsr	r24
 6fc:	8f 70       	andi	r24, 0x0F	; 15
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	28 17       	cp	r18, r24
 702:	39 07       	cpc	r19, r25
 704:	24 f4       	brge	.+8      	; 0x70e <__vector_18+0xe0>
			Rx_frame_state = s_Rxdata2;
 706:	82 e0       	ldi	r24, 0x02	; 2
 708:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 70c:	ab c0       	rjmp	.+342    	; 0x864 <__vector_18+0x236>
			}else{
			mcp2515_send_message(&CANTX_buffer);
 70e:	8e e0       	ldi	r24, 0x0E	; 14
 710:	91 e0       	ldi	r25, 0x01	; 1
 712:	0e 94 a8 01 	call	0x350	; 0x350 <mcp2515_send_message>
			receive_buff = 0;
			Rx_frame_state = s_RxIDH;
 716:	80 e2       	ldi	r24, 0x20	; 32
 718:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 71c:	a3 c0       	rjmp	.+326    	; 0x864 <__vector_18+0x236>
		}
		break;
		case s_Rxdata2 ://data2
		CANTX_buffer.data[1] = receive_buff;
 71e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <CANTX_buffer+0x4>
		if(Rx_frame_state < CANTX_buffer.header.length){
 722:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 726:	30 e0       	ldi	r19, 0x00	; 0
 728:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <CANTX_buffer+0x2>
 72c:	86 95       	lsr	r24
 72e:	8f 70       	andi	r24, 0x0F	; 15
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	28 17       	cp	r18, r24
 734:	39 07       	cpc	r19, r25
 736:	24 f4       	brge	.+8      	; 0x740 <__vector_18+0x112>
			Rx_frame_state = s_Rxdata3;
 738:	83 e0       	ldi	r24, 0x03	; 3
 73a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 73e:	92 c0       	rjmp	.+292    	; 0x864 <__vector_18+0x236>
			}else{
			mcp2515_send_message(&CANTX_buffer);
 740:	8e e0       	ldi	r24, 0x0E	; 14
 742:	91 e0       	ldi	r25, 0x01	; 1
 744:	0e 94 a8 01 	call	0x350	; 0x350 <mcp2515_send_message>
			receive_buff = 0;
			Rx_frame_state = s_RxIDH;
 748:	80 e2       	ldi	r24, 0x20	; 32
 74a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 74e:	8a c0       	rjmp	.+276    	; 0x864 <__vector_18+0x236>
		}
		break;
		case s_Rxdata3 ://data3
		CANTX_buffer.data[2] = receive_buff;
 750:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <CANTX_buffer+0x5>
		if(Rx_frame_state < CANTX_buffer.header.length){
 754:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 758:	30 e0       	ldi	r19, 0x00	; 0
 75a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <CANTX_buffer+0x2>
 75e:	86 95       	lsr	r24
 760:	8f 70       	andi	r24, 0x0F	; 15
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	28 17       	cp	r18, r24
 766:	39 07       	cpc	r19, r25
 768:	24 f4       	brge	.+8      	; 0x772 <__vector_18+0x144>
			Rx_frame_state = s_Rxdata4;
 76a:	84 e0       	ldi	r24, 0x04	; 4
 76c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 770:	79 c0       	rjmp	.+242    	; 0x864 <__vector_18+0x236>
			}else{
			mcp2515_send_message(&CANTX_buffer);
 772:	8e e0       	ldi	r24, 0x0E	; 14
 774:	91 e0       	ldi	r25, 0x01	; 1
 776:	0e 94 a8 01 	call	0x350	; 0x350 <mcp2515_send_message>
			receive_buff = 0;
			Rx_frame_state = s_RxIDH;
 77a:	80 e2       	ldi	r24, 0x20	; 32
 77c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 780:	71 c0       	rjmp	.+226    	; 0x864 <__vector_18+0x236>
		}
		break;
		case s_Rxdata4 ://data4
		CANTX_buffer.data[3] = receive_buff;
 782:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <CANTX_buffer+0x6>
		if(Rx_frame_state < CANTX_buffer.header.length){
 786:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 78a:	30 e0       	ldi	r19, 0x00	; 0
 78c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <CANTX_buffer+0x2>
 790:	86 95       	lsr	r24
 792:	8f 70       	andi	r24, 0x0F	; 15
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	28 17       	cp	r18, r24
 798:	39 07       	cpc	r19, r25
 79a:	24 f4       	brge	.+8      	; 0x7a4 <__vector_18+0x176>
			Rx_frame_state = s_Rxdata5;
 79c:	85 e0       	ldi	r24, 0x05	; 5
 79e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 7a2:	60 c0       	rjmp	.+192    	; 0x864 <__vector_18+0x236>
			}else{
			mcp2515_send_message(&CANTX_buffer);
 7a4:	8e e0       	ldi	r24, 0x0E	; 14
 7a6:	91 e0       	ldi	r25, 0x01	; 1
 7a8:	0e 94 a8 01 	call	0x350	; 0x350 <mcp2515_send_message>
			receive_buff = 0;
			Rx_frame_state = s_RxIDH;
 7ac:	80 e2       	ldi	r24, 0x20	; 32
 7ae:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 7b2:	58 c0       	rjmp	.+176    	; 0x864 <__vector_18+0x236>
		}
		break;
		case s_Rxdata5 ://data5
		CANTX_buffer.data[4] = receive_buff;
 7b4:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <CANTX_buffer+0x7>
		if(Rx_frame_state < CANTX_buffer.header.length){
 7b8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 7bc:	30 e0       	ldi	r19, 0x00	; 0
 7be:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <CANTX_buffer+0x2>
 7c2:	86 95       	lsr	r24
 7c4:	8f 70       	andi	r24, 0x0F	; 15
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	28 17       	cp	r18, r24
 7ca:	39 07       	cpc	r19, r25
 7cc:	24 f4       	brge	.+8      	; 0x7d6 <__vector_18+0x1a8>
			Rx_frame_state = s_Rxdata6;
 7ce:	86 e0       	ldi	r24, 0x06	; 6
 7d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 7d4:	47 c0       	rjmp	.+142    	; 0x864 <__vector_18+0x236>
			}else{
			mcp2515_send_message(&CANTX_buffer);
 7d6:	8e e0       	ldi	r24, 0x0E	; 14
 7d8:	91 e0       	ldi	r25, 0x01	; 1
 7da:	0e 94 a8 01 	call	0x350	; 0x350 <mcp2515_send_message>
			receive_buff = 0;
			Rx_frame_state = s_RxIDH;
 7de:	80 e2       	ldi	r24, 0x20	; 32
 7e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 7e4:	3f c0       	rjmp	.+126    	; 0x864 <__vector_18+0x236>
		}
		break;
		case s_Rxdata6 ://data6
		CANTX_buffer.data[5] = receive_buff;
 7e6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <CANTX_buffer+0x8>
		if(Rx_frame_state < CANTX_buffer.header.length){
 7ea:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 7ee:	30 e0       	ldi	r19, 0x00	; 0
 7f0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <CANTX_buffer+0x2>
 7f4:	86 95       	lsr	r24
 7f6:	8f 70       	andi	r24, 0x0F	; 15
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	28 17       	cp	r18, r24
 7fc:	39 07       	cpc	r19, r25
 7fe:	24 f4       	brge	.+8      	; 0x808 <__vector_18+0x1da>
			Rx_frame_state = s_Rxdata7;
 800:	87 e0       	ldi	r24, 0x07	; 7
 802:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 806:	2e c0       	rjmp	.+92     	; 0x864 <__vector_18+0x236>
			}else{
			mcp2515_send_message(&CANTX_buffer);
 808:	8e e0       	ldi	r24, 0x0E	; 14
 80a:	91 e0       	ldi	r25, 0x01	; 1
 80c:	0e 94 a8 01 	call	0x350	; 0x350 <mcp2515_send_message>
			receive_buff = 0;
			Rx_frame_state = s_RxIDH;
 810:	80 e2       	ldi	r24, 0x20	; 32
 812:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 816:	26 c0       	rjmp	.+76     	; 0x864 <__vector_18+0x236>
		}
		break;
		case s_Rxdata7 ://data7
		CANTX_buffer.data[6] = receive_buff;
 818:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <CANTX_buffer+0x9>
		if(Rx_frame_state < CANTX_buffer.header.length){
 81c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 820:	30 e0       	ldi	r19, 0x00	; 0
 822:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <CANTX_buffer+0x2>
 826:	86 95       	lsr	r24
 828:	8f 70       	andi	r24, 0x0F	; 15
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	28 17       	cp	r18, r24
 82e:	39 07       	cpc	r19, r25
 830:	24 f4       	brge	.+8      	; 0x83a <__vector_18+0x20c>
			Rx_frame_state = s_Rxdata8;
 832:	88 e0       	ldi	r24, 0x08	; 8
 834:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 838:	15 c0       	rjmp	.+42     	; 0x864 <__vector_18+0x236>
			}else{
			mcp2515_send_message(&CANTX_buffer);
 83a:	8e e0       	ldi	r24, 0x0E	; 14
 83c:	91 e0       	ldi	r25, 0x01	; 1
 83e:	0e 94 a8 01 	call	0x350	; 0x350 <mcp2515_send_message>
			receive_buff = 0;
			Rx_frame_state = s_RxIDH;
 842:	80 e2       	ldi	r24, 0x20	; 32
 844:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 848:	0d c0       	rjmp	.+26     	; 0x864 <__vector_18+0x236>
		}
		break;
		case s_Rxdata8 ://data8
		CANTX_buffer.data[7] = receive_buff;
 84a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <CANTX_buffer+0xa>
		mcp2515_send_message(&CANTX_buffer);
 84e:	8e e0       	ldi	r24, 0x0E	; 14
 850:	91 e0       	ldi	r25, 0x01	; 1
 852:	0e 94 a8 01 	call	0x350	; 0x350 <mcp2515_send_message>
		receive_buff = 0;
		Rx_frame_state = s_RxIDH;
 856:	80 e2       	ldi	r24, 0x20	; 32
 858:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
		break;
 85c:	03 c0       	rjmp	.+6      	; 0x864 <__vector_18+0x236>
		default : Rx_frame_state = s_RxIDH;
 85e:	80 e2       	ldi	r24, 0x20	; 32
 860:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
		break;
	}
 864:	ff 91       	pop	r31
 866:	ef 91       	pop	r30
 868:	bf 91       	pop	r27
 86a:	af 91       	pop	r26
 86c:	9f 91       	pop	r25
 86e:	8f 91       	pop	r24
 870:	7f 91       	pop	r23
 872:	6f 91       	pop	r22
 874:	5f 91       	pop	r21
 876:	4f 91       	pop	r20
 878:	3f 91       	pop	r19
 87a:	2f 91       	pop	r18
 87c:	0f 90       	pop	r0
 87e:	0f be       	out	0x3f, r0	; 63
 880:	0f 90       	pop	r0
 882:	1f 90       	pop	r1
 884:	18 95       	reti

00000886 <__tablejump2__>:
 886:	ee 0f       	add	r30, r30
 888:	ff 1f       	adc	r31, r31
 88a:	05 90       	lpm	r0, Z+
 88c:	f4 91       	lpm	r31, Z
 88e:	e0 2d       	mov	r30, r0
 890:	09 94       	ijmp

00000892 <_exit>:
 892:	f8 94       	cli

00000894 <__stop_program>:
 894:	ff cf       	rjmp	.-2      	; 0x894 <__stop_program>
