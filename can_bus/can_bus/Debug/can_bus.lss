
can_bus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000091c  000009b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000091c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800102  00800102  000009b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001165  00000000  00000000  00000ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000334  00000000  00000000  00001c39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000860  00000000  00000000  00001f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c8  00000000  00000000  000027d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000083c  00000000  00000000  00002a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a54  00000000  00000000  000032d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003d28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
   4:	0c 94 00 03 	jmp	0x600	; 0x600 <__vector_1>
   8:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
   c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  10:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  14:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  18:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  1c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  20:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  24:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  28:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  2c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  30:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  34:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  38:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  3c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  40:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  44:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  48:	0c 94 29 03 	jmp	0x652	; 0x652 <__vector_18>
  4c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  50:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  54:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  58:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  5c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  60:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  64:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  68:	b5 03       	fmuls	r19, r21
  6a:	ce 03       	fmulsu	r20, r22
  6c:	e7 03       	fmuls	r22, r23
  6e:	00 04       	cpc	r0, r0
  70:	19 04       	cpc	r1, r9
  72:	32 04       	cpc	r3, r2
  74:	4b 04       	cpc	r4, r11
  76:	64 04       	cpc	r6, r4
  78:	6e 04       	cpc	r6, r14
  7a:	6e 04       	cpc	r6, r14
  7c:	6e 04       	cpc	r6, r14
  7e:	6e 04       	cpc	r6, r14
  80:	6e 04       	cpc	r6, r14
  82:	6e 04       	cpc	r6, r14
  84:	6e 04       	cpc	r6, r14
  86:	4e 03       	fmul	r20, r22
  88:	6e 04       	cpc	r6, r14
  8a:	6e 04       	cpc	r6, r14
  8c:	6e 04       	cpc	r6, r14
  8e:	6e 04       	cpc	r6, r14
  90:	6e 04       	cpc	r6, r14
  92:	6e 04       	cpc	r6, r14
  94:	6e 04       	cpc	r6, r14
  96:	6e 04       	cpc	r6, r14
  98:	6e 04       	cpc	r6, r14
  9a:	6e 04       	cpc	r6, r14
  9c:	6e 04       	cpc	r6, r14
  9e:	6e 04       	cpc	r6, r14
  a0:	6e 04       	cpc	r6, r14
  a2:	6e 04       	cpc	r6, r14
  a4:	6e 04       	cpc	r6, r14
  a6:	65 03       	mulsu	r22, r21
  a8:	6e 04       	cpc	r6, r14
  aa:	6e 04       	cpc	r6, r14
  ac:	6e 04       	cpc	r6, r14
  ae:	6e 04       	cpc	r6, r14
  b0:	6e 04       	cpc	r6, r14
  b2:	6e 04       	cpc	r6, r14
  b4:	6e 04       	cpc	r6, r14
  b6:	6e 04       	cpc	r6, r14
  b8:	6e 04       	cpc	r6, r14
  ba:	6e 04       	cpc	r6, r14
  bc:	6e 04       	cpc	r6, r14
  be:	6e 04       	cpc	r6, r14
  c0:	6e 04       	cpc	r6, r14
  c2:	6e 04       	cpc	r6, r14
  c4:	6e 04       	cpc	r6, r14
  c6:	78 03       	fmul	r23, r16

000000c8 <__ctors_end>:
  c8:	11 24       	eor	r1, r1
  ca:	1f be       	out	0x3f, r1	; 63
  cc:	cf ef       	ldi	r28, 0xFF	; 255
  ce:	d8 e0       	ldi	r29, 0x08	; 8
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
  d4:	11 e0       	ldi	r17, 0x01	; 1
  d6:	a0 e0       	ldi	r26, 0x00	; 0
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	ec e1       	ldi	r30, 0x1C	; 28
  dc:	f9 e0       	ldi	r31, 0x09	; 9
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
  e0:	05 90       	lpm	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	a2 30       	cpi	r26, 0x02	; 2
  e6:	b1 07       	cpc	r27, r17
  e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	a2 e0       	ldi	r26, 0x02	; 2
  ee:	b1 e0       	ldi	r27, 0x01	; 1
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
  f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
  f4:	a9 31       	cpi	r26, 0x19	; 25
  f6:	b2 07       	cpc	r27, r18
  f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
  fa:	0e 94 ab 02 	call	0x556	; 0x556 <main>
  fe:	0c 94 8c 04 	jmp	0x918	; 0x918 <_exit>

00000102 <__bad_interrupt>:
 102:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000106 <GPIO_init>:
	while(wordsize != counter)
	{
		USART_Transmit(string[counter]);
		counter++;
	}
}
 106:	52 98       	cbi	0x0a, 2	; 10
 108:	20 9a       	sbi	0x04, 0	; 4
 10a:	08 95       	ret

0000010c <INTERRUPT_init>:
 10c:	e8 9a       	sbi	0x1d, 0	; 29
 10e:	e9 e6       	ldi	r30, 0x69	; 105
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	8c 7f       	andi	r24, 0xFC	; 252
 116:	80 83       	st	Z, r24
 118:	78 94       	sei
 11a:	08 95       	ret

0000011c <SPI_masterInit>:
 11c:	22 9a       	sbi	0x04, 2	; 4
 11e:	23 9a       	sbi	0x04, 3	; 4
 120:	25 9a       	sbi	0x04, 5	; 4
 122:	2a 9a       	sbi	0x05, 2	; 5
 124:	2b 98       	cbi	0x05, 3	; 5
 126:	2d 98       	cbi	0x05, 5	; 5
 128:	8c b5       	in	r24, 0x2c	; 44
 12a:	80 65       	ori	r24, 0x50	; 80
 12c:	8c bd       	out	0x2c, r24	; 44
 12e:	8c b5       	in	r24, 0x2c	; 44
 130:	83 60       	ori	r24, 0x03	; 3
 132:	8c bd       	out	0x2c, r24	; 44
 134:	08 95       	ret

00000136 <SPI_txrx>:
 136:	8e bd       	out	0x2e, r24	; 46
 138:	0d b4       	in	r0, 0x2d	; 45
 13a:	07 fe       	sbrs	r0, 7
 13c:	fd cf       	rjmp	.-6      	; 0x138 <SPI_txrx+0x2>
 13e:	87 ec       	ldi	r24, 0xC7	; 199
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <SPI_txrx+0xc>
 146:	00 c0       	rjmp	.+0      	; 0x148 <SPI_txrx+0x12>
 148:	00 00       	nop
 14a:	8e b5       	in	r24, 0x2e	; 46
 14c:	08 95       	ret

0000014e <USART_Init>:
 14e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 152:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 156:	e1 ec       	ldi	r30, 0xC1	; 193
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	88 69       	ori	r24, 0x98	; 152
 15e:	80 83       	st	Z, r24
 160:	e2 ec       	ldi	r30, 0xC2	; 194
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	86 60       	ori	r24, 0x06	; 6
 168:	80 83       	st	Z, r24
 16a:	08 95       	ret

0000016c <USART_Receive>:
 16c:	e0 ec       	ldi	r30, 0xC0	; 192
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	88 23       	and	r24, r24
 174:	ec f7       	brge	.-6      	; 0x170 <USART_Receive+0x4>
 176:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 17a:	08 95       	ret

0000017c <USART_Transmit>:
 17c:	e0 ec       	ldi	r30, 0xC0	; 192
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	90 81       	ld	r25, Z
 182:	95 ff       	sbrs	r25, 5
 184:	fd cf       	rjmp	.-6      	; 0x180 <USART_Transmit+0x4>
 186:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 18a:	08 95       	ret

0000018c <USART_CAN_TX>:
/******************************************************************************
	USART CAN FRAME transmit|
		transmits a full CAN frame struct(tCAN) over UART
******************************************************************************/
void USART_CAN_TX(tCAN data)
{
 18c:	cf 92       	push	r12
 18e:	df 92       	push	r13
 190:	ef 92       	push	r14
 192:	ff 92       	push	r15
 194:	0f 93       	push	r16
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	cd b7       	in	r28, 0x3d	; 61
 19e:	de b7       	in	r29, 0x3e	; 62
 1a0:	2b 97       	sbiw	r28, 0x0b	; 11
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	f8 94       	cli
 1a6:	de bf       	out	0x3e, r29	; 62
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	cd bf       	out	0x3d, r28	; 61
 1ac:	e9 82       	std	Y+1, r14	; 0x01
 1ae:	fa 82       	std	Y+2, r15	; 0x02
 1b0:	0b 83       	std	Y+3, r16	; 0x03
 1b2:	1c 83       	std	Y+4, r17	; 0x04
 1b4:	2d 83       	std	Y+5, r18	; 0x05
 1b6:	3e 83       	std	Y+6, r19	; 0x06
 1b8:	4f 83       	std	Y+7, r20	; 0x07
 1ba:	58 87       	std	Y+8, r21	; 0x08
 1bc:	69 87       	std	Y+9, r22	; 0x09
 1be:	7a 87       	std	Y+10, r23	; 0x0a
 1c0:	8b 87       	std	Y+11, r24	; 0x0b
 1c2:	c9 80       	ldd	r12, Y+1	; 0x01
 1c4:	da 80       	ldd	r13, Y+2	; 0x02
 1c6:	06 95       	lsr	r16
 1c8:	0f 70       	andi	r16, 0x0F	; 15
	USART_Transmit(start_byte); //start_byte
 1ca:	8e ee       	ldi	r24, 0xEE	; 238
 1cc:	0e 94 be 00 	call	0x17c	; 0x17c <USART_Transmit>
	USART_Transmit(data.id >> 3); //CanID_High
 1d0:	c6 01       	movw	r24, r12
 1d2:	96 95       	lsr	r25
 1d4:	87 95       	ror	r24
 1d6:	96 95       	lsr	r25
 1d8:	87 95       	ror	r24
 1da:	96 95       	lsr	r25
 1dc:	87 95       	ror	r24
 1de:	0e 94 be 00 	call	0x17c	; 0x17c <USART_Transmit>
	
	USART_Transmit((data.id << 5) | (data.header.rtr <<4) | data.header.length);
 1e2:	cc 0c       	add	r12, r12
 1e4:	cc 0c       	add	r12, r12
 1e6:	cc 0c       	add	r12, r12
 1e8:	cc 0c       	add	r12, r12
 1ea:	cc 0c       	add	r12, r12
 1ec:	8b 81       	ldd	r24, Y+3	; 0x03
 1ee:	81 70       	andi	r24, 0x01	; 1
 1f0:	82 95       	swap	r24
 1f2:	80 7f       	andi	r24, 0xF0	; 240
 1f4:	8c 29       	or	r24, r12
 1f6:	80 2b       	or	r24, r16
 1f8:	0e 94 be 00 	call	0x17c	; 0x17c <USART_Transmit>
	USART_Transmit(data.id << 5);
	USART_Transmit(data.header.rtr << 4);
	USART_Transmit(data.header.length);
	*/
	//read back all data received.
	if(!data.header.rtr){
 1fc:	8b 81       	ldd	r24, Y+3	; 0x03
 1fe:	80 fd       	sbrc	r24, 0
 200:	17 c0       	rjmp	.+46     	; 0x230 <USART_CAN_TX+0xa4>
		for (uint8_t t = 0; t < data.header.length;t++) {
 202:	e0 2e       	mov	r14, r16
 204:	f1 2c       	mov	r15, r1
 206:	1e 14       	cp	r1, r14
 208:	1f 04       	cpc	r1, r15
 20a:	94 f4       	brge	.+36     	; 0x230 <USART_CAN_TX+0xa4>
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	10 e0       	ldi	r17, 0x00	; 0
			USART_Transmit(data.data[t]); //data
 212:	e4 e0       	ldi	r30, 0x04	; 4
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	ec 0f       	add	r30, r28
 218:	fd 1f       	adc	r31, r29
 21a:	e8 0f       	add	r30, r24
 21c:	f9 1f       	adc	r31, r25
 21e:	80 81       	ld	r24, Z
 220:	0e 94 be 00 	call	0x17c	; 0x17c <USART_Transmit>
	USART_Transmit(data.header.rtr << 4);
	USART_Transmit(data.header.length);
	*/
	//read back all data received.
	if(!data.header.rtr){
		for (uint8_t t = 0; t < data.header.length;t++) {
 224:	1f 5f       	subi	r17, 0xFF	; 255
 226:	81 2f       	mov	r24, r17
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	8e 15       	cp	r24, r14
 22c:	9f 05       	cpc	r25, r15
 22e:	8c f3       	brlt	.-30     	; 0x212 <USART_CAN_TX+0x86>
			USART_Transmit(data.data[t]); //data
		}
	}
 230:	2b 96       	adiw	r28, 0x0b	; 11
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	f8 94       	cli
 236:	de bf       	out	0x3e, r29	; 62
 238:	0f be       	out	0x3f, r0	; 63
 23a:	cd bf       	out	0x3d, r28	; 61
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	ff 90       	pop	r15
 246:	ef 90       	pop	r14
 248:	df 90       	pop	r13
 24a:	cf 90       	pop	r12
 24c:	08 95       	ret

0000024e <mcp2515_write_register>:
	uint8_t data[8];
} tCAN;
*/

void mcp2515_write_register( uint8_t adress, uint8_t data )
{
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	d8 2f       	mov	r29, r24
 254:	c6 2f       	mov	r28, r22
	SET_L(SS);//enable slave
 256:	2a 98       	cbi	0x05, 2	; 5

	SPI_txrx(CAN_WRITE);//send write instruction
 258:	82 e0       	ldi	r24, 0x02	; 2
 25a:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
	SPI_txrx(adress);//send address
 25e:	8d 2f       	mov	r24, r29
 260:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
	SPI_txrx(data);//send value
 264:	8c 2f       	mov	r24, r28
 266:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>

	SET_H(SS);//disable slave
 26a:	2a 9a       	sbi	0x05, 2	; 5
}
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <mcp2515_read_register>:

uint8_t mcp2515_read_register(uint8_t adress)
{
 272:	cf 93       	push	r28
 274:	c8 2f       	mov	r28, r24
	uint8_t data;

	SET_L(SS);//enable slave
 276:	2a 98       	cbi	0x05, 2	; 5

	SPI_txrx(CAN_READ);
 278:	83 e0       	ldi	r24, 0x03	; 3
 27a:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
	SPI_txrx(adress);
 27e:	8c 2f       	mov	r24, r28
 280:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>

	data = SPI_txrx(0xff);
 284:	8f ef       	ldi	r24, 0xFF	; 255
 286:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>

	SET_H(SS);//disable slave
 28a:	2a 9a       	sbi	0x05, 2	; 5

	return data;
}
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <mcp2515_bit_modify>:

// -------------------------------------------------------------------------
void mcp2515_bit_modify(uint8_t adress, uint8_t mask, uint8_t data)
{
 290:	1f 93       	push	r17
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	18 2f       	mov	r17, r24
 298:	d6 2f       	mov	r29, r22
 29a:	c4 2f       	mov	r28, r20
	SET_L(SS);
 29c:	2a 98       	cbi	0x05, 2	; 5

	SPI_txrx(CAN_BIT_MODIFY);
 29e:	85 e0       	ldi	r24, 0x05	; 5
 2a0:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
	SPI_txrx(adress);
 2a4:	81 2f       	mov	r24, r17
 2a6:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
	SPI_txrx(mask);
 2aa:	8d 2f       	mov	r24, r29
 2ac:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
	SPI_txrx(data);
 2b0:	8c 2f       	mov	r24, r28
 2b2:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>

	SET_H(SS);
 2b6:	2a 9a       	sbi	0x05, 2	; 5
}
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	1f 91       	pop	r17
 2be:	08 95       	ret

000002c0 <mcp2515_read_status>:
// ----------------------------------------------------------------------------
uint8_t mcp2515_read_status(uint8_t type)
{
	uint8_t data;

	SET_L(SS);
 2c0:	2a 98       	cbi	0x05, 2	; 5

	SPI_txrx(type);
 2c2:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
	data = SPI_txrx(0xff);
 2c6:	8f ef       	ldi	r24, 0xFF	; 255
 2c8:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>

	SET_H(SS);
 2cc:	2a 9a       	sbi	0x05, 2	; 5

	return data;
}
 2ce:	08 95       	ret

000002d0 <mcp2515_init>:
			and receive filters for the canbus transceiver.
		
		If error, PB0 is set high to turn on an error LED.
******************************************************************************/
uint8_t mcp2515_init(uint8_t speed)
{
 2d0:	cf 93       	push	r28
 2d2:	c8 2f       	mov	r28, r24

	// resets MCP2515 and puts it into configuration mode.
	SET_L(SS);
 2d4:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(CAN_RESET);
 2d6:	80 ec       	ldi	r24, 0xC0	; 192
 2d8:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
	SET_H(SS);
 2dc:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2de:	8a e6       	ldi	r24, 0x6A	; 106
 2e0:	8a 95       	dec	r24
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <mcp2515_init+0x10>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <mcp2515_init+0x16>
	//I had to increase this from 10 to 20, as otherwise it would fail.
	//		The MCP2515 needed more time to reset.
	_delay_us(20);

	// load CNF1..3 Register
	SET_L(SS);
 2e6:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(CAN_WRITE);
 2e8:	82 e0       	ldi	r24, 0x02	; 2
 2ea:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
	SPI_txrx(CNF3);  //address 0x28
 2ee:	88 e2       	ldi	r24, 0x28	; 40
 2f0:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>

	SPI_txrx((1<<PHSEG21));		// Bitrate 500 kbps at 16 MHz
 2f4:	82 e0       	ldi	r24, 0x02	; 2
 2f6:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>

	/*after tx the MCP2515 increments the address automatically, so you can
		continue to write into adjacent registers, so the next write goes into
		0x29, the location of CNF2*/
	SPI_txrx((1<<BTLMODE)|(1<<PHSEG11));//CFN2
 2fa:	80 e9       	ldi	r24, 0x90	; 144
 2fc:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
    	SPI_txrx(speed);//writes to BRPn of CNF1
 300:	8c 2f       	mov	r24, r28
 302:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>

	// activate interrupts
	SPI_txrx((1<<RX1IE)|(1<<RX0IE));
 306:	83 e0       	ldi	r24, 0x03	; 3
 308:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
	SET_H(SS);
 30c:	2a 9a       	sbi	0x05, 2	; 5

	// test if we could read back the value => is the chip accessible?
	if (mcp2515_read_register(CNF1) != speed) {
 30e:	8a e2       	ldi	r24, 0x2A	; 42
 310:	0e 94 39 01 	call	0x272	; 0x272 <mcp2515_read_register>
 314:	8c 17       	cp	r24, r28
 316:	19 f0       	breq	.+6      	; 0x31e <mcp2515_init+0x4e>
		SET_H(LED2);
 318:	28 9a       	sbi	0x05, 0	; 5

		return false;
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	16 c0       	rjmp	.+44     	; 0x34a <mcp2515_init+0x7a>
	}

	// deactivate the RXnBF Pins (High Impedance State)
	mcp2515_write_register(BFPCTRL, 0);
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	8c e0       	ldi	r24, 0x0C	; 12
 322:	0e 94 27 01 	call	0x24e	; 0x24e <mcp2515_write_register>

	// set TXnRTS as inputs
	mcp2515_write_register(TXRTSCTRL, 0);
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	8d e0       	ldi	r24, 0x0D	; 13
 32a:	0e 94 27 01 	call	0x24e	; 0x24e <mcp2515_write_register>

	
	// turn off filters => receive any message
	mcp2515_write_register(RXB0CTRL, (1<<RXM1)|(1<<RXM0));
 32e:	60 e6       	ldi	r22, 0x60	; 96
 330:	80 e6       	ldi	r24, 0x60	; 96
 332:	0e 94 27 01 	call	0x24e	; 0x24e <mcp2515_write_register>
	mcp2515_write_register(RXB1CTRL, (1<<RXM1)|(1<<RXM0));
 336:	60 e6       	ldi	r22, 0x60	; 96
 338:	80 e7       	ldi	r24, 0x70	; 112
 33a:	0e 94 27 01 	call	0x24e	; 0x24e <mcp2515_write_register>
// 	mcp2515_write_register(RXF4SIDL, RxIDLow);
*/
/******************************************************************************/

	// reset device to normal mode
	mcp2515_write_register(CANCTRL, 0);
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	8f e0       	ldi	r24, 0x0F	; 15
 342:	0e 94 27 01 	call	0x24e	; 0x24e <mcp2515_write_register>
	SET_L(LED2);
 346:	28 98       	cbi	0x05, 0	; 5
	return true;
 348:	81 e0       	ldi	r24, 0x01	; 1
}
 34a:	cf 91       	pop	r28
 34c:	08 95       	ret

0000034e <mcp2515_get_message>:

// ----------------------------------------------------------------------------
uint8_t mcp2515_get_message(tCAN *message)
{
 34e:	cf 92       	push	r12
 350:	df 92       	push	r13
 352:	ef 92       	push	r14
 354:	ff 92       	push	r15
 356:	0f 93       	push	r16
 358:	1f 93       	push	r17
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	1f 92       	push	r1
 360:	cd b7       	in	r28, 0x3d	; 61
 362:	de b7       	in	r29, 0x3e	; 62
 364:	6c 01       	movw	r12, r24
	// read status
	uint8_t status = mcp2515_read_status(CAN_RX_STATUS);
 366:	80 eb       	ldi	r24, 0xB0	; 176
 368:	0e 94 60 01 	call	0x2c0	; 0x2c0 <mcp2515_read_status>
 36c:	89 83       	std	Y+1, r24	; 0x01
	uint8_t addr;
	uint8_t t;
	if (bit_is_set(status,6)) {
 36e:	99 81       	ldd	r25, Y+1	; 0x01
 370:	89 2f       	mov	r24, r25
 372:	80 74       	andi	r24, 0x40	; 64
 374:	96 fd       	sbrc	r25, 6
 376:	06 c0       	rjmp	.+12     	; 0x384 <mcp2515_get_message+0x36>
		// message in buffer 0
		addr = CAN_READ_RX_BUFF;
	}
	else if (bit_is_set(status,7)) {
 378:	99 81       	ldd	r25, Y+1	; 0x01
 37a:	99 23       	and	r25, r25
 37c:	0c f0       	brlt	.+2      	; 0x380 <mcp2515_get_message+0x32>
 37e:	5e c0       	rjmp	.+188    	; 0x43c <__FUSE_REGION_LENGTH__+0x3c>
		// message in buffer 1
		addr = CAN_READ_RX_BUFF | 0x04;
 380:	84 e9       	ldi	r24, 0x94	; 148
 382:	01 c0       	rjmp	.+2      	; 0x386 <mcp2515_get_message+0x38>
	uint8_t status = mcp2515_read_status(CAN_RX_STATUS);
	uint8_t addr;
	uint8_t t;
	if (bit_is_set(status,6)) {
		// message in buffer 0
		addr = CAN_READ_RX_BUFF;
 384:	80 e9       	ldi	r24, 0x90	; 144
	else {
		// Error: no message available
		return 0;
	}

	SET_L(SS);
 386:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(addr);
 388:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>

	// read id
	message->id  = (uint16_t) SPI_txrx(0xff) << 3;
 38c:	8f ef       	ldi	r24, 0xFF	; 255
 38e:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 392:	28 e0       	ldi	r18, 0x08	; 8
 394:	82 9f       	mul	r24, r18
 396:	c0 01       	movw	r24, r0
 398:	11 24       	eor	r1, r1
 39a:	f6 01       	movw	r30, r12
 39c:	91 83       	std	Z+1, r25	; 0x01
 39e:	80 83       	st	Z, r24
	message->id |=            SPI_txrx(0xff) >> 5;
 3a0:	8f ef       	ldi	r24, 0xFF	; 255
 3a2:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 3a6:	28 2f       	mov	r18, r24
 3a8:	22 95       	swap	r18
 3aa:	26 95       	lsr	r18
 3ac:	27 70       	andi	r18, 0x07	; 7
 3ae:	f6 01       	movw	r30, r12
 3b0:	80 81       	ld	r24, Z
 3b2:	91 81       	ldd	r25, Z+1	; 0x01
 3b4:	82 2b       	or	r24, r18
 3b6:	91 83       	std	Z+1, r25	; 0x01
 3b8:	80 83       	st	Z, r24

	SPI_txrx(0xff);
 3ba:	8f ef       	ldi	r24, 0xFF	; 255
 3bc:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
	SPI_txrx(0xff);
 3c0:	8f ef       	ldi	r24, 0xFF	; 255
 3c2:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>

	// read DLC
	uint8_t length = SPI_txrx(0xff) & 0x0f;
 3c6:	8f ef       	ldi	r24, 0xFF	; 255
 3c8:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 3cc:	98 2f       	mov	r25, r24
 3ce:	9f 70       	andi	r25, 0x0F	; 15

	message->header.length = length;
 3d0:	29 2f       	mov	r18, r25
 3d2:	22 0f       	add	r18, r18
 3d4:	f6 01       	movw	r30, r12
 3d6:	82 81       	ldd	r24, Z+2	; 0x02
 3d8:	81 7e       	andi	r24, 0xE1	; 225
 3da:	82 2b       	or	r24, r18
 3dc:	82 83       	std	Z+2, r24	; 0x02
	message->header.rtr = (bit_is_set(status, 3)) ? 1 : 0;
 3de:	29 81       	ldd	r18, Y+1	; 0x01
 3e0:	23 fb       	bst	r18, 3
 3e2:	22 27       	eor	r18, r18
 3e4:	20 f9       	bld	r18, 0
 3e6:	20 fb       	bst	r18, 0
 3e8:	80 f9       	bld	r24, 0
 3ea:	82 83       	std	Z+2, r24	; 0x02

	// read data
	for (t=0;t<length;t++) {
 3ec:	99 23       	and	r25, r25
 3ee:	a1 f0       	breq	.+40     	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
 3f0:	86 01       	movw	r16, r12
 3f2:	0d 5f       	subi	r16, 0xFD	; 253
 3f4:	1f 4f       	sbci	r17, 0xFF	; 255
 3f6:	91 50       	subi	r25, 0x01	; 1
 3f8:	e9 2e       	mov	r14, r25
 3fa:	f1 2c       	mov	r15, r1
 3fc:	f4 e0       	ldi	r31, 0x04	; 4
 3fe:	ef 0e       	add	r14, r31
 400:	f1 1c       	adc	r15, r1
 402:	ec 0c       	add	r14, r12
 404:	fd 1c       	adc	r15, r13
		message->data[t] = SPI_txrx(0xff);
 406:	8f ef       	ldi	r24, 0xFF	; 255
 408:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 40c:	f8 01       	movw	r30, r16
 40e:	81 93       	st	Z+, r24
 410:	8f 01       	movw	r16, r30

	message->header.length = length;
	message->header.rtr = (bit_is_set(status, 3)) ? 1 : 0;

	// read data
	for (t=0;t<length;t++) {
 412:	ee 15       	cp	r30, r14
 414:	ff 05       	cpc	r31, r15
 416:	b9 f7       	brne	.-18     	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
		message->data[t] = SPI_txrx(0xff);
	}
	SET_H(SS);
 418:	2a 9a       	sbi	0x05, 2	; 5

	// clear interrupt flag
	if (bit_is_set(status, 6)) {
 41a:	89 81       	ldd	r24, Y+1	; 0x01
 41c:	86 ff       	sbrs	r24, 6
 41e:	06 c0       	rjmp	.+12     	; 0x42c <__FUSE_REGION_LENGTH__+0x2c>
		mcp2515_bit_modify(CANINTF, (1<<RX0IF), 0);
 420:	40 e0       	ldi	r20, 0x00	; 0
 422:	61 e0       	ldi	r22, 0x01	; 1
 424:	8c e2       	ldi	r24, 0x2C	; 44
 426:	0e 94 48 01 	call	0x290	; 0x290 <mcp2515_bit_modify>
 42a:	05 c0       	rjmp	.+10     	; 0x436 <__FUSE_REGION_LENGTH__+0x36>
	}
	else {
		mcp2515_bit_modify(CANINTF, (1<<RX1IF), 0);
 42c:	40 e0       	ldi	r20, 0x00	; 0
 42e:	62 e0       	ldi	r22, 0x02	; 2
 430:	8c e2       	ldi	r24, 0x2C	; 44
 432:	0e 94 48 01 	call	0x290	; 0x290 <mcp2515_bit_modify>
	}

	return (status & 0x07) + 1;
 436:	89 81       	ldd	r24, Y+1	; 0x01
 438:	87 70       	andi	r24, 0x07	; 7
 43a:	8f 5f       	subi	r24, 0xFF	; 255
}
 43c:	0f 90       	pop	r0
 43e:	df 91       	pop	r29
 440:	cf 91       	pop	r28
 442:	1f 91       	pop	r17
 444:	0f 91       	pop	r16
 446:	ff 90       	pop	r15
 448:	ef 90       	pop	r14
 44a:	df 90       	pop	r13
 44c:	cf 90       	pop	r12
 44e:	08 95       	ret

00000450 <mcp2515_send_message>:

// ----------------------------------------------------------------------------
uint8_t mcp2515_send_message(tCAN *message)
{
 450:	bf 92       	push	r11
 452:	cf 92       	push	r12
 454:	df 92       	push	r13
 456:	ef 92       	push	r14
 458:	ff 92       	push	r15
 45a:	0f 93       	push	r16
 45c:	1f 93       	push	r17
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	1f 92       	push	r1
 464:	cd b7       	in	r28, 0x3d	; 61
 466:	de b7       	in	r29, 0x3e	; 62
 468:	6c 01       	movw	r12, r24
	
	
	uint8_t status = mcp2515_read_status(CAN_READ_STATUS);
 46a:	80 ea       	ldi	r24, 0xA0	; 160
 46c:	0e 94 60 01 	call	0x2c0	; 0x2c0 <mcp2515_read_status>
 470:	89 83       	std	Y+1, r24	; 0x01
	   6	TXB2CNTRL.TXREQ
	 */
	uint8_t address;
	uint8_t t;

	if (bit_is_clear(status, 2)) {
 472:	89 81       	ldd	r24, Y+1	; 0x01
 474:	82 ff       	sbrs	r24, 2
 476:	0a c0       	rjmp	.+20     	; 0x48c <mcp2515_send_message+0x3c>
		address = 0x00;
	}
	else if (bit_is_clear(status, 4)) {
 478:	89 81       	ldd	r24, Y+1	; 0x01
 47a:	84 ff       	sbrs	r24, 4
 47c:	09 c0       	rjmp	.+18     	; 0x490 <mcp2515_send_message+0x40>
		address = 0x02;
	}
	else if (bit_is_clear(status, 6)) {
 47e:	89 81       	ldd	r24, Y+1	; 0x01
 480:	86 fd       	sbrc	r24, 6
 482:	5d c0       	rjmp	.+186    	; 0x53e <mcp2515_send_message+0xee>
		address = 0x04;
 484:	68 94       	set
 486:	bb 24       	eor	r11, r11
 488:	b2 f8       	bld	r11, 2
 48a:	05 c0       	rjmp	.+10     	; 0x496 <mcp2515_send_message+0x46>
	 */
	uint8_t address;
	uint8_t t;

	if (bit_is_clear(status, 2)) {
		address = 0x00;
 48c:	b1 2c       	mov	r11, r1
 48e:	03 c0       	rjmp	.+6      	; 0x496 <mcp2515_send_message+0x46>
	}
	else if (bit_is_clear(status, 4)) {
		address = 0x02;
 490:	68 94       	set
 492:	bb 24       	eor	r11, r11
 494:	b1 f8       	bld	r11, 1
	else {
		// all buffer used => could not send message
		return 0;
	}

	SET_L(SS);
 496:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(CAN_LOAD_TX_BUFF | address);
 498:	8b 2d       	mov	r24, r11
 49a:	80 64       	ori	r24, 0x40	; 64
 49c:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>

	//split 11bit ID into it's respective register positions
	SPI_txrx(message->id >> 3);
 4a0:	f6 01       	movw	r30, r12
 4a2:	80 81       	ld	r24, Z
 4a4:	91 81       	ldd	r25, Z+1	; 0x01
 4a6:	96 95       	lsr	r25
 4a8:	87 95       	ror	r24
 4aa:	96 95       	lsr	r25
 4ac:	87 95       	ror	r24
 4ae:	96 95       	lsr	r25
 4b0:	87 95       	ror	r24
 4b2:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
    	SPI_txrx(message->id << 5);
 4b6:	f6 01       	movw	r30, r12
 4b8:	80 81       	ld	r24, Z
 4ba:	82 95       	swap	r24
 4bc:	88 0f       	add	r24, r24
 4be:	80 7e       	andi	r24, 0xE0	; 224
 4c0:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>

	SPI_txrx(0);
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
	SPI_txrx(0);
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>

	uint8_t length = message->header.length & 0x0f;
 4d0:	f6 01       	movw	r30, r12
 4d2:	82 81       	ldd	r24, Z+2	; 0x02
 4d4:	f8 2e       	mov	r15, r24
 4d6:	f6 94       	lsr	r15
 4d8:	ff 2d       	mov	r31, r15
 4da:	ff 70       	andi	r31, 0x0F	; 15
 4dc:	ff 2e       	mov	r15, r31

	if (message->header.rtr) {
 4de:	80 ff       	sbrs	r24, 0
 4e0:	05 c0       	rjmp	.+10     	; 0x4ec <mcp2515_send_message+0x9c>
		// a rtr-frame has a length, but contains no data
		SPI_txrx((1<<RTR) | length);
 4e2:	8f 2f       	mov	r24, r31
 4e4:	80 64       	ori	r24, 0x40	; 64
 4e6:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
 4ea:	18 c0       	rjmp	.+48     	; 0x51c <mcp2515_send_message+0xcc>
	}
	else {
		// set message length
		SPI_txrx(length);
 4ec:	8f 2f       	mov	r24, r31
 4ee:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>

		// data
		for (t=0;t<length;t++) {
 4f2:	ff 20       	and	r15, r15
 4f4:	99 f0       	breq	.+38     	; 0x51c <mcp2515_send_message+0xcc>
 4f6:	86 01       	movw	r16, r12
 4f8:	0d 5f       	subi	r16, 0xFD	; 253
 4fa:	1f 4f       	sbci	r17, 0xFF	; 255
 4fc:	fa 94       	dec	r15
 4fe:	ef 2c       	mov	r14, r15
 500:	f1 2c       	mov	r15, r1
 502:	84 e0       	ldi	r24, 0x04	; 4
 504:	e8 0e       	add	r14, r24
 506:	f1 1c       	adc	r15, r1
 508:	ec 0c       	add	r14, r12
 50a:	fd 1c       	adc	r15, r13
			SPI_txrx(message->data[t]);
 50c:	f8 01       	movw	r30, r16
 50e:	81 91       	ld	r24, Z+
 510:	8f 01       	movw	r16, r30
 512:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
	else {
		// set message length
		SPI_txrx(length);

		// data
		for (t=0;t<length;t++) {
 516:	0e 15       	cp	r16, r14
 518:	1f 05       	cpc	r17, r15
 51a:	c1 f7       	brne	.-16     	; 0x50c <mcp2515_send_message+0xbc>
			SPI_txrx(message->data[t]);
		}
	}
	SET_H(SS);
 51c:	2a 9a       	sbi	0x05, 2	; 5
 51e:	f5 e0       	ldi	r31, 0x05	; 5
 520:	fa 95       	dec	r31
 522:	f1 f7       	brne	.-4      	; 0x520 <mcp2515_send_message+0xd0>
 524:	00 00       	nop

	//Wait for message to "settle" in register
	_delay_us(1);

	// send message
	SET_L(SS);
 526:	2a 98       	cbi	0x05, 2	; 5
	address = (address == 0) ? 1 : address;
 528:	b1 10       	cpse	r11, r1
 52a:	02 c0       	rjmp	.+4      	; 0x530 <mcp2515_send_message+0xe0>
 52c:	bb 24       	eor	r11, r11
 52e:	b3 94       	inc	r11
	SPI_txrx(CAN_RTS | address);
 530:	8b 2d       	mov	r24, r11
 532:	80 68       	ori	r24, 0x80	; 128
 534:	0e 94 9b 00 	call	0x136	; 0x136 <SPI_txrx>
	SET_H(SS);
 538:	2a 9a       	sbi	0x05, 2	; 5

	return address;
 53a:	8b 2d       	mov	r24, r11
 53c:	01 c0       	rjmp	.+2      	; 0x540 <mcp2515_send_message+0xf0>
	else if (bit_is_clear(status, 6)) {
		address = 0x04;
	}
	else {
		// all buffer used => could not send message
		return 0;
 53e:	80 e0       	ldi	r24, 0x00	; 0
	address = (address == 0) ? 1 : address;
	SPI_txrx(CAN_RTS | address);
	SET_H(SS);

	return address;
}
 540:	0f 90       	pop	r0
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	1f 91       	pop	r17
 548:	0f 91       	pop	r16
 54a:	ff 90       	pop	r15
 54c:	ef 90       	pop	r14
 54e:	df 90       	pop	r13
 550:	cf 90       	pop	r12
 552:	bf 90       	pop	r11
 554:	08 95       	ret

00000556 <main>:
	start of main()|
******************************************************************************/
int main(void)
{
	//initialization functions
	GPIO_init();
 556:	0e 94 83 00 	call	0x106	; 0x106 <GPIO_init>
	INTERRUPT_init();
 55a:	0e 94 86 00 	call	0x10c	; 0x10c <INTERRUPT_init>
	USART_Init(103);//103 sets baud rate at 9600
 55e:	87 e6       	ldi	r24, 0x67	; 103
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	0e 94 a7 00 	call	0x14e	; 0x14e <USART_Init>
	SPI_masterInit();
 566:	0e 94 8e 00 	call	0x11c	; 0x11c <SPI_masterInit>
	
	
	//MCP2515 initialization
	if(mcp2515_init(CANSPEED_500))
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <mcp2515_init>
 570:	88 23       	and	r24, r24
 572:	a9 f0       	breq	.+42     	; 0x59e <main+0x48>
	{
		USART_Transmit(0xFF);
 574:	8f ef       	ldi	r24, 0xFF	; 255
 576:	0e 94 be 00 	call	0x17c	; 0x17c <USART_Transmit>
		//spi_char, so ATOMIC_BLOCK disabled interrupts, then transmits it
		//over uart.
		if(rx_flag){
				ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
				USART_CAN_TX(CANRX_buffer);
				CANRX_buffer.id = 0;
 57a:	0f 2e       	mov	r0, r31
 57c:	f3 e0       	ldi	r31, 0x03	; 3
 57e:	af 2e       	mov	r10, r31
 580:	f1 e0       	ldi	r31, 0x01	; 1
 582:	bf 2e       	mov	r11, r31
 584:	f0 2d       	mov	r31, r0
				CANRX_buffer.header.rtr = 0;
 586:	c5 e0       	ldi	r28, 0x05	; 5
 588:	d1 e0       	ldi	r29, 0x01	; 1
				CANRX_buffer.header.length = 0;
				memset(CANRX_buffer.data, 0, sizeof(CANRX_buffer.data));
 58a:	0f 2e       	mov	r0, r31
 58c:	f6 e0       	ldi	r31, 0x06	; 6
 58e:	cf 2e       	mov	r12, r31
 590:	f1 e0       	ldi	r31, 0x01	; 1
 592:	df 2e       	mov	r13, r31
 594:	f0 2d       	mov	r31, r0
 596:	68 94       	set
 598:	88 24       	eor	r8, r8
 59a:	83 f8       	bld	r8, 3
 59c:	04 c0       	rjmp	.+8      	; 0x5a6 <main+0x50>
	if(mcp2515_init(CANSPEED_500))
	{
		USART_Transmit(0xFF);
	}else
	{
		USART_Transmit(0x00);
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	0e 94 be 00 	call	0x17c	; 0x17c <USART_Transmit>
 5a4:	ea cf       	rjmp	.-44     	; 0x57a <main+0x24>
	{
		
		//if rx_flag is set, that means there's a received message stored in
		//spi_char, so ATOMIC_BLOCK disabled interrupts, then transmits it
		//over uart.
		if(rx_flag){
 5a6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 5aa:	88 23       	and	r24, r24
 5ac:	e1 f3       	breq	.-8      	; 0x5a6 <main+0x50>
				ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 5ae:	9f b6       	in	r9, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 5b0:	f8 94       	cli
				USART_CAN_TX(CANRX_buffer);
 5b2:	e0 90 03 01 	lds	r14, 0x0103	; 0x800103 <CANRX_buffer>
 5b6:	f0 90 04 01 	lds	r15, 0x0104	; 0x800104 <CANRX_buffer+0x1>
 5ba:	00 91 05 01 	lds	r16, 0x0105	; 0x800105 <CANRX_buffer+0x2>
 5be:	10 91 06 01 	lds	r17, 0x0106	; 0x800106 <CANRX_buffer+0x3>
 5c2:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <CANRX_buffer+0x4>
 5c6:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <CANRX_buffer+0x5>
 5ca:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <CANRX_buffer+0x6>
 5ce:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <CANRX_buffer+0x7>
 5d2:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <CANRX_buffer+0x8>
 5d6:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <CANRX_buffer+0x9>
 5da:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <CANRX_buffer+0xa>
 5de:	0e 94 c6 00 	call	0x18c	; 0x18c <USART_CAN_TX>
				CANRX_buffer.id = 0;
 5e2:	f5 01       	movw	r30, r10
 5e4:	11 82       	std	Z+1, r1	; 0x01
 5e6:	10 82       	st	Z, r1
				CANRX_buffer.header.rtr = 0;
 5e8:	88 81       	ld	r24, Y
				CANRX_buffer.header.length = 0;
 5ea:	80 7e       	andi	r24, 0xE0	; 224
 5ec:	88 83       	st	Y, r24
				memset(CANRX_buffer.data, 0, sizeof(CANRX_buffer.data));
 5ee:	f6 01       	movw	r30, r12
 5f0:	88 2d       	mov	r24, r8
 5f2:	11 92       	st	Z+, r1
 5f4:	8a 95       	dec	r24
 5f6:	e9 f7       	brne	.-6      	; 0x5f2 <main+0x9c>
				rx_flag = 0;
 5f8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 5fc:	9f be       	out	0x3f, r9	; 63
    __asm__ volatile ("" ::: "memory");
 5fe:	d3 cf       	rjmp	.-90     	; 0x5a6 <main+0x50>

00000600 <__vector_1>:

/******************************************************************************
	RECEIVE interrupt on pin PD2|
******************************************************************************/
ISR(INT0_vect)
{
 600:	1f 92       	push	r1
 602:	0f 92       	push	r0
 604:	0f b6       	in	r0, 0x3f	; 63
 606:	0f 92       	push	r0
 608:	11 24       	eor	r1, r1
 60a:	2f 93       	push	r18
 60c:	3f 93       	push	r19
 60e:	4f 93       	push	r20
 610:	5f 93       	push	r21
 612:	6f 93       	push	r22
 614:	7f 93       	push	r23
 616:	8f 93       	push	r24
 618:	9f 93       	push	r25
 61a:	af 93       	push	r26
 61c:	bf 93       	push	r27
 61e:	ef 93       	push	r30
 620:	ff 93       	push	r31
	mcp2515_get_message(&CANRX_buffer);//get canbus message
 622:	83 e0       	ldi	r24, 0x03	; 3
 624:	91 e0       	ldi	r25, 0x01	; 1
 626:	0e 94 a7 01 	call	0x34e	; 0x34e <mcp2515_get_message>
	rx_flag = 1;  //set flag
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
}
 630:	ff 91       	pop	r31
 632:	ef 91       	pop	r30
 634:	bf 91       	pop	r27
 636:	af 91       	pop	r26
 638:	9f 91       	pop	r25
 63a:	8f 91       	pop	r24
 63c:	7f 91       	pop	r23
 63e:	6f 91       	pop	r22
 640:	5f 91       	pop	r21
 642:	4f 91       	pop	r20
 644:	3f 91       	pop	r19
 646:	2f 91       	pop	r18
 648:	0f 90       	pop	r0
 64a:	0f be       	out	0x3f, r0	; 63
 64c:	0f 90       	pop	r0
 64e:	1f 90       	pop	r1
 650:	18 95       	reti

00000652 <__vector_18>:

ISR(USART_RX_vect)
{	
 652:	1f 92       	push	r1
 654:	0f 92       	push	r0
 656:	0f b6       	in	r0, 0x3f	; 63
 658:	0f 92       	push	r0
 65a:	11 24       	eor	r1, r1
 65c:	ef 92       	push	r14
 65e:	ff 92       	push	r15
 660:	0f 93       	push	r16
 662:	1f 93       	push	r17
 664:	2f 93       	push	r18
 666:	3f 93       	push	r19
 668:	4f 93       	push	r20
 66a:	5f 93       	push	r21
 66c:	6f 93       	push	r22
 66e:	7f 93       	push	r23
 670:	8f 93       	push	r24
 672:	9f 93       	push	r25
 674:	af 93       	push	r26
 676:	bf 93       	push	r27
 678:	ef 93       	push	r30
 67a:	ff 93       	push	r31
	uint8_t receive_buff = USART_Receive();
 67c:	0e 94 b6 00 	call	0x16c	; 0x16c <USART_Receive>
	
	switch(Rx_frame_state){
 680:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <Rx_frame_state>
 684:	4e 2f       	mov	r20, r30
 686:	50 e0       	ldi	r21, 0x00	; 0
 688:	fa 01       	movw	r30, r20
 68a:	31 97       	sbiw	r30, 0x01	; 1
 68c:	e0 33       	cpi	r30, 0x30	; 48
 68e:	f1 05       	cpc	r31, r1
 690:	08 f0       	brcs	.+2      	; 0x694 <__vector_18+0x42>
 692:	24 c1       	rjmp	.+584    	; 0x8dc <__vector_18+0x28a>
 694:	ec 5c       	subi	r30, 0xCC	; 204
 696:	ff 4f       	sbci	r31, 0xFF	; 255
 698:	0c 94 86 04 	jmp	0x90c	; 0x90c <__tablejump2__>
		case s_RxStart : //start byte
		if (receive_buff == start_byte){
 69c:	8e 3e       	cpi	r24, 0xEE	; 238
 69e:	09 f0       	breq	.+2      	; 0x6a2 <__vector_18+0x50>
 6a0:	20 c1       	rjmp	.+576    	; 0x8e2 <__vector_18+0x290>
			CANTX_buffer.id = 0;
 6a2:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <CANTX_buffer+0x1>
 6a6:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <CANTX_buffer>
			CANTX_buffer.header.rtr = 0;
 6aa:	e0 e1       	ldi	r30, 0x10	; 16
 6ac:	f1 e0       	ldi	r31, 0x01	; 1
 6ae:	80 81       	ld	r24, Z
			CANTX_buffer.header.length = 0;
 6b0:	80 7e       	andi	r24, 0xE0	; 224
 6b2:	80 83       	st	Z, r24
			memset(CANTX_buffer.data, 0, sizeof(CANTX_buffer.data));
 6b4:	88 e0       	ldi	r24, 0x08	; 8
 6b6:	e1 e1       	ldi	r30, 0x11	; 17
 6b8:	f1 e0       	ldi	r31, 0x01	; 1
 6ba:	df 01       	movw	r26, r30
 6bc:	1d 92       	st	X+, r1
 6be:	8a 95       	dec	r24
 6c0:	e9 f7       	brne	.-6      	; 0x6bc <__vector_18+0x6a>
			Rx_frame_state = s_RxIDH;
 6c2:	80 e2       	ldi	r24, 0x20	; 32
 6c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 6c8:	0c c1       	rjmp	.+536    	; 0x8e2 <__vector_18+0x290>
		}
		break;
		case s_RxIDH : //frameID High
		CANTX_buffer.id |= (receive_buff << 3);
 6ca:	ee e0       	ldi	r30, 0x0E	; 14
 6cc:	f1 e0       	ldi	r31, 0x01	; 1
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	88 0f       	add	r24, r24
 6d2:	99 1f       	adc	r25, r25
 6d4:	88 0f       	add	r24, r24
 6d6:	99 1f       	adc	r25, r25
 6d8:	88 0f       	add	r24, r24
 6da:	99 1f       	adc	r25, r25
 6dc:	20 81       	ld	r18, Z
 6de:	31 81       	ldd	r19, Z+1	; 0x01
 6e0:	82 2b       	or	r24, r18
 6e2:	93 2b       	or	r25, r19
 6e4:	91 83       	std	Z+1, r25	; 0x01
 6e6:	80 83       	st	Z, r24
		Rx_frame_state = s_RxIDL;
 6e8:	80 e3       	ldi	r24, 0x30	; 48
 6ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
		break;
 6ee:	f9 c0       	rjmp	.+498    	; 0x8e2 <__vector_18+0x290>
		case s_RxIDL : //frameID Low, rtr, & length = 0bXXXYZZZZ
		CANTX_buffer.id |= (receive_buff >> 5);
 6f0:	ee e0       	ldi	r30, 0x0E	; 14
 6f2:	f1 e0       	ldi	r31, 0x01	; 1
 6f4:	98 2f       	mov	r25, r24
 6f6:	92 95       	swap	r25
 6f8:	96 95       	lsr	r25
 6fa:	97 70       	andi	r25, 0x07	; 7
 6fc:	20 81       	ld	r18, Z
 6fe:	31 81       	ldd	r19, Z+1	; 0x01
 700:	29 2b       	or	r18, r25
 702:	31 83       	std	Z+1, r19	; 0x01
 704:	20 83       	st	Z, r18
		CANTX_buffer.header.rtr =  ((receive_buff >> 4) & 0x01);
 706:	28 2f       	mov	r18, r24
 708:	22 95       	swap	r18
 70a:	2f 70       	andi	r18, 0x0F	; 15
 70c:	e0 e1       	ldi	r30, 0x10	; 16
 70e:	f1 e0       	ldi	r31, 0x01	; 1
 710:	90 81       	ld	r25, Z
 712:	20 fb       	bst	r18, 0
 714:	90 f9       	bld	r25, 0
		CANTX_buffer.header.length = (receive_buff & 0x0F);
 716:	8f 70       	andi	r24, 0x0F	; 15
 718:	88 0f       	add	r24, r24
 71a:	91 7e       	andi	r25, 0xE1	; 225
 71c:	89 2b       	or	r24, r25
 71e:	80 83       	st	Z, r24
		if(CANTX_buffer.header.rtr){
 720:	80 ff       	sbrs	r24, 0
 722:	1f c0       	rjmp	.+62     	; 0x762 <__vector_18+0x110>
			USART_CAN_TX(CANTX_buffer);//[DEBUG]
 724:	e0 90 0e 01 	lds	r14, 0x010E	; 0x80010e <CANTX_buffer>
 728:	f0 90 0f 01 	lds	r15, 0x010F	; 0x80010f <CANTX_buffer+0x1>
 72c:	08 2f       	mov	r16, r24
 72e:	10 91 11 01 	lds	r17, 0x0111	; 0x800111 <CANTX_buffer+0x3>
 732:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <CANTX_buffer+0x4>
 736:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <CANTX_buffer+0x5>
 73a:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <CANTX_buffer+0x6>
 73e:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <CANTX_buffer+0x7>
 742:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <CANTX_buffer+0x8>
 746:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <CANTX_buffer+0x9>
 74a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <CANTX_buffer+0xa>
 74e:	0e 94 c6 00 	call	0x18c	; 0x18c <USART_CAN_TX>
			mcp2515_send_message(&CANTX_buffer);
 752:	8e e0       	ldi	r24, 0x0E	; 14
 754:	91 e0       	ldi	r25, 0x01	; 1
 756:	0e 94 28 02 	call	0x450	; 0x450 <mcp2515_send_message>
			receive_buff = 0;
			Rx_frame_state = s_RxStart;
 75a:	80 e1       	ldi	r24, 0x10	; 16
 75c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 760:	c0 c0       	rjmp	.+384    	; 0x8e2 <__vector_18+0x290>
			} else {
			Rx_frame_state = s_Rxdata1;
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 768:	bc c0       	rjmp	.+376    	; 0x8e2 <__vector_18+0x290>
		}
		//USART_CAN_TX(CANTX_buffer);//[DEBUG]
		break;
		case s_Rxdata1 : //data1
		CANTX_buffer.data[0] = receive_buff;
 76a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <CANTX_buffer+0x3>
		if(Rx_frame_state < CANTX_buffer.header.length){
 76e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 772:	30 e0       	ldi	r19, 0x00	; 0
 774:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <CANTX_buffer+0x2>
 778:	86 95       	lsr	r24
 77a:	8f 70       	andi	r24, 0x0F	; 15
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	28 17       	cp	r18, r24
 780:	39 07       	cpc	r19, r25
 782:	24 f4       	brge	.+8      	; 0x78c <__vector_18+0x13a>
			Rx_frame_state = s_Rxdata2;
 784:	82 e0       	ldi	r24, 0x02	; 2
 786:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 78a:	ab c0       	rjmp	.+342    	; 0x8e2 <__vector_18+0x290>
			}else{
			mcp2515_send_message(&CANTX_buffer);
 78c:	8e e0       	ldi	r24, 0x0E	; 14
 78e:	91 e0       	ldi	r25, 0x01	; 1
 790:	0e 94 28 02 	call	0x450	; 0x450 <mcp2515_send_message>
			receive_buff = 0;
			Rx_frame_state = s_RxStart;
 794:	80 e1       	ldi	r24, 0x10	; 16
 796:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 79a:	a3 c0       	rjmp	.+326    	; 0x8e2 <__vector_18+0x290>
		}
		break;
		case s_Rxdata2 ://data2
		CANTX_buffer.data[1] = receive_buff;
 79c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <CANTX_buffer+0x4>
		if(Rx_frame_state < CANTX_buffer.header.length){
 7a0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 7a4:	30 e0       	ldi	r19, 0x00	; 0
 7a6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <CANTX_buffer+0x2>
 7aa:	86 95       	lsr	r24
 7ac:	8f 70       	andi	r24, 0x0F	; 15
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	28 17       	cp	r18, r24
 7b2:	39 07       	cpc	r19, r25
 7b4:	24 f4       	brge	.+8      	; 0x7be <__vector_18+0x16c>
			Rx_frame_state = s_Rxdata3;
 7b6:	83 e0       	ldi	r24, 0x03	; 3
 7b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 7bc:	92 c0       	rjmp	.+292    	; 0x8e2 <__vector_18+0x290>
			}else{
			mcp2515_send_message(&CANTX_buffer);
 7be:	8e e0       	ldi	r24, 0x0E	; 14
 7c0:	91 e0       	ldi	r25, 0x01	; 1
 7c2:	0e 94 28 02 	call	0x450	; 0x450 <mcp2515_send_message>
			receive_buff = 0;
			Rx_frame_state = s_RxStart;
 7c6:	80 e1       	ldi	r24, 0x10	; 16
 7c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 7cc:	8a c0       	rjmp	.+276    	; 0x8e2 <__vector_18+0x290>
		}
		break;
		case s_Rxdata3 ://data3
		CANTX_buffer.data[2] = receive_buff;
 7ce:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <CANTX_buffer+0x5>
		if(Rx_frame_state < CANTX_buffer.header.length){
 7d2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 7d6:	30 e0       	ldi	r19, 0x00	; 0
 7d8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <CANTX_buffer+0x2>
 7dc:	86 95       	lsr	r24
 7de:	8f 70       	andi	r24, 0x0F	; 15
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	28 17       	cp	r18, r24
 7e4:	39 07       	cpc	r19, r25
 7e6:	24 f4       	brge	.+8      	; 0x7f0 <__vector_18+0x19e>
			Rx_frame_state = s_Rxdata4;
 7e8:	84 e0       	ldi	r24, 0x04	; 4
 7ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 7ee:	79 c0       	rjmp	.+242    	; 0x8e2 <__vector_18+0x290>
			}else{
			mcp2515_send_message(&CANTX_buffer);
 7f0:	8e e0       	ldi	r24, 0x0E	; 14
 7f2:	91 e0       	ldi	r25, 0x01	; 1
 7f4:	0e 94 28 02 	call	0x450	; 0x450 <mcp2515_send_message>
			receive_buff = 0;
			Rx_frame_state = s_RxStart;
 7f8:	80 e1       	ldi	r24, 0x10	; 16
 7fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 7fe:	71 c0       	rjmp	.+226    	; 0x8e2 <__vector_18+0x290>
		}
		break;
		case s_Rxdata4 ://data4
		CANTX_buffer.data[3] = receive_buff;
 800:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <CANTX_buffer+0x6>
		if(Rx_frame_state < CANTX_buffer.header.length){
 804:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 808:	30 e0       	ldi	r19, 0x00	; 0
 80a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <CANTX_buffer+0x2>
 80e:	86 95       	lsr	r24
 810:	8f 70       	andi	r24, 0x0F	; 15
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	28 17       	cp	r18, r24
 816:	39 07       	cpc	r19, r25
 818:	24 f4       	brge	.+8      	; 0x822 <__vector_18+0x1d0>
			Rx_frame_state = s_Rxdata5;
 81a:	85 e0       	ldi	r24, 0x05	; 5
 81c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 820:	60 c0       	rjmp	.+192    	; 0x8e2 <__vector_18+0x290>
			}else{
			mcp2515_send_message(&CANTX_buffer);
 822:	8e e0       	ldi	r24, 0x0E	; 14
 824:	91 e0       	ldi	r25, 0x01	; 1
 826:	0e 94 28 02 	call	0x450	; 0x450 <mcp2515_send_message>
			receive_buff = 0;
			Rx_frame_state = s_RxStart;
 82a:	80 e1       	ldi	r24, 0x10	; 16
 82c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 830:	58 c0       	rjmp	.+176    	; 0x8e2 <__vector_18+0x290>
		}
		break;
		case s_Rxdata5 ://data5
		CANTX_buffer.data[4] = receive_buff;
 832:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <CANTX_buffer+0x7>
		if(Rx_frame_state < CANTX_buffer.header.length){
 836:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 83a:	30 e0       	ldi	r19, 0x00	; 0
 83c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <CANTX_buffer+0x2>
 840:	86 95       	lsr	r24
 842:	8f 70       	andi	r24, 0x0F	; 15
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	28 17       	cp	r18, r24
 848:	39 07       	cpc	r19, r25
 84a:	24 f4       	brge	.+8      	; 0x854 <__vector_18+0x202>
			Rx_frame_state = s_Rxdata6;
 84c:	86 e0       	ldi	r24, 0x06	; 6
 84e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 852:	47 c0       	rjmp	.+142    	; 0x8e2 <__vector_18+0x290>
			}else{
			mcp2515_send_message(&CANTX_buffer);
 854:	8e e0       	ldi	r24, 0x0E	; 14
 856:	91 e0       	ldi	r25, 0x01	; 1
 858:	0e 94 28 02 	call	0x450	; 0x450 <mcp2515_send_message>
			receive_buff = 0;
			Rx_frame_state = s_RxStart;
 85c:	80 e1       	ldi	r24, 0x10	; 16
 85e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 862:	3f c0       	rjmp	.+126    	; 0x8e2 <__vector_18+0x290>
		}
		break;
		case s_Rxdata6 ://data6
		CANTX_buffer.data[5] = receive_buff;
 864:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <CANTX_buffer+0x8>
		if(Rx_frame_state < CANTX_buffer.header.length){
 868:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 86c:	30 e0       	ldi	r19, 0x00	; 0
 86e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <CANTX_buffer+0x2>
 872:	86 95       	lsr	r24
 874:	8f 70       	andi	r24, 0x0F	; 15
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	28 17       	cp	r18, r24
 87a:	39 07       	cpc	r19, r25
 87c:	24 f4       	brge	.+8      	; 0x886 <__vector_18+0x234>
			Rx_frame_state = s_Rxdata7;
 87e:	87 e0       	ldi	r24, 0x07	; 7
 880:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 884:	2e c0       	rjmp	.+92     	; 0x8e2 <__vector_18+0x290>
			}else{
			mcp2515_send_message(&CANTX_buffer);
 886:	8e e0       	ldi	r24, 0x0E	; 14
 888:	91 e0       	ldi	r25, 0x01	; 1
 88a:	0e 94 28 02 	call	0x450	; 0x450 <mcp2515_send_message>
			receive_buff = 0;
			Rx_frame_state = s_RxStart;
 88e:	80 e1       	ldi	r24, 0x10	; 16
 890:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 894:	26 c0       	rjmp	.+76     	; 0x8e2 <__vector_18+0x290>
		}
		break;
		case s_Rxdata7 ://data7
		CANTX_buffer.data[6] = receive_buff;
 896:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <CANTX_buffer+0x9>
		if(Rx_frame_state < CANTX_buffer.header.length){
 89a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 89e:	30 e0       	ldi	r19, 0x00	; 0
 8a0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <CANTX_buffer+0x2>
 8a4:	86 95       	lsr	r24
 8a6:	8f 70       	andi	r24, 0x0F	; 15
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	28 17       	cp	r18, r24
 8ac:	39 07       	cpc	r19, r25
 8ae:	24 f4       	brge	.+8      	; 0x8b8 <__vector_18+0x266>
			Rx_frame_state = s_Rxdata8;
 8b0:	88 e0       	ldi	r24, 0x08	; 8
 8b2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 8b6:	15 c0       	rjmp	.+42     	; 0x8e2 <__vector_18+0x290>
			}else{
			mcp2515_send_message(&CANTX_buffer);
 8b8:	8e e0       	ldi	r24, 0x0E	; 14
 8ba:	91 e0       	ldi	r25, 0x01	; 1
 8bc:	0e 94 28 02 	call	0x450	; 0x450 <mcp2515_send_message>
			receive_buff = 0;
			Rx_frame_state = s_RxStart;
 8c0:	80 e1       	ldi	r24, 0x10	; 16
 8c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 8c6:	0d c0       	rjmp	.+26     	; 0x8e2 <__vector_18+0x290>
		}
		break;
		case s_Rxdata8 ://data8
		CANTX_buffer.data[7] = receive_buff;
 8c8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <CANTX_buffer+0xa>
		mcp2515_send_message(&CANTX_buffer);
 8cc:	8e e0       	ldi	r24, 0x0E	; 14
 8ce:	91 e0       	ldi	r25, 0x01	; 1
 8d0:	0e 94 28 02 	call	0x450	; 0x450 <mcp2515_send_message>
		receive_buff = 0;
		Rx_frame_state = s_RxStart;
 8d4:	80 e1       	ldi	r24, 0x10	; 16
 8d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
		break;
 8da:	03 c0       	rjmp	.+6      	; 0x8e2 <__vector_18+0x290>
		default : Rx_frame_state = s_RxStart;
 8dc:	80 e1       	ldi	r24, 0x10	; 16
 8de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
		break;
	}
	
 8e2:	ff 91       	pop	r31
 8e4:	ef 91       	pop	r30
 8e6:	bf 91       	pop	r27
 8e8:	af 91       	pop	r26
 8ea:	9f 91       	pop	r25
 8ec:	8f 91       	pop	r24
 8ee:	7f 91       	pop	r23
 8f0:	6f 91       	pop	r22
 8f2:	5f 91       	pop	r21
 8f4:	4f 91       	pop	r20
 8f6:	3f 91       	pop	r19
 8f8:	2f 91       	pop	r18
 8fa:	1f 91       	pop	r17
 8fc:	0f 91       	pop	r16
 8fe:	ff 90       	pop	r15
 900:	ef 90       	pop	r14
 902:	0f 90       	pop	r0
 904:	0f be       	out	0x3f, r0	; 63
 906:	0f 90       	pop	r0
 908:	1f 90       	pop	r1
 90a:	18 95       	reti

0000090c <__tablejump2__>:
 90c:	ee 0f       	add	r30, r30
 90e:	ff 1f       	adc	r31, r31
 910:	05 90       	lpm	r0, Z+
 912:	f4 91       	lpm	r31, Z
 914:	e0 2d       	mov	r30, r0
 916:	09 94       	ijmp

00000918 <_exit>:
 918:	f8 94       	cli

0000091a <__stop_program>:
 91a:	ff cf       	rjmp	.-2      	; 0x91a <__stop_program>
