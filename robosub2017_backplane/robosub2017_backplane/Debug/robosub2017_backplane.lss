
robosub2017_backplane.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00000eb6  00000f4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800138  00800138  00000f82  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f82  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015fe  00000000  00000000  000010c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000376  00000000  00000000  000026c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bac  00000000  00000000  00002a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000043c  00000000  00000000  000035e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008f0  00000000  00000000  00003a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f5e  00000000  00000000  00004310  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000526e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__ctors_end>
   4:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__vector_1>
   8:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
   c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  10:	0c 94 10 04 	jmp	0x820	; 0x820 <__vector_4>
  14:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  18:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  1c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  20:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  24:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  28:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  2c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  30:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  34:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  38:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  3c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  40:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  44:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  48:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__vector_18>
  4c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  50:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  54:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <__vector_21>
  58:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  5c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  60:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  64:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  68:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  6c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  70:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  74:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  78:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  7c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  80:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  84:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  88:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  8c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  90:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  94:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  98:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  9c:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  a0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  a4:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  a8:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  ac:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  b0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__bad_interrupt>
  b4:	1e 06       	cpc	r1, r30
  b6:	3a 06       	cpc	r3, r26
  b8:	56 06       	cpc	r5, r22
  ba:	72 06       	cpc	r7, r18
  bc:	8e 06       	cpc	r8, r30
  be:	aa 06       	cpc	r10, r26
  c0:	c6 06       	cpc	r12, r22
  c2:	e2 06       	cpc	r14, r18
  c4:	ef 06       	cpc	r14, r31
  c6:	ef 06       	cpc	r14, r31
  c8:	ef 06       	cpc	r14, r31
  ca:	ef 06       	cpc	r14, r31
  cc:	ef 06       	cpc	r14, r31
  ce:	ef 06       	cpc	r14, r31
  d0:	ef 06       	cpc	r14, r31
  d2:	cb 05       	cpc	r28, r11
  d4:	ef 06       	cpc	r14, r31
  d6:	ef 06       	cpc	r14, r31
  d8:	ef 06       	cpc	r14, r31
  da:	ef 06       	cpc	r14, r31
  dc:	ef 06       	cpc	r14, r31
  de:	ef 06       	cpc	r14, r31
  e0:	ef 06       	cpc	r14, r31
  e2:	ef 06       	cpc	r14, r31
  e4:	ef 06       	cpc	r14, r31
  e6:	ef 06       	cpc	r14, r31
  e8:	ef 06       	cpc	r14, r31
  ea:	ef 06       	cpc	r14, r31
  ec:	ef 06       	cpc	r14, r31
  ee:	ef 06       	cpc	r14, r31
  f0:	ef 06       	cpc	r14, r31
  f2:	e2 05       	cpc	r30, r2
  f4:	ef 06       	cpc	r14, r31
  f6:	ef 06       	cpc	r14, r31
  f8:	ef 06       	cpc	r14, r31
  fa:	ef 06       	cpc	r14, r31
  fc:	ef 06       	cpc	r14, r31
  fe:	ef 06       	cpc	r14, r31
 100:	ef 06       	cpc	r14, r31
 102:	ef 06       	cpc	r14, r31
 104:	ef 06       	cpc	r14, r31
 106:	ef 06       	cpc	r14, r31
 108:	ef 06       	cpc	r14, r31
 10a:	ef 06       	cpc	r14, r31
 10c:	ef 06       	cpc	r14, r31
 10e:	ef 06       	cpc	r14, r31
 110:	ef 06       	cpc	r14, r31
 112:	f5 05       	cpc	r31, r5

00000114 <__ctors_end>:
 114:	11 24       	eor	r1, r1
 116:	1f be       	out	0x3f, r1	; 63
 118:	cf ef       	ldi	r28, 0xFF	; 255
 11a:	d8 e0       	ldi	r29, 0x08	; 8
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	cd bf       	out	0x3d, r28	; 61

00000120 <__do_copy_data>:
 120:	11 e0       	ldi	r17, 0x01	; 1
 122:	a0 e0       	ldi	r26, 0x00	; 0
 124:	b1 e0       	ldi	r27, 0x01	; 1
 126:	e6 eb       	ldi	r30, 0xB6	; 182
 128:	fe e0       	ldi	r31, 0x0E	; 14
 12a:	02 c0       	rjmp	.+4      	; 0x130 <__do_copy_data+0x10>
 12c:	05 90       	lpm	r0, Z+
 12e:	0d 92       	st	X+, r0
 130:	a8 33       	cpi	r26, 0x38	; 56
 132:	b1 07       	cpc	r27, r17
 134:	d9 f7       	brne	.-10     	; 0x12c <__do_copy_data+0xc>

00000136 <__do_clear_bss>:
 136:	21 e0       	ldi	r18, 0x01	; 1
 138:	a8 e3       	ldi	r26, 0x38	; 56
 13a:	b1 e0       	ldi	r27, 0x01	; 1
 13c:	01 c0       	rjmp	.+2      	; 0x140 <.do_clear_bss_start>

0000013e <.do_clear_bss_loop>:
 13e:	1d 92       	st	X+, r1

00000140 <.do_clear_bss_start>:
 140:	a8 35       	cpi	r26, 0x58	; 88
 142:	b2 07       	cpc	r27, r18
 144:	e1 f7       	brne	.-8      	; 0x13e <.do_clear_bss_loop>
 146:	0e 94 57 03 	call	0x6ae	; 0x6ae <main>
 14a:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <_exit>

0000014e <__bad_interrupt>:
 14e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000152 <GPIO_init>:
	while(wordsize != counter)
	{
		USART_Transmit(string[counter]);
		counter++;
	}
}
 152:	52 98       	cbi	0x0a, 2	; 10
 154:	53 9a       	sbi	0x0a, 3	; 10
 156:	54 9a       	sbi	0x0a, 4	; 10
 158:	55 9a       	sbi	0x0a, 5	; 10
 15a:	56 9a       	sbi	0x0a, 6	; 10
 15c:	6a 98       	cbi	0x0d, 2	; 13
 15e:	6b 98       	cbi	0x0d, 3	; 13
 160:	38 98       	cbi	0x07, 0	; 7
 162:	3a 98       	cbi	0x07, 2	; 7
 164:	3b 98       	cbi	0x07, 3	; 7
 166:	08 95       	ret

00000168 <INTERRUPT_init>:
 168:	e8 9a       	sbi	0x1d, 0	; 29
 16a:	e9 e6       	ldi	r30, 0x69	; 105
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	8c 7f       	andi	r24, 0xFC	; 252
 172:	80 83       	st	Z, r24
 174:	e8 e6       	ldi	r30, 0x68	; 104
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	82 60       	ori	r24, 0x02	; 2
 17c:	80 83       	st	Z, r24
 17e:	ec e6       	ldi	r30, 0x6C	; 108
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	8c 60       	ori	r24, 0x0C	; 12
 186:	80 83       	st	Z, r24
 188:	78 94       	sei
 18a:	08 95       	ret

0000018c <ADC_init>:
 18c:	ec e7       	ldi	r30, 0x7C	; 124
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	80 64       	ori	r24, 0x40	; 64
 194:	80 83       	st	Z, r24
 196:	ea e7       	ldi	r30, 0x7A	; 122
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	88 6a       	ori	r24, 0xA8	; 168
 19e:	80 83       	st	Z, r24
 1a0:	08 95       	ret

000001a2 <SPI_masterInit>:
 1a2:	22 9a       	sbi	0x04, 2	; 4
 1a4:	23 9a       	sbi	0x04, 3	; 4
 1a6:	25 9a       	sbi	0x04, 5	; 4
 1a8:	2a 9a       	sbi	0x05, 2	; 5
 1aa:	2b 98       	cbi	0x05, 3	; 5
 1ac:	2d 98       	cbi	0x05, 5	; 5
 1ae:	8c b5       	in	r24, 0x2c	; 44
 1b0:	80 65       	ori	r24, 0x50	; 80
 1b2:	8c bd       	out	0x2c, r24	; 44
 1b4:	8c b5       	in	r24, 0x2c	; 44
 1b6:	83 60       	ori	r24, 0x03	; 3
 1b8:	8c bd       	out	0x2c, r24	; 44
 1ba:	08 95       	ret

000001bc <SPI_txrx>:
 1bc:	8e bd       	out	0x2e, r24	; 46
 1be:	0d b4       	in	r0, 0x2d	; 45
 1c0:	07 fe       	sbrs	r0, 7
 1c2:	fd cf       	rjmp	.-6      	; 0x1be <SPI_txrx+0x2>
 1c4:	87 ec       	ldi	r24, 0xC7	; 199
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <SPI_txrx+0xc>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <SPI_txrx+0x12>
 1ce:	00 00       	nop
 1d0:	8e b5       	in	r24, 0x2e	; 46
 1d2:	08 95       	ret

000001d4 <mcp2515_write_register>:
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	d8 2f       	mov	r29, r24
 1da:	c6 2f       	mov	r28, r22
 1dc:	2a 98       	cbi	0x05, 2	; 5
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 1e4:	8d 2f       	mov	r24, r29
 1e6:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 1ea:	8c 2f       	mov	r24, r28
 1ec:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 1f0:	2a 9a       	sbi	0x05, 2	; 5
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <mcp2515_read_register>:
 1f8:	cf 93       	push	r28
 1fa:	c8 2f       	mov	r28, r24
 1fc:	2a 98       	cbi	0x05, 2	; 5
 1fe:	83 e0       	ldi	r24, 0x03	; 3
 200:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 204:	8c 2f       	mov	r24, r28
 206:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 20a:	8f ef       	ldi	r24, 0xFF	; 255
 20c:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 210:	2a 9a       	sbi	0x05, 2	; 5
 212:	cf 91       	pop	r28
 214:	08 95       	ret

00000216 <mcp2515_bit_modify>:
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	18 2f       	mov	r17, r24
 21e:	d6 2f       	mov	r29, r22
 220:	c4 2f       	mov	r28, r20
 222:	2a 98       	cbi	0x05, 2	; 5
 224:	85 e0       	ldi	r24, 0x05	; 5
 226:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 22a:	81 2f       	mov	r24, r17
 22c:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 230:	8d 2f       	mov	r24, r29
 232:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 236:	8c 2f       	mov	r24, r28
 238:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 23c:	2a 9a       	sbi	0x05, 2	; 5
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	1f 91       	pop	r17
 244:	08 95       	ret

00000246 <mcp2515_read_status>:
 246:	2a 98       	cbi	0x05, 2	; 5
 248:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 24c:	8f ef       	ldi	r24, 0xFF	; 255
 24e:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 252:	2a 9a       	sbi	0x05, 2	; 5
 254:	08 95       	ret

00000256 <mcp2515_init>:
 256:	cf 93       	push	r28
 258:	c8 2f       	mov	r28, r24
 25a:	2a 98       	cbi	0x05, 2	; 5
 25c:	80 ec       	ldi	r24, 0xC0	; 192
 25e:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 262:	2a 9a       	sbi	0x05, 2	; 5
 264:	8a e6       	ldi	r24, 0x6A	; 106
 266:	8a 95       	dec	r24
 268:	f1 f7       	brne	.-4      	; 0x266 <mcp2515_init+0x10>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <mcp2515_init+0x16>
 26c:	2a 98       	cbi	0x05, 2	; 5
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 274:	88 e2       	ldi	r24, 0x28	; 40
 276:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 280:	80 e9       	ldi	r24, 0x90	; 144
 282:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 286:	8c 2f       	mov	r24, r28
 288:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 28c:	83 e0       	ldi	r24, 0x03	; 3
 28e:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 292:	2a 9a       	sbi	0x05, 2	; 5
 294:	8a e2       	ldi	r24, 0x2A	; 42
 296:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <mcp2515_read_register>
 29a:	8c 17       	cp	r24, r28
 29c:	19 f0       	breq	.+6      	; 0x2a4 <mcp2515_init+0x4e>
 29e:	5e 9a       	sbi	0x0b, 6	; 11
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	7e c0       	rjmp	.+252    	; 0x3a0 <mcp2515_init+0x14a>
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	8c e0       	ldi	r24, 0x0C	; 12
 2a8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <mcp2515_write_register>
 2ac:	60 e0       	ldi	r22, 0x00	; 0
 2ae:	8d e0       	ldi	r24, 0x0D	; 13
 2b0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <mcp2515_write_register>
 2b4:	2a 98       	cbi	0x05, 2	; 5
 2b6:	82 e0       	ldi	r24, 0x02	; 2
 2b8:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 2bc:	80 e2       	ldi	r24, 0x20	; 32
 2be:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 2c8:	80 ee       	ldi	r24, 0xE0	; 224
 2ca:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 2ce:	2a 9a       	sbi	0x05, 2	; 5
 2d0:	2a 98       	cbi	0x05, 2	; 5
 2d2:	82 e0       	ldi	r24, 0x02	; 2
 2d4:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 2d8:	84 e2       	ldi	r24, 0x24	; 36
 2da:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 2e4:	80 ee       	ldi	r24, 0xE0	; 224
 2e6:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 2ea:	2a 9a       	sbi	0x05, 2	; 5
 2ec:	2a 98       	cbi	0x05, 2	; 5
 2ee:	82 e0       	ldi	r24, 0x02	; 2
 2f0:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 306:	2a 9a       	sbi	0x05, 2	; 5
 308:	2a 98       	cbi	0x05, 2	; 5
 30a:	82 e0       	ldi	r24, 0x02	; 2
 30c:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 310:	84 e0       	ldi	r24, 0x04	; 4
 312:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 322:	2a 9a       	sbi	0x05, 2	; 5
 324:	2a 98       	cbi	0x05, 2	; 5
 326:	82 e0       	ldi	r24, 0x02	; 2
 328:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 32c:	88 e0       	ldi	r24, 0x08	; 8
 32e:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 33e:	2a 9a       	sbi	0x05, 2	; 5
 340:	2a 98       	cbi	0x05, 2	; 5
 342:	82 e0       	ldi	r24, 0x02	; 2
 344:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 348:	80 e1       	ldi	r24, 0x10	; 16
 34a:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 35a:	2a 9a       	sbi	0x05, 2	; 5
 35c:	2a 98       	cbi	0x05, 2	; 5
 35e:	82 e0       	ldi	r24, 0x02	; 2
 360:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 364:	84 e1       	ldi	r24, 0x14	; 20
 366:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 376:	2a 9a       	sbi	0x05, 2	; 5
 378:	2a 98       	cbi	0x05, 2	; 5
 37a:	82 e0       	ldi	r24, 0x02	; 2
 37c:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 380:	88 e1       	ldi	r24, 0x18	; 24
 382:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 392:	2a 9a       	sbi	0x05, 2	; 5
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	8f e0       	ldi	r24, 0x0F	; 15
 398:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <mcp2515_write_register>
 39c:	5e 98       	cbi	0x0b, 6	; 11
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	cf 91       	pop	r28
 3a2:	08 95       	ret

000003a4 <mcp2515_get_message>:
 3a4:	cf 92       	push	r12
 3a6:	df 92       	push	r13
 3a8:	ef 92       	push	r14
 3aa:	ff 92       	push	r15
 3ac:	0f 93       	push	r16
 3ae:	1f 93       	push	r17
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
 3b4:	1f 92       	push	r1
 3b6:	cd b7       	in	r28, 0x3d	; 61
 3b8:	de b7       	in	r29, 0x3e	; 62
 3ba:	6c 01       	movw	r12, r24
 3bc:	80 eb       	ldi	r24, 0xB0	; 176
 3be:	0e 94 23 01 	call	0x246	; 0x246 <mcp2515_read_status>
 3c2:	89 83       	std	Y+1, r24	; 0x01
 3c4:	99 81       	ldd	r25, Y+1	; 0x01
 3c6:	89 2f       	mov	r24, r25
 3c8:	80 74       	andi	r24, 0x40	; 64
 3ca:	96 fd       	sbrc	r25, 6
 3cc:	06 c0       	rjmp	.+12     	; 0x3da <mcp2515_get_message+0x36>
 3ce:	99 81       	ldd	r25, Y+1	; 0x01
 3d0:	99 23       	and	r25, r25
 3d2:	0c f0       	brlt	.+2      	; 0x3d6 <mcp2515_get_message+0x32>
 3d4:	5e c0       	rjmp	.+188    	; 0x492 <__FUSE_REGION_LENGTH__+0x92>
 3d6:	84 e9       	ldi	r24, 0x94	; 148
 3d8:	01 c0       	rjmp	.+2      	; 0x3dc <mcp2515_get_message+0x38>
 3da:	80 e9       	ldi	r24, 0x90	; 144
 3dc:	2a 98       	cbi	0x05, 2	; 5
 3de:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 3e2:	8f ef       	ldi	r24, 0xFF	; 255
 3e4:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 3e8:	28 e0       	ldi	r18, 0x08	; 8
 3ea:	82 9f       	mul	r24, r18
 3ec:	c0 01       	movw	r24, r0
 3ee:	11 24       	eor	r1, r1
 3f0:	f6 01       	movw	r30, r12
 3f2:	91 83       	std	Z+1, r25	; 0x01
 3f4:	80 83       	st	Z, r24
 3f6:	8f ef       	ldi	r24, 0xFF	; 255
 3f8:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 3fc:	28 2f       	mov	r18, r24
 3fe:	22 95       	swap	r18
 400:	26 95       	lsr	r18
 402:	27 70       	andi	r18, 0x07	; 7
 404:	f6 01       	movw	r30, r12
 406:	80 81       	ld	r24, Z
 408:	91 81       	ldd	r25, Z+1	; 0x01
 40a:	82 2b       	or	r24, r18
 40c:	91 83       	std	Z+1, r25	; 0x01
 40e:	80 83       	st	Z, r24
 410:	8f ef       	ldi	r24, 0xFF	; 255
 412:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 416:	8f ef       	ldi	r24, 0xFF	; 255
 418:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 41c:	8f ef       	ldi	r24, 0xFF	; 255
 41e:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 422:	98 2f       	mov	r25, r24
 424:	9f 70       	andi	r25, 0x0F	; 15
 426:	29 2f       	mov	r18, r25
 428:	22 0f       	add	r18, r18
 42a:	f6 01       	movw	r30, r12
 42c:	82 81       	ldd	r24, Z+2	; 0x02
 42e:	81 7e       	andi	r24, 0xE1	; 225
 430:	82 2b       	or	r24, r18
 432:	82 83       	std	Z+2, r24	; 0x02
 434:	29 81       	ldd	r18, Y+1	; 0x01
 436:	23 fb       	bst	r18, 3
 438:	22 27       	eor	r18, r18
 43a:	20 f9       	bld	r18, 0
 43c:	20 fb       	bst	r18, 0
 43e:	80 f9       	bld	r24, 0
 440:	82 83       	std	Z+2, r24	; 0x02
 442:	99 23       	and	r25, r25
 444:	a1 f0       	breq	.+40     	; 0x46e <__FUSE_REGION_LENGTH__+0x6e>
 446:	86 01       	movw	r16, r12
 448:	0d 5f       	subi	r16, 0xFD	; 253
 44a:	1f 4f       	sbci	r17, 0xFF	; 255
 44c:	91 50       	subi	r25, 0x01	; 1
 44e:	e9 2e       	mov	r14, r25
 450:	f1 2c       	mov	r15, r1
 452:	f4 e0       	ldi	r31, 0x04	; 4
 454:	ef 0e       	add	r14, r31
 456:	f1 1c       	adc	r15, r1
 458:	ec 0c       	add	r14, r12
 45a:	fd 1c       	adc	r15, r13
 45c:	8f ef       	ldi	r24, 0xFF	; 255
 45e:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 462:	f8 01       	movw	r30, r16
 464:	81 93       	st	Z+, r24
 466:	8f 01       	movw	r16, r30
 468:	ee 15       	cp	r30, r14
 46a:	ff 05       	cpc	r31, r15
 46c:	b9 f7       	brne	.-18     	; 0x45c <__FUSE_REGION_LENGTH__+0x5c>
 46e:	2a 9a       	sbi	0x05, 2	; 5
 470:	89 81       	ldd	r24, Y+1	; 0x01
 472:	86 ff       	sbrs	r24, 6
 474:	06 c0       	rjmp	.+12     	; 0x482 <__FUSE_REGION_LENGTH__+0x82>
 476:	40 e0       	ldi	r20, 0x00	; 0
 478:	61 e0       	ldi	r22, 0x01	; 1
 47a:	8c e2       	ldi	r24, 0x2C	; 44
 47c:	0e 94 0b 01 	call	0x216	; 0x216 <mcp2515_bit_modify>
 480:	05 c0       	rjmp	.+10     	; 0x48c <__FUSE_REGION_LENGTH__+0x8c>
 482:	40 e0       	ldi	r20, 0x00	; 0
 484:	62 e0       	ldi	r22, 0x02	; 2
 486:	8c e2       	ldi	r24, 0x2C	; 44
 488:	0e 94 0b 01 	call	0x216	; 0x216 <mcp2515_bit_modify>
 48c:	89 81       	ldd	r24, Y+1	; 0x01
 48e:	87 70       	andi	r24, 0x07	; 7
 490:	8f 5f       	subi	r24, 0xFF	; 255
 492:	0f 90       	pop	r0
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	1f 91       	pop	r17
 49a:	0f 91       	pop	r16
 49c:	ff 90       	pop	r15
 49e:	ef 90       	pop	r14
 4a0:	df 90       	pop	r13
 4a2:	cf 90       	pop	r12
 4a4:	08 95       	ret

000004a6 <mcp2515_send_message>:
 4a6:	bf 92       	push	r11
 4a8:	cf 92       	push	r12
 4aa:	df 92       	push	r13
 4ac:	ef 92       	push	r14
 4ae:	ff 92       	push	r15
 4b0:	0f 93       	push	r16
 4b2:	1f 93       	push	r17
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
 4b8:	1f 92       	push	r1
 4ba:	cd b7       	in	r28, 0x3d	; 61
 4bc:	de b7       	in	r29, 0x3e	; 62
 4be:	6c 01       	movw	r12, r24
 4c0:	80 ea       	ldi	r24, 0xA0	; 160
 4c2:	0e 94 23 01 	call	0x246	; 0x246 <mcp2515_read_status>
 4c6:	89 83       	std	Y+1, r24	; 0x01
 4c8:	89 81       	ldd	r24, Y+1	; 0x01
 4ca:	82 ff       	sbrs	r24, 2
 4cc:	0a c0       	rjmp	.+20     	; 0x4e2 <mcp2515_send_message+0x3c>
 4ce:	89 81       	ldd	r24, Y+1	; 0x01
 4d0:	84 ff       	sbrs	r24, 4
 4d2:	09 c0       	rjmp	.+18     	; 0x4e6 <mcp2515_send_message+0x40>
 4d4:	89 81       	ldd	r24, Y+1	; 0x01
 4d6:	86 fd       	sbrc	r24, 6
 4d8:	5d c0       	rjmp	.+186    	; 0x594 <mcp2515_send_message+0xee>
 4da:	68 94       	set
 4dc:	bb 24       	eor	r11, r11
 4de:	b2 f8       	bld	r11, 2
 4e0:	05 c0       	rjmp	.+10     	; 0x4ec <mcp2515_send_message+0x46>
 4e2:	b1 2c       	mov	r11, r1
 4e4:	03 c0       	rjmp	.+6      	; 0x4ec <mcp2515_send_message+0x46>
 4e6:	68 94       	set
 4e8:	bb 24       	eor	r11, r11
 4ea:	b1 f8       	bld	r11, 1
 4ec:	2a 98       	cbi	0x05, 2	; 5
 4ee:	8b 2d       	mov	r24, r11
 4f0:	80 64       	ori	r24, 0x40	; 64
 4f2:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 4f6:	f6 01       	movw	r30, r12
 4f8:	80 81       	ld	r24, Z
 4fa:	91 81       	ldd	r25, Z+1	; 0x01
 4fc:	96 95       	lsr	r25
 4fe:	87 95       	ror	r24
 500:	96 95       	lsr	r25
 502:	87 95       	ror	r24
 504:	96 95       	lsr	r25
 506:	87 95       	ror	r24
 508:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 50c:	f6 01       	movw	r30, r12
 50e:	80 81       	ld	r24, Z
 510:	82 95       	swap	r24
 512:	88 0f       	add	r24, r24
 514:	80 7e       	andi	r24, 0xE0	; 224
 516:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 526:	f6 01       	movw	r30, r12
 528:	82 81       	ldd	r24, Z+2	; 0x02
 52a:	f8 2e       	mov	r15, r24
 52c:	f6 94       	lsr	r15
 52e:	ff 2d       	mov	r31, r15
 530:	ff 70       	andi	r31, 0x0F	; 15
 532:	ff 2e       	mov	r15, r31
 534:	80 ff       	sbrs	r24, 0
 536:	05 c0       	rjmp	.+10     	; 0x542 <mcp2515_send_message+0x9c>
 538:	8f 2f       	mov	r24, r31
 53a:	80 64       	ori	r24, 0x40	; 64
 53c:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 540:	18 c0       	rjmp	.+48     	; 0x572 <mcp2515_send_message+0xcc>
 542:	8f 2f       	mov	r24, r31
 544:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 548:	ff 20       	and	r15, r15
 54a:	99 f0       	breq	.+38     	; 0x572 <mcp2515_send_message+0xcc>
 54c:	86 01       	movw	r16, r12
 54e:	0d 5f       	subi	r16, 0xFD	; 253
 550:	1f 4f       	sbci	r17, 0xFF	; 255
 552:	fa 94       	dec	r15
 554:	ef 2c       	mov	r14, r15
 556:	f1 2c       	mov	r15, r1
 558:	84 e0       	ldi	r24, 0x04	; 4
 55a:	e8 0e       	add	r14, r24
 55c:	f1 1c       	adc	r15, r1
 55e:	ec 0c       	add	r14, r12
 560:	fd 1c       	adc	r15, r13
 562:	f8 01       	movw	r30, r16
 564:	81 91       	ld	r24, Z+
 566:	8f 01       	movw	r16, r30
 568:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 56c:	0e 15       	cp	r16, r14
 56e:	1f 05       	cpc	r17, r15
 570:	c1 f7       	brne	.-16     	; 0x562 <mcp2515_send_message+0xbc>
 572:	2a 9a       	sbi	0x05, 2	; 5
 574:	f5 e0       	ldi	r31, 0x05	; 5
 576:	fa 95       	dec	r31
 578:	f1 f7       	brne	.-4      	; 0x576 <mcp2515_send_message+0xd0>
 57a:	00 00       	nop
 57c:	2a 98       	cbi	0x05, 2	; 5
 57e:	b1 10       	cpse	r11, r1
 580:	02 c0       	rjmp	.+4      	; 0x586 <mcp2515_send_message+0xe0>
 582:	bb 24       	eor	r11, r11
 584:	b3 94       	inc	r11
 586:	8b 2d       	mov	r24, r11
 588:	80 68       	ori	r24, 0x80	; 128
 58a:	0e 94 de 00 	call	0x1bc	; 0x1bc <SPI_txrx>
 58e:	2a 9a       	sbi	0x05, 2	; 5
 590:	8b 2d       	mov	r24, r11
 592:	01 c0       	rjmp	.+2      	; 0x596 <mcp2515_send_message+0xf0>
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	0f 90       	pop	r0
 598:	df 91       	pop	r29
 59a:	cf 91       	pop	r28
 59c:	1f 91       	pop	r17
 59e:	0f 91       	pop	r16
 5a0:	ff 90       	pop	r15
 5a2:	ef 90       	pop	r14
 5a4:	df 90       	pop	r13
 5a6:	cf 90       	pop	r12
 5a8:	bf 90       	pop	r11
 5aa:	08 95       	ret

000005ac <USART_Init>:
 5ac:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 5b0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 5b4:	e1 ec       	ldi	r30, 0xC1	; 193
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	80 81       	ld	r24, Z
 5ba:	88 69       	ori	r24, 0x98	; 152
 5bc:	80 83       	st	Z, r24
 5be:	e2 ec       	ldi	r30, 0xC2	; 194
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	80 81       	ld	r24, Z
 5c4:	86 60       	ori	r24, 0x06	; 6
 5c6:	80 83       	st	Z, r24
 5c8:	08 95       	ret

000005ca <USART_Receive>:
 5ca:	e0 ec       	ldi	r30, 0xC0	; 192
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	80 81       	ld	r24, Z
 5d0:	88 23       	and	r24, r24
 5d2:	ec f7       	brge	.-6      	; 0x5ce <USART_Receive+0x4>
 5d4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 5d8:	08 95       	ret

000005da <USART_Transmit>:
 5da:	e0 ec       	ldi	r30, 0xC0	; 192
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	90 81       	ld	r25, Z
 5e0:	95 ff       	sbrs	r25, 5
 5e2:	fd cf       	rjmp	.-6      	; 0x5de <USART_Transmit+0x4>
 5e4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 5e8:	08 95       	ret

000005ea <USART_CAN_TX>:
/******************************************************************************
	USART CAN FRAME transmit|
		transmits a full CAN frame struct(tCAN) over UART
******************************************************************************/
void USART_CAN_TX(tCAN data)
{
 5ea:	cf 92       	push	r12
 5ec:	df 92       	push	r13
 5ee:	ef 92       	push	r14
 5f0:	ff 92       	push	r15
 5f2:	0f 93       	push	r16
 5f4:	1f 93       	push	r17
 5f6:	cf 93       	push	r28
 5f8:	df 93       	push	r29
 5fa:	cd b7       	in	r28, 0x3d	; 61
 5fc:	de b7       	in	r29, 0x3e	; 62
 5fe:	2b 97       	sbiw	r28, 0x0b	; 11
 600:	0f b6       	in	r0, 0x3f	; 63
 602:	f8 94       	cli
 604:	de bf       	out	0x3e, r29	; 62
 606:	0f be       	out	0x3f, r0	; 63
 608:	cd bf       	out	0x3d, r28	; 61
 60a:	e9 82       	std	Y+1, r14	; 0x01
 60c:	fa 82       	std	Y+2, r15	; 0x02
 60e:	0b 83       	std	Y+3, r16	; 0x03
 610:	1c 83       	std	Y+4, r17	; 0x04
 612:	2d 83       	std	Y+5, r18	; 0x05
 614:	3e 83       	std	Y+6, r19	; 0x06
 616:	4f 83       	std	Y+7, r20	; 0x07
 618:	58 87       	std	Y+8, r21	; 0x08
 61a:	69 87       	std	Y+9, r22	; 0x09
 61c:	7a 87       	std	Y+10, r23	; 0x0a
 61e:	8b 87       	std	Y+11, r24	; 0x0b
 620:	c9 80       	ldd	r12, Y+1	; 0x01
 622:	da 80       	ldd	r13, Y+2	; 0x02
 624:	06 95       	lsr	r16
 626:	0f 70       	andi	r16, 0x0F	; 15
	USART_Transmit(start_byte); //start_byte
 628:	8e ee       	ldi	r24, 0xEE	; 238
 62a:	0e 94 ed 02 	call	0x5da	; 0x5da <USART_Transmit>
	USART_Transmit(data.id >> 3); //CanID_High
 62e:	c6 01       	movw	r24, r12
 630:	96 95       	lsr	r25
 632:	87 95       	ror	r24
 634:	96 95       	lsr	r25
 636:	87 95       	ror	r24
 638:	96 95       	lsr	r25
 63a:	87 95       	ror	r24
 63c:	0e 94 ed 02 	call	0x5da	; 0x5da <USART_Transmit>
	
	//CanID_Low, RTR, Length
	USART_Transmit((data.id << 5) | (data.header.rtr <<4) | data.header.length);
 640:	cc 0c       	add	r12, r12
 642:	cc 0c       	add	r12, r12
 644:	cc 0c       	add	r12, r12
 646:	cc 0c       	add	r12, r12
 648:	cc 0c       	add	r12, r12
 64a:	8b 81       	ldd	r24, Y+3	; 0x03
 64c:	81 70       	andi	r24, 0x01	; 1
 64e:	82 95       	swap	r24
 650:	80 7f       	andi	r24, 0xF0	; 240
 652:	8c 29       	or	r24, r12
 654:	80 2b       	or	r24, r16
 656:	0e 94 ed 02 	call	0x5da	; 0x5da <USART_Transmit>
	
	//read back all data received.
	if(!data.header.rtr){
 65a:	8b 81       	ldd	r24, Y+3	; 0x03
 65c:	80 fd       	sbrc	r24, 0
 65e:	17 c0       	rjmp	.+46     	; 0x68e <USART_CAN_TX+0xa4>
		for (uint8_t t = 0; t < data.header.length;t++) {
 660:	e0 2e       	mov	r14, r16
 662:	f1 2c       	mov	r15, r1
 664:	1e 14       	cp	r1, r14
 666:	1f 04       	cpc	r1, r15
 668:	94 f4       	brge	.+36     	; 0x68e <USART_CAN_TX+0xa4>
 66a:	80 e0       	ldi	r24, 0x00	; 0
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	10 e0       	ldi	r17, 0x00	; 0
			USART_Transmit(data.data[t]); //data
 670:	e4 e0       	ldi	r30, 0x04	; 4
 672:	f0 e0       	ldi	r31, 0x00	; 0
 674:	ec 0f       	add	r30, r28
 676:	fd 1f       	adc	r31, r29
 678:	e8 0f       	add	r30, r24
 67a:	f9 1f       	adc	r31, r25
 67c:	80 81       	ld	r24, Z
 67e:	0e 94 ed 02 	call	0x5da	; 0x5da <USART_Transmit>
	//CanID_Low, RTR, Length
	USART_Transmit((data.id << 5) | (data.header.rtr <<4) | data.header.length);
	
	//read back all data received.
	if(!data.header.rtr){
		for (uint8_t t = 0; t < data.header.length;t++) {
 682:	1f 5f       	subi	r17, 0xFF	; 255
 684:	81 2f       	mov	r24, r17
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	8e 15       	cp	r24, r14
 68a:	9f 05       	cpc	r25, r15
 68c:	8c f3       	brlt	.-30     	; 0x670 <USART_CAN_TX+0x86>
			USART_Transmit(data.data[t]); //data
		}
	}
	TOGGLE(LED1);
 68e:	4b 9a       	sbi	0x09, 3	; 9
}
 690:	2b 96       	adiw	r28, 0x0b	; 11
 692:	0f b6       	in	r0, 0x3f	; 63
 694:	f8 94       	cli
 696:	de bf       	out	0x3e, r29	; 62
 698:	0f be       	out	0x3f, r0	; 63
 69a:	cd bf       	out	0x3d, r28	; 61
 69c:	df 91       	pop	r29
 69e:	cf 91       	pop	r28
 6a0:	1f 91       	pop	r17
 6a2:	0f 91       	pop	r16
 6a4:	ff 90       	pop	r15
 6a6:	ef 90       	pop	r14
 6a8:	df 90       	pop	r13
 6aa:	cf 90       	pop	r12
 6ac:	08 95       	ret

000006ae <main>:
	start of main()|
******************************************************************************/
int main(void)
{
  	//initialization functions
	GPIO_init();
 6ae:	0e 94 a9 00 	call	0x152	; 0x152 <GPIO_init>
	INTERRUPT_init();
 6b2:	0e 94 b4 00 	call	0x168	; 0x168 <INTERRUPT_init>
	ADC_init();
 6b6:	0e 94 c6 00 	call	0x18c	; 0x18c <ADC_init>
	USART_Init(103);//103 sets baud rate at 9600
 6ba:	87 e6       	ldi	r24, 0x67	; 103
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	0e 94 d6 02 	call	0x5ac	; 0x5ac <USART_Init>
	SPI_masterInit();
 6c2:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <SPI_masterInit>
	
	//store current button state
	pinC_change_state = PINC;
 6c6:	86 b1       	in	r24, 0x06	; 6
 6c8:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <pinC_change_state>
	
	//MCP2515 initialization
	if(mcp2515_init(CANSPEED_500)){
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	0e 94 2b 01 	call	0x256	; 0x256 <mcp2515_init>
 6d2:	88 23       	and	r24, r24
 6d4:	21 f0       	breq	.+8      	; 0x6de <main+0x30>
		USART_Transmit(0xFF);
 6d6:	8f ef       	ldi	r24, 0xFF	; 255
 6d8:	0e 94 ed 02 	call	0x5da	; 0x5da <USART_Transmit>
 6dc:	03 c0       	rjmp	.+6      	; 0x6e4 <main+0x36>
	}else
	{
		USART_Transmit(0x00);
 6de:	80 e0       	ldi	r24, 0x00	; 0
 6e0:	0e 94 ed 02 	call	0x5da	; 0x5da <USART_Transmit>
	}	
	
	//start first adc sample
	ADCSRA |= (1<<ADSC); 
 6e4:	ea e7       	ldi	r30, 0x7A	; 122
 6e6:	f0 e0       	ldi	r31, 0x00	; 0
 6e8:	80 81       	ld	r24, Z
 6ea:	80 64       	ori	r24, 0x40	; 64
 6ec:	80 83       	st	Z, r24
	
	while(1)
    {
		if(uart_rx_flag){
			if(CANTX_buffer.id == Read_Request_Backplane_Current.id){
 6ee:	0f 2e       	mov	r0, r31
 6f0:	f6 e4       	ldi	r31, 0x46	; 70
 6f2:	8f 2e       	mov	r8, r31
 6f4:	f1 e0       	ldi	r31, 0x01	; 1
 6f6:	9f 2e       	mov	r9, r31
 6f8:	f0 2d       	mov	r31, r0
 6fa:	0f 2e       	mov	r0, r31
 6fc:	f1 e0       	ldi	r31, 0x01	; 1
 6fe:	af 2e       	mov	r10, r31
 700:	f1 e0       	ldi	r31, 0x01	; 1
 702:	bf 2e       	mov	r11, r31
 704:	f0 2d       	mov	r31, r0
				TOGGLE(LED4);
				
				//matches received ID.  if current request, returns
				//	current data
				//if more cases are required, will convert to a switch-case
				if(CANRX_buffer.id == Read_Request_Backplane_Current.id){
 706:	0f 2e       	mov	r0, r31
 708:	fb e3       	ldi	r31, 0x3B	; 59
 70a:	cf 2e       	mov	r12, r31
 70c:	f1 e0       	ldi	r31, 0x01	; 1
 70e:	df 2e       	mov	r13, r31
 710:	f0 2d       	mov	r31, r0
					mcp2515_send_message(&Read_Request_Backplane_Current);
						//send over can
				}
				CANRX_buffer.id = 0;
				CANRX_buffer.header.rtr = 0;
 712:	cd e3       	ldi	r28, 0x3D	; 61
 714:	d1 e0       	ldi	r29, 0x01	; 1
	//start first adc sample
	ADCSRA |= (1<<ADSC); 
	
	while(1)
    {
		if(uart_rx_flag){
 716:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <uart_rx_flag>
 71a:	88 23       	and	r24, r24
 71c:	19 f1       	breq	.+70     	; 0x764 <main+0xb6>
			if(CANTX_buffer.id == Read_Request_Backplane_Current.id){
 71e:	f4 01       	movw	r30, r8
 720:	20 81       	ld	r18, Z
 722:	31 81       	ldd	r19, Z+1	; 0x01
 724:	f5 01       	movw	r30, r10
 726:	80 81       	ld	r24, Z
 728:	91 81       	ldd	r25, Z+1	; 0x01
 72a:	28 17       	cp	r18, r24
 72c:	39 07       	cpc	r19, r25
 72e:	c1 f4       	brne	.+48     	; 0x760 <main+0xb2>
				USART_CAN_TX(Request_Response_Backplane_Current);
 730:	e0 90 0c 01 	lds	r14, 0x010C	; 0x80010c <Request_Response_Backplane_Current>
 734:	f0 90 0d 01 	lds	r15, 0x010D	; 0x80010d <Request_Response_Backplane_Current+0x1>
 738:	00 91 0e 01 	lds	r16, 0x010E	; 0x80010e <Request_Response_Backplane_Current+0x2>
 73c:	10 91 0f 01 	lds	r17, 0x010F	; 0x80010f <Request_Response_Backplane_Current+0x3>
 740:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <Request_Response_Backplane_Current+0x4>
 744:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <Request_Response_Backplane_Current+0x5>
 748:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <Request_Response_Backplane_Current+0x6>
 74c:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <Request_Response_Backplane_Current+0x7>
 750:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <Request_Response_Backplane_Current+0x8>
 754:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <Request_Response_Backplane_Current+0x9>
 758:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <Request_Response_Backplane_Current+0xa>
 75c:	0e 94 f5 02 	call	0x5ea	; 0x5ea <USART_CAN_TX>
			}
			uart_rx_flag = 0;
 760:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <uart_rx_flag>
		}
		
		//if data received on CAN...
		if(rx_flag){
 764:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <rx_flag>
 768:	88 23       	and	r24, r24
 76a:	a9 f2       	breq	.-86     	; 0x716 <main+0x68>
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE){//disables interrupts
 76c:	7f b6       	in	r7, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 76e:	f8 94       	cli
				USART_CAN_TX(CANRX_buffer);
 770:	e0 90 3b 01 	lds	r14, 0x013B	; 0x80013b <CANRX_buffer>
 774:	f0 90 3c 01 	lds	r15, 0x013C	; 0x80013c <CANRX_buffer+0x1>
 778:	00 91 3d 01 	lds	r16, 0x013D	; 0x80013d <CANRX_buffer+0x2>
 77c:	10 91 3e 01 	lds	r17, 0x013E	; 0x80013e <CANRX_buffer+0x3>
 780:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <CANRX_buffer+0x4>
 784:	30 91 40 01 	lds	r19, 0x0140	; 0x800140 <CANRX_buffer+0x5>
 788:	40 91 41 01 	lds	r20, 0x0141	; 0x800141 <CANRX_buffer+0x6>
 78c:	50 91 42 01 	lds	r21, 0x0142	; 0x800142 <CANRX_buffer+0x7>
 790:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <CANRX_buffer+0x8>
 794:	70 91 44 01 	lds	r23, 0x0144	; 0x800144 <CANRX_buffer+0x9>
 798:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <CANRX_buffer+0xa>
 79c:	0e 94 f5 02 	call	0x5ea	; 0x5ea <USART_CAN_TX>
				TOGGLE(LED4);
 7a0:	4e 9a       	sbi	0x09, 6	; 9
				
				//matches received ID.  if current request, returns
				//	current data
				//if more cases are required, will convert to a switch-case
				if(CANRX_buffer.id == Read_Request_Backplane_Current.id){
 7a2:	f6 01       	movw	r30, r12
 7a4:	20 81       	ld	r18, Z
 7a6:	31 81       	ldd	r19, Z+1	; 0x01
 7a8:	f5 01       	movw	r30, r10
 7aa:	80 81       	ld	r24, Z
 7ac:	91 81       	ldd	r25, Z+1	; 0x01
 7ae:	28 17       	cp	r18, r24
 7b0:	39 07       	cpc	r19, r25
 7b2:	19 f4       	brne	.+6      	; 0x7ba <main+0x10c>
					mcp2515_send_message(&Read_Request_Backplane_Current);
 7b4:	c5 01       	movw	r24, r10
 7b6:	0e 94 53 02 	call	0x4a6	; 0x4a6 <mcp2515_send_message>
						//send over can
				}
				CANRX_buffer.id = 0;
 7ba:	f6 01       	movw	r30, r12
 7bc:	11 82       	std	Z+1, r1	; 0x01
 7be:	10 82       	st	Z, r1
				CANRX_buffer.header.rtr = 0;
 7c0:	98 81       	ld	r25, Y
				CANRX_buffer.header.length = 0;
 7c2:	90 7e       	andi	r25, 0xE0	; 224
 7c4:	98 83       	st	Y, r25
				rx_flag = 0;//clear receive flag
 7c6:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <rx_flag>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 7ca:	7f be       	out	0x3f, r7	; 63
    __asm__ volatile ("" ::: "memory");
 7cc:	a4 cf       	rjmp	.-184    	; 0x716 <main+0x68>

000007ce <__vector_1>:
}

/******************************************************************************
	CAN RECEIVE interrupt on pin PD2|
******************************************************************************/
ISR(INT0_vect){
 7ce:	1f 92       	push	r1
 7d0:	0f 92       	push	r0
 7d2:	0f b6       	in	r0, 0x3f	; 63
 7d4:	0f 92       	push	r0
 7d6:	11 24       	eor	r1, r1
 7d8:	2f 93       	push	r18
 7da:	3f 93       	push	r19
 7dc:	4f 93       	push	r20
 7de:	5f 93       	push	r21
 7e0:	6f 93       	push	r22
 7e2:	7f 93       	push	r23
 7e4:	8f 93       	push	r24
 7e6:	9f 93       	push	r25
 7e8:	af 93       	push	r26
 7ea:	bf 93       	push	r27
 7ec:	ef 93       	push	r30
 7ee:	ff 93       	push	r31
	mcp2515_get_message(&CANRX_buffer);//get canbus message
 7f0:	8b e3       	ldi	r24, 0x3B	; 59
 7f2:	91 e0       	ldi	r25, 0x01	; 1
 7f4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <mcp2515_get_message>
	rx_flag = 1;  //set flag
 7f8:	81 e0       	ldi	r24, 0x01	; 1
 7fa:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <rx_flag>
}
 7fe:	ff 91       	pop	r31
 800:	ef 91       	pop	r30
 802:	bf 91       	pop	r27
 804:	af 91       	pop	r26
 806:	9f 91       	pop	r25
 808:	8f 91       	pop	r24
 80a:	7f 91       	pop	r23
 80c:	6f 91       	pop	r22
 80e:	5f 91       	pop	r21
 810:	4f 91       	pop	r20
 812:	3f 91       	pop	r19
 814:	2f 91       	pop	r18
 816:	0f 90       	pop	r0
 818:	0f be       	out	0x3f, r0	; 63
 81a:	0f 90       	pop	r0
 81c:	1f 90       	pop	r1
 81e:	18 95       	reti

00000820 <__vector_4>:

/******************************************************************************
	Pin Change interrupts|
		RUN_EN and KILLSWITCH
******************************************************************************/
ISR(PCINT1_vect){
 820:	1f 92       	push	r1
 822:	0f 92       	push	r0
 824:	0f b6       	in	r0, 0x3f	; 63
 826:	0f 92       	push	r0
 828:	11 24       	eor	r1, r1
 82a:	ef 92       	push	r14
 82c:	ff 92       	push	r15
 82e:	0f 93       	push	r16
 830:	1f 93       	push	r17
 832:	2f 93       	push	r18
 834:	3f 93       	push	r19
 836:	4f 93       	push	r20
 838:	5f 93       	push	r21
 83a:	6f 93       	push	r22
 83c:	7f 93       	push	r23
 83e:	8f 93       	push	r24
 840:	9f 93       	push	r25
 842:	af 93       	push	r26
 844:	bf 93       	push	r27
 846:	cf 93       	push	r28
 848:	ef 93       	push	r30
 84a:	ff 93       	push	r31
	
	uint8_t pin_state_OLD = pinC_change_state;//save previous state
 84c:	c0 91 51 01 	lds	r28, 0x0151	; 0x800151 <pinC_change_state>
	pinC_change_state = PINC;//get new state
 850:	86 b1       	in	r24, 0x06	; 6
 852:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <pinC_change_state>
	
	//if RUN_EN has gone low
	if(!(pinC_change_state & (1<<PINC2))){
 856:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <pinC_change_state>
 85a:	82 fd       	sbrc	r24, 2
 85c:	18 c0       	rjmp	.+48     	; 0x88e <__vector_4+0x6e>
		USART_CAN_TX(CI_Auto);
 85e:	e0 90 17 01 	lds	r14, 0x0117	; 0x800117 <CI_Auto>
 862:	f0 90 18 01 	lds	r15, 0x0118	; 0x800118 <CI_Auto+0x1>
 866:	00 91 19 01 	lds	r16, 0x0119	; 0x800119 <CI_Auto+0x2>
 86a:	10 91 1a 01 	lds	r17, 0x011A	; 0x80011a <CI_Auto+0x3>
 86e:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <CI_Auto+0x4>
 872:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <CI_Auto+0x5>
 876:	40 91 1d 01 	lds	r20, 0x011D	; 0x80011d <CI_Auto+0x6>
 87a:	50 91 1e 01 	lds	r21, 0x011E	; 0x80011e <CI_Auto+0x7>
 87e:	60 91 1f 01 	lds	r22, 0x011F	; 0x80011f <CI_Auto+0x8>
 882:	70 91 20 01 	lds	r23, 0x0120	; 0x800120 <CI_Auto+0x9>
 886:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <CI_Auto+0xa>
 88a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <USART_CAN_TX>
	}
	
	//if KILLSWITCH state has changed
	if((pinC_change_state & (1<<PINC3)) != (pin_state_OLD & (1<<PINC3))){
 88e:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <pinC_change_state>
 892:	c8 27       	eor	r28, r24
 894:	c3 ff       	sbrs	r28, 3
 896:	18 c0       	rjmp	.+48     	; 0x8c8 <__vector_4+0xa8>
		USART_CAN_TX(CI_Kill_Switch);
 898:	e0 90 2d 01 	lds	r14, 0x012D	; 0x80012d <CI_Kill_Switch>
 89c:	f0 90 2e 01 	lds	r15, 0x012E	; 0x80012e <CI_Kill_Switch+0x1>
 8a0:	00 91 2f 01 	lds	r16, 0x012F	; 0x80012f <CI_Kill_Switch+0x2>
 8a4:	10 91 30 01 	lds	r17, 0x0130	; 0x800130 <CI_Kill_Switch+0x3>
 8a8:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <CI_Kill_Switch+0x4>
 8ac:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <CI_Kill_Switch+0x5>
 8b0:	40 91 33 01 	lds	r20, 0x0133	; 0x800133 <CI_Kill_Switch+0x6>
 8b4:	50 91 34 01 	lds	r21, 0x0134	; 0x800134 <CI_Kill_Switch+0x7>
 8b8:	60 91 35 01 	lds	r22, 0x0135	; 0x800135 <CI_Kill_Switch+0x8>
 8bc:	70 91 36 01 	lds	r23, 0x0136	; 0x800136 <CI_Kill_Switch+0x9>
 8c0:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <CI_Kill_Switch+0xa>
 8c4:	0e 94 f5 02 	call	0x5ea	; 0x5ea <USART_CAN_TX>
	}
}
 8c8:	ff 91       	pop	r31
 8ca:	ef 91       	pop	r30
 8cc:	cf 91       	pop	r28
 8ce:	bf 91       	pop	r27
 8d0:	af 91       	pop	r26
 8d2:	9f 91       	pop	r25
 8d4:	8f 91       	pop	r24
 8d6:	7f 91       	pop	r23
 8d8:	6f 91       	pop	r22
 8da:	5f 91       	pop	r21
 8dc:	4f 91       	pop	r20
 8de:	3f 91       	pop	r19
 8e0:	2f 91       	pop	r18
 8e2:	1f 91       	pop	r17
 8e4:	0f 91       	pop	r16
 8e6:	ff 90       	pop	r15
 8e8:	ef 90       	pop	r14
 8ea:	0f 90       	pop	r0
 8ec:	0f be       	out	0x3f, r0	; 63
 8ee:	0f 90       	pop	r0
 8f0:	1f 90       	pop	r1
 8f2:	18 95       	reti

000008f4 <__vector_21>:

/******************************************************************************* 
	 ADC conversion complete ISR|
*******************************************************************************/ 
ISR(ADC_vect){ 
 8f4:	1f 92       	push	r1
 8f6:	0f 92       	push	r0
 8f8:	0f b6       	in	r0, 0x3f	; 63
 8fa:	0f 92       	push	r0
 8fc:	11 24       	eor	r1, r1
 8fe:	4f 92       	push	r4
 900:	5f 92       	push	r5
 902:	6f 92       	push	r6
 904:	7f 92       	push	r7
 906:	8f 92       	push	r8
 908:	9f 92       	push	r9
 90a:	af 92       	push	r10
 90c:	bf 92       	push	r11
 90e:	cf 92       	push	r12
 910:	df 92       	push	r13
 912:	ef 92       	push	r14
 914:	ff 92       	push	r15
 916:	0f 93       	push	r16
 918:	1f 93       	push	r17
 91a:	2f 93       	push	r18
 91c:	3f 93       	push	r19
 91e:	4f 93       	push	r20
 920:	5f 93       	push	r21
 922:	6f 93       	push	r22
 924:	7f 93       	push	r23
 926:	8f 93       	push	r24
 928:	9f 93       	push	r25
 92a:	af 93       	push	r26
 92c:	bf 93       	push	r27
 92e:	ef 93       	push	r30
 930:	ff 93       	push	r31
 932:	cf 93       	push	r28
 934:	df 93       	push	r29
 936:	00 d0       	rcall	.+0      	; 0x938 <__stack+0x39>
 938:	00 d0       	rcall	.+0      	; 0x93a <__stack+0x3b>
 93a:	cd b7       	in	r28, 0x3d	; 61
 93c:	de b7       	in	r29, 0x3e	; 62
	/*
			voltage_sens = {ADC7, ADC6, ADC0} 
			which corresponds to
			voltage_sens = {P6V_SENSE, P24V_SENS, P5V_SENSE} 
	*/
	voltage_sense[adc_select] = ADCL;
 93e:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <__data_end>
 942:	f0 e0       	ldi	r31, 0x00	; 0
 944:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	02 e5       	ldi	r16, 0x52	; 82
 94c:	11 e0       	ldi	r17, 0x01	; 1
 94e:	ee 0f       	add	r30, r30
 950:	ff 1f       	adc	r31, r31
 952:	ee 5a       	subi	r30, 0xAE	; 174
 954:	fe 4f       	sbci	r31, 0xFE	; 254
 956:	91 83       	std	Z+1, r25	; 0x01
 958:	80 83       	st	Z, r24
	voltage_sense[adc_select] |= (uint16_t)(ADCH<<8);
 95a:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 95e:	92 2b       	or	r25, r18
 960:	91 83       	std	Z+1, r25	; 0x01
 962:	80 83       	st	Z, r24
	
	V6_sense = map(voltage_sense[0],0,1023,-125,125);//map to +/-12.5Amps
 964:	d8 01       	movw	r26, r16
 966:	2d 91       	ld	r18, X+
 968:	3c 91       	ld	r19, X
 to control the PWM signal to an ESC controlling a thruster. 
 same function used by the arduino library 
 https://www.arduino.cc/en/Reference/Map 
******************************************************************************/ 
long map(long x, long in_min, long in_max, long out_min, long out_max){ 
 return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min; 
 96a:	aa ef       	ldi	r26, 0xFA	; 250
 96c:	b0 e0       	ldi	r27, 0x00	; 0
 96e:	0e 94 28 07 	call	0xe50	; 0xe50 <__umulhisi3>
 972:	0f 2e       	mov	r0, r31
 974:	88 24       	eor	r8, r8
 976:	8a 94       	dec	r8
 978:	f3 e0       	ldi	r31, 0x03	; 3
 97a:	9f 2e       	mov	r9, r31
 97c:	a1 2c       	mov	r10, r1
 97e:	b1 2c       	mov	r11, r1
 980:	f0 2d       	mov	r31, r0
 982:	a5 01       	movw	r20, r10
 984:	94 01       	movw	r18, r8
 986:	0e 94 03 07 	call	0xe06	; 0xe06 <__divmodsi4>
 98a:	da 01       	movw	r26, r20
 98c:	c9 01       	movw	r24, r18
 98e:	8d 57       	subi	r24, 0x7D	; 125
 990:	91 09       	sbc	r25, r1
 992:	a1 09       	sbc	r26, r1
 994:	b1 09       	sbc	r27, r1
 996:	89 83       	std	Y+1, r24	; 0x01
 998:	9a 83       	std	Y+2, r25	; 0x02
 99a:	ab 83       	std	Y+3, r26	; 0x03
 99c:	bc 83       	std	Y+4, r27	; 0x04
	V24_sense = map(voltage_sense[1],0,1023,-125,125);
 99e:	d8 01       	movw	r26, r16
 9a0:	12 96       	adiw	r26, 0x02	; 2
 9a2:	2d 91       	ld	r18, X+
 9a4:	3c 91       	ld	r19, X
 9a6:	13 97       	sbiw	r26, 0x03	; 3
 9a8:	aa ef       	ldi	r26, 0xFA	; 250
 9aa:	b0 e0       	ldi	r27, 0x00	; 0
 9ac:	0e 94 28 07 	call	0xe50	; 0xe50 <__umulhisi3>
 9b0:	a5 01       	movw	r20, r10
 9b2:	94 01       	movw	r18, r8
 9b4:	0e 94 03 07 	call	0xe06	; 0xe06 <__divmodsi4>
 9b8:	29 01       	movw	r4, r18
 9ba:	3a 01       	movw	r6, r20
 9bc:	bd e7       	ldi	r27, 0x7D	; 125
 9be:	4b 1a       	sub	r4, r27
 9c0:	51 08       	sbc	r5, r1
 9c2:	61 08       	sbc	r6, r1
 9c4:	71 08       	sbc	r7, r1
 9c6:	d4 2c       	mov	r13, r4
	V5_sense = map(voltage_sense[2],0,1023,-50,50);//map to +/-5Amps
 9c8:	f8 01       	movw	r30, r16
 9ca:	24 81       	ldd	r18, Z+4	; 0x04
 9cc:	35 81       	ldd	r19, Z+5	; 0x05
 9ce:	a4 e6       	ldi	r26, 0x64	; 100
 9d0:	b0 e0       	ldi	r27, 0x00	; 0
 9d2:	0e 94 28 07 	call	0xe50	; 0xe50 <__umulhisi3>
 9d6:	a5 01       	movw	r20, r10
 9d8:	94 01       	movw	r18, r8
 9da:	0e 94 03 07 	call	0xe06	; 0xe06 <__divmodsi4>
 9de:	49 01       	movw	r8, r18
 9e0:	5a 01       	movw	r10, r20
 9e2:	f2 e3       	ldi	r31, 0x32	; 50
 9e4:	8f 1a       	sub	r8, r31
 9e6:	91 08       	sbc	r9, r1
 9e8:	a1 08       	sbc	r10, r1
 9ea:	b1 08       	sbc	r11, r1
 9ec:	c8 2c       	mov	r12, r8
	
	if(V6_sense > 70){
 9ee:	89 81       	ldd	r24, Y+1	; 0x01
 9f0:	87 34       	cpi	r24, 0x47	; 71
 9f2:	dc f0       	brlt	.+54     	; 0xa2a <__stack+0x12b>
		CI_Backplane_Current.data[0] = 4;
 9f4:	e2 e2       	ldi	r30, 0x22	; 34
 9f6:	f1 e0       	ldi	r31, 0x01	; 1
 9f8:	84 e0       	ldi	r24, 0x04	; 4
 9fa:	18 2f       	mov	r17, r24
 9fc:	83 83       	std	Z+3, r24	; 0x03
		CI_Backplane_Current.data[1] = V6_sense;
 9fe:	29 81       	ldd	r18, Y+1	; 0x01
 a00:	24 83       	std	Z+4, r18	; 0x04
		USART_CAN_TX(CI_Backplane_Current);
 a02:	e0 90 22 01 	lds	r14, 0x0122	; 0x800122 <CI_Backplane_Current>
 a06:	f0 90 23 01 	lds	r15, 0x0123	; 0x800123 <CI_Backplane_Current+0x1>
 a0a:	00 91 24 01 	lds	r16, 0x0124	; 0x800124 <CI_Backplane_Current+0x2>
 a0e:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <CI_Backplane_Current+0x5>
 a12:	40 91 28 01 	lds	r20, 0x0128	; 0x800128 <CI_Backplane_Current+0x6>
 a16:	50 91 29 01 	lds	r21, 0x0129	; 0x800129 <CI_Backplane_Current+0x7>
 a1a:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <CI_Backplane_Current+0x8>
 a1e:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <CI_Backplane_Current+0x9>
 a22:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <CI_Backplane_Current+0xa>
 a26:	0e 94 f5 02 	call	0x5ea	; 0x5ea <USART_CAN_TX>
	}
	if(V24_sense > 70){
 a2a:	96 e4       	ldi	r25, 0x46	; 70
 a2c:	9d 15       	cp	r25, r13
 a2e:	dc f4       	brge	.+54     	; 0xa66 <__stack+0x167>
		CI_Backplane_Current.data[0] = 5;
 a30:	e2 e2       	ldi	r30, 0x22	; 34
 a32:	f1 e0       	ldi	r31, 0x01	; 1
 a34:	85 e0       	ldi	r24, 0x05	; 5
 a36:	18 2f       	mov	r17, r24
 a38:	83 83       	std	Z+3, r24	; 0x03
		CI_Backplane_Current.data[1] = V24_sense;
 a3a:	24 2d       	mov	r18, r4
 a3c:	44 82       	std	Z+4, r4	; 0x04
		USART_CAN_TX(CI_Backplane_Current);
 a3e:	e0 90 22 01 	lds	r14, 0x0122	; 0x800122 <CI_Backplane_Current>
 a42:	f0 90 23 01 	lds	r15, 0x0123	; 0x800123 <CI_Backplane_Current+0x1>
 a46:	00 91 24 01 	lds	r16, 0x0124	; 0x800124 <CI_Backplane_Current+0x2>
 a4a:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <CI_Backplane_Current+0x5>
 a4e:	40 91 28 01 	lds	r20, 0x0128	; 0x800128 <CI_Backplane_Current+0x6>
 a52:	50 91 29 01 	lds	r21, 0x0129	; 0x800129 <CI_Backplane_Current+0x7>
 a56:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <CI_Backplane_Current+0x8>
 a5a:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <CI_Backplane_Current+0x9>
 a5e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <CI_Backplane_Current+0xa>
 a62:	0e 94 f5 02 	call	0x5ea	; 0x5ea <USART_CAN_TX>
	}
	if(V5_sense > 45){
 a66:	ad e2       	ldi	r26, 0x2D	; 45
 a68:	ac 15       	cp	r26, r12
 a6a:	dc f4       	brge	.+54     	; 0xaa2 <__stack+0x1a3>
		CI_Backplane_Current.data[0] = 6;
 a6c:	e2 e2       	ldi	r30, 0x22	; 34
 a6e:	f1 e0       	ldi	r31, 0x01	; 1
 a70:	86 e0       	ldi	r24, 0x06	; 6
 a72:	18 2f       	mov	r17, r24
 a74:	83 83       	std	Z+3, r24	; 0x03
		CI_Backplane_Current.data[1] = V5_sense;
 a76:	28 2d       	mov	r18, r8
 a78:	84 82       	std	Z+4, r8	; 0x04
		USART_CAN_TX(CI_Backplane_Current);
 a7a:	e0 90 22 01 	lds	r14, 0x0122	; 0x800122 <CI_Backplane_Current>
 a7e:	f0 90 23 01 	lds	r15, 0x0123	; 0x800123 <CI_Backplane_Current+0x1>
 a82:	00 91 24 01 	lds	r16, 0x0124	; 0x800124 <CI_Backplane_Current+0x2>
 a86:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <CI_Backplane_Current+0x5>
 a8a:	40 91 28 01 	lds	r20, 0x0128	; 0x800128 <CI_Backplane_Current+0x6>
 a8e:	50 91 29 01 	lds	r21, 0x0129	; 0x800129 <CI_Backplane_Current+0x7>
 a92:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <CI_Backplane_Current+0x8>
 a96:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <CI_Backplane_Current+0x9>
 a9a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <CI_Backplane_Current+0xa>
 a9e:	0e 94 f5 02 	call	0x5ea	; 0x5ea <USART_CAN_TX>
	}
	adc_select++;
 aa2:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
 aa6:	8f 5f       	subi	r24, 0xFF	; 255
	if(adc_select > 2){//resets count at 3 and stores values in CAN frame
 aa8:	83 30       	cpi	r24, 0x03	; 3
 aaa:	18 f4       	brcc	.+6      	; 0xab2 <__stack+0x1b3>
	if(V5_sense > 45){
		CI_Backplane_Current.data[0] = 6;
		CI_Backplane_Current.data[1] = V5_sense;
		USART_CAN_TX(CI_Backplane_Current);
	}
	adc_select++;
 aac:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__data_end>
 ab0:	08 c0       	rjmp	.+16     	; 0xac2 <__stack+0x1c3>
	if(adc_select > 2){//resets count at 3 and stores values in CAN frame
		adc_select = 0;
 ab2:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <__data_end>
		Request_Response_Backplane_Current.data[0] = V6_sense;
 ab6:	ec e0       	ldi	r30, 0x0C	; 12
 ab8:	f1 e0       	ldi	r31, 0x01	; 1
 aba:	b9 81       	ldd	r27, Y+1	; 0x01
 abc:	b3 83       	std	Z+3, r27	; 0x03
		Request_Response_Backplane_Current.data[1] = V24_sense;
 abe:	44 82       	std	Z+4, r4	; 0x04
		Request_Response_Backplane_Current.data[2] = V5_sense;
 ac0:	85 82       	std	Z+5, r8	; 0x05
	}
	//select which adc to sample from
	switch(adc_select){
 ac2:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
 ac6:	81 30       	cpi	r24, 0x01	; 1
 ac8:	51 f0       	breq	.+20     	; 0xade <__stack+0x1df>
 aca:	18 f0       	brcs	.+6      	; 0xad2 <__stack+0x1d3>
 acc:	82 30       	cpi	r24, 0x02	; 2
 ace:	69 f0       	breq	.+26     	; 0xaea <__stack+0x1eb>
 ad0:	12 c0       	rjmp	.+36     	; 0xaf6 <__stack+0x1f7>
		case 0 : ADMUX &= 0b11110000; //set ADC0
 ad2:	ec e7       	ldi	r30, 0x7C	; 124
 ad4:	f0 e0       	ldi	r31, 0x00	; 0
 ad6:	80 81       	ld	r24, Z
 ad8:	80 7f       	andi	r24, 0xF0	; 240
 ada:	80 83       	st	Z, r24
			break;	
 adc:	11 c0       	rjmp	.+34     	; 0xb00 <__stack+0x201>
		case 1 : ADMUX &= 0b11110110; //set ADC6
 ade:	ec e7       	ldi	r30, 0x7C	; 124
 ae0:	f0 e0       	ldi	r31, 0x00	; 0
 ae2:	80 81       	ld	r24, Z
 ae4:	86 7f       	andi	r24, 0xF6	; 246
 ae6:	80 83       	st	Z, r24
		break;
 ae8:	0b c0       	rjmp	.+22     	; 0xb00 <__stack+0x201>
		case 2 : ADMUX &= 0b11110111; //set ADC7
 aea:	ec e7       	ldi	r30, 0x7C	; 124
 aec:	f0 e0       	ldi	r31, 0x00	; 0
 aee:	80 81       	ld	r24, Z
 af0:	87 7f       	andi	r24, 0xF7	; 247
 af2:	80 83       	st	Z, r24
		break;
 af4:	05 c0       	rjmp	.+10     	; 0xb00 <__stack+0x201>
		default : ADMUX &= 0b11110000; //set ADC0
 af6:	ec e7       	ldi	r30, 0x7C	; 124
 af8:	f0 e0       	ldi	r31, 0x00	; 0
 afa:	80 81       	ld	r24, Z
 afc:	80 7f       	andi	r24, 0xF0	; 240
 afe:	80 83       	st	Z, r24
		break;
	}
	ADCSRA |= (1<<ADSC); //start adc sample
 b00:	ea e7       	ldi	r30, 0x7A	; 122
 b02:	f0 e0       	ldi	r31, 0x00	; 0
 b04:	80 81       	ld	r24, Z
 b06:	80 64       	ori	r24, 0x40	; 64
 b08:	80 83       	st	Z, r24
}
 b0a:	0f 90       	pop	r0
 b0c:	0f 90       	pop	r0
 b0e:	0f 90       	pop	r0
 b10:	0f 90       	pop	r0
 b12:	df 91       	pop	r29
 b14:	cf 91       	pop	r28
 b16:	ff 91       	pop	r31
 b18:	ef 91       	pop	r30
 b1a:	bf 91       	pop	r27
 b1c:	af 91       	pop	r26
 b1e:	9f 91       	pop	r25
 b20:	8f 91       	pop	r24
 b22:	7f 91       	pop	r23
 b24:	6f 91       	pop	r22
 b26:	5f 91       	pop	r21
 b28:	4f 91       	pop	r20
 b2a:	3f 91       	pop	r19
 b2c:	2f 91       	pop	r18
 b2e:	1f 91       	pop	r17
 b30:	0f 91       	pop	r16
 b32:	ff 90       	pop	r15
 b34:	ef 90       	pop	r14
 b36:	df 90       	pop	r13
 b38:	cf 90       	pop	r12
 b3a:	bf 90       	pop	r11
 b3c:	af 90       	pop	r10
 b3e:	9f 90       	pop	r9
 b40:	8f 90       	pop	r8
 b42:	7f 90       	pop	r7
 b44:	6f 90       	pop	r6
 b46:	5f 90       	pop	r5
 b48:	4f 90       	pop	r4
 b4a:	0f 90       	pop	r0
 b4c:	0f be       	out	0x3f, r0	; 63
 b4e:	0f 90       	pop	r0
 b50:	1f 90       	pop	r1
 b52:	18 95       	reti

00000b54 <__vector_18>:
	USART Receive interrupt|
	
	"UART Confined CAN FRAME"(UCCF) defined in excel file
		~/"RoboSub 17 CAN Frames Rev.X.xlsx"
******************************************************************************/
ISR(USART0_RX_vect){
 b54:	1f 92       	push	r1
 b56:	0f 92       	push	r0
 b58:	0f b6       	in	r0, 0x3f	; 63
 b5a:	0f 92       	push	r0
 b5c:	11 24       	eor	r1, r1
 b5e:	2f 93       	push	r18
 b60:	3f 93       	push	r19
 b62:	4f 93       	push	r20
 b64:	5f 93       	push	r21
 b66:	6f 93       	push	r22
 b68:	7f 93       	push	r23
 b6a:	8f 93       	push	r24
 b6c:	9f 93       	push	r25
 b6e:	af 93       	push	r26
 b70:	bf 93       	push	r27
 b72:	ef 93       	push	r30
 b74:	ff 93       	push	r31
	uint8_t receive_buff = USART_Receive();
 b76:	0e 94 e5 02 	call	0x5ca	; 0x5ca <USART_Receive>
	
	//select which adc to sample from
	switch(Rx_frame_state){
 b7a:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <Rx_frame_state>
 b7e:	4e 2f       	mov	r20, r30
 b80:	50 e0       	ldi	r21, 0x00	; 0
 b82:	fa 01       	movw	r30, r20
 b84:	31 97       	sbiw	r30, 0x01	; 1
 b86:	e0 33       	cpi	r30, 0x30	; 48
 b88:	f1 05       	cpc	r31, r1
 b8a:	08 f0       	brcs	.+2      	; 0xb8e <__vector_18+0x3a>
 b8c:	28 c1       	rjmp	.+592    	; 0xdde <__vector_18+0x28a>
 b8e:	e6 5a       	subi	r30, 0xA6	; 166
 b90:	ff 4f       	sbci	r31, 0xFF	; 255
 b92:	0c 94 22 07 	jmp	0xe44	; 0xe44 <__tablejump2__>
		case s_RxStart : //start byte
		if (receive_buff == start_byte){
 b96:	8e 3e       	cpi	r24, 0xEE	; 238
 b98:	09 f0       	breq	.+2      	; 0xb9c <__vector_18+0x48>
 b9a:	24 c1       	rjmp	.+584    	; 0xde4 <__vector_18+0x290>
			CANTX_buffer.id = 0;
 b9c:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <CANTX_buffer+0x1>
 ba0:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <CANTX_buffer>
			CANTX_buffer.header.rtr = 0;
 ba4:	e8 e4       	ldi	r30, 0x48	; 72
 ba6:	f1 e0       	ldi	r31, 0x01	; 1
 ba8:	80 81       	ld	r24, Z
			CANTX_buffer.header.length = 0;
 baa:	80 7e       	andi	r24, 0xE0	; 224
 bac:	80 83       	st	Z, r24
			memset(CANTX_buffer.data, 0, sizeof(CANTX_buffer.data));
 bae:	88 e0       	ldi	r24, 0x08	; 8
 bb0:	e9 e4       	ldi	r30, 0x49	; 73
 bb2:	f1 e0       	ldi	r31, 0x01	; 1
 bb4:	df 01       	movw	r26, r30
 bb6:	1d 92       	st	X+, r1
 bb8:	8a 95       	dec	r24
 bba:	e9 f7       	brne	.-6      	; 0xbb6 <__vector_18+0x62>
			Rx_frame_state = s_RxIDH;
 bbc:	80 e2       	ldi	r24, 0x20	; 32
 bbe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 bc2:	10 c1       	rjmp	.+544    	; 0xde4 <__vector_18+0x290>
		}
		break;
		case s_RxIDH : //frameID High
			CANTX_buffer.id |= receive_buff <<3;
 bc4:	e6 e4       	ldi	r30, 0x46	; 70
 bc6:	f1 e0       	ldi	r31, 0x01	; 1
 bc8:	90 e0       	ldi	r25, 0x00	; 0
 bca:	88 0f       	add	r24, r24
 bcc:	99 1f       	adc	r25, r25
 bce:	88 0f       	add	r24, r24
 bd0:	99 1f       	adc	r25, r25
 bd2:	88 0f       	add	r24, r24
 bd4:	99 1f       	adc	r25, r25
 bd6:	20 81       	ld	r18, Z
 bd8:	31 81       	ldd	r19, Z+1	; 0x01
 bda:	82 2b       	or	r24, r18
 bdc:	93 2b       	or	r25, r19
 bde:	91 83       	std	Z+1, r25	; 0x01
 be0:	80 83       	st	Z, r24
			Rx_frame_state = s_RxIDL;
 be2:	80 e3       	ldi	r24, 0x30	; 48
 be4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
		break;
 be8:	fd c0       	rjmp	.+506    	; 0xde4 <__vector_18+0x290>
		case s_RxIDL : //frameID Low, rtr, & length = 0bXXXYZZZZ
			CANTX_buffer.id |= (receive_buff >>5);
 bea:	e6 e4       	ldi	r30, 0x46	; 70
 bec:	f1 e0       	ldi	r31, 0x01	; 1
 bee:	98 2f       	mov	r25, r24
 bf0:	92 95       	swap	r25
 bf2:	96 95       	lsr	r25
 bf4:	97 70       	andi	r25, 0x07	; 7
 bf6:	20 81       	ld	r18, Z
 bf8:	31 81       	ldd	r19, Z+1	; 0x01
 bfa:	29 2b       	or	r18, r25
 bfc:	31 83       	std	Z+1, r19	; 0x01
 bfe:	20 83       	st	Z, r18
			CANTX_buffer.header.rtr =  ((receive_buff >>4) & 0x01);
 c00:	28 2f       	mov	r18, r24
 c02:	22 95       	swap	r18
 c04:	2f 70       	andi	r18, 0x0F	; 15
 c06:	e8 e4       	ldi	r30, 0x48	; 72
 c08:	f1 e0       	ldi	r31, 0x01	; 1
 c0a:	90 81       	ld	r25, Z
 c0c:	20 fb       	bst	r18, 0
 c0e:	90 f9       	bld	r25, 0
			CANTX_buffer.header.length = (receive_buff & 0x0F);
 c10:	8f 70       	andi	r24, 0x0F	; 15
 c12:	88 0f       	add	r24, r24
 c14:	91 7e       	andi	r25, 0xE1	; 225
 c16:	89 2b       	or	r24, r25
 c18:	80 83       	st	Z, r24
			if(CANTX_buffer.header.rtr){
 c1a:	80 ff       	sbrs	r24, 0
 c1c:	0b c0       	rjmp	.+22     	; 0xc34 <__vector_18+0xe0>
				mcp2515_send_message(&CANTX_buffer);
 c1e:	86 e4       	ldi	r24, 0x46	; 70
 c20:	91 e0       	ldi	r25, 0x01	; 1
 c22:	0e 94 53 02 	call	0x4a6	; 0x4a6 <mcp2515_send_message>
				uart_rx_flag = 1;
 c26:	81 e0       	ldi	r24, 0x01	; 1
 c28:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <uart_rx_flag>
				receive_buff = 0;
				Rx_frame_state = s_RxStart;
 c2c:	80 e1       	ldi	r24, 0x10	; 16
 c2e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 c32:	d8 c0       	rjmp	.+432    	; 0xde4 <__vector_18+0x290>
			} else {
				Rx_frame_state = s_Rxdata1;
 c34:	81 e0       	ldi	r24, 0x01	; 1
 c36:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 c3a:	d4 c0       	rjmp	.+424    	; 0xde4 <__vector_18+0x290>
			}
		break;
		case s_Rxdata1 : //data1
			CANTX_buffer.data[0] = receive_buff;
 c3c:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <CANTX_buffer+0x3>
			if(Rx_frame_state < CANTX_buffer.header.length){
 c40:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 c44:	30 e0       	ldi	r19, 0x00	; 0
 c46:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <CANTX_buffer+0x2>
 c4a:	86 95       	lsr	r24
 c4c:	8f 70       	andi	r24, 0x0F	; 15
 c4e:	90 e0       	ldi	r25, 0x00	; 0
 c50:	28 17       	cp	r18, r24
 c52:	39 07       	cpc	r19, r25
 c54:	24 f4       	brge	.+8      	; 0xc5e <__vector_18+0x10a>
				Rx_frame_state = s_Rxdata2;
 c56:	82 e0       	ldi	r24, 0x02	; 2
 c58:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 c5c:	c3 c0       	rjmp	.+390    	; 0xde4 <__vector_18+0x290>
			}else{
				mcp2515_send_message(&CANTX_buffer);
 c5e:	86 e4       	ldi	r24, 0x46	; 70
 c60:	91 e0       	ldi	r25, 0x01	; 1
 c62:	0e 94 53 02 	call	0x4a6	; 0x4a6 <mcp2515_send_message>
				uart_rx_flag = 1;
 c66:	81 e0       	ldi	r24, 0x01	; 1
 c68:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <uart_rx_flag>
				receive_buff = 0;
				Rx_frame_state = s_RxStart;
 c6c:	80 e1       	ldi	r24, 0x10	; 16
 c6e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 c72:	b8 c0       	rjmp	.+368    	; 0xde4 <__vector_18+0x290>
			}
		break;
		case s_Rxdata2 ://data2
			CANTX_buffer.data[1] = receive_buff;
 c74:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <CANTX_buffer+0x4>
			if(Rx_frame_state < CANTX_buffer.header.length){
 c78:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 c7c:	30 e0       	ldi	r19, 0x00	; 0
 c7e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <CANTX_buffer+0x2>
 c82:	86 95       	lsr	r24
 c84:	8f 70       	andi	r24, 0x0F	; 15
 c86:	90 e0       	ldi	r25, 0x00	; 0
 c88:	28 17       	cp	r18, r24
 c8a:	39 07       	cpc	r19, r25
 c8c:	24 f4       	brge	.+8      	; 0xc96 <__vector_18+0x142>
				Rx_frame_state = s_Rxdata3;
 c8e:	83 e0       	ldi	r24, 0x03	; 3
 c90:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 c94:	a7 c0       	rjmp	.+334    	; 0xde4 <__vector_18+0x290>
				}else{
				mcp2515_send_message(&CANTX_buffer);
 c96:	86 e4       	ldi	r24, 0x46	; 70
 c98:	91 e0       	ldi	r25, 0x01	; 1
 c9a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <mcp2515_send_message>
				uart_rx_flag = 1;
 c9e:	81 e0       	ldi	r24, 0x01	; 1
 ca0:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <uart_rx_flag>
				receive_buff = 0;
				Rx_frame_state = s_RxStart;
 ca4:	80 e1       	ldi	r24, 0x10	; 16
 ca6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 caa:	9c c0       	rjmp	.+312    	; 0xde4 <__vector_18+0x290>
			}
		break;
		case s_Rxdata3 ://data3
			CANTX_buffer.data[2] = receive_buff;
 cac:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <CANTX_buffer+0x5>
			if(Rx_frame_state < CANTX_buffer.header.length){
 cb0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 cb4:	30 e0       	ldi	r19, 0x00	; 0
 cb6:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <CANTX_buffer+0x2>
 cba:	86 95       	lsr	r24
 cbc:	8f 70       	andi	r24, 0x0F	; 15
 cbe:	90 e0       	ldi	r25, 0x00	; 0
 cc0:	28 17       	cp	r18, r24
 cc2:	39 07       	cpc	r19, r25
 cc4:	24 f4       	brge	.+8      	; 0xcce <__vector_18+0x17a>
				Rx_frame_state = s_Rxdata4;
 cc6:	84 e0       	ldi	r24, 0x04	; 4
 cc8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 ccc:	8b c0       	rjmp	.+278    	; 0xde4 <__vector_18+0x290>
				}else{
				mcp2515_send_message(&CANTX_buffer);
 cce:	86 e4       	ldi	r24, 0x46	; 70
 cd0:	91 e0       	ldi	r25, 0x01	; 1
 cd2:	0e 94 53 02 	call	0x4a6	; 0x4a6 <mcp2515_send_message>
				uart_rx_flag = 1;
 cd6:	81 e0       	ldi	r24, 0x01	; 1
 cd8:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <uart_rx_flag>
				receive_buff = 0;
				Rx_frame_state = s_RxStart;
 cdc:	80 e1       	ldi	r24, 0x10	; 16
 cde:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 ce2:	80 c0       	rjmp	.+256    	; 0xde4 <__vector_18+0x290>
			}
		break;
		case s_Rxdata4 ://data4
			CANTX_buffer.data[3] = receive_buff;
 ce4:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <CANTX_buffer+0x6>
			if(Rx_frame_state < CANTX_buffer.header.length){
 ce8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 cec:	30 e0       	ldi	r19, 0x00	; 0
 cee:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <CANTX_buffer+0x2>
 cf2:	86 95       	lsr	r24
 cf4:	8f 70       	andi	r24, 0x0F	; 15
 cf6:	90 e0       	ldi	r25, 0x00	; 0
 cf8:	28 17       	cp	r18, r24
 cfa:	39 07       	cpc	r19, r25
 cfc:	24 f4       	brge	.+8      	; 0xd06 <__vector_18+0x1b2>
				Rx_frame_state = s_Rxdata5;
 cfe:	85 e0       	ldi	r24, 0x05	; 5
 d00:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 d04:	6f c0       	rjmp	.+222    	; 0xde4 <__vector_18+0x290>
				}else{
				mcp2515_send_message(&CANTX_buffer);
 d06:	86 e4       	ldi	r24, 0x46	; 70
 d08:	91 e0       	ldi	r25, 0x01	; 1
 d0a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <mcp2515_send_message>
				uart_rx_flag = 1;
 d0e:	81 e0       	ldi	r24, 0x01	; 1
 d10:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <uart_rx_flag>
				receive_buff = 0;
				Rx_frame_state = s_RxStart;
 d14:	80 e1       	ldi	r24, 0x10	; 16
 d16:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 d1a:	64 c0       	rjmp	.+200    	; 0xde4 <__vector_18+0x290>
			}
		break;
		case s_Rxdata5 ://data5
			CANTX_buffer.data[4] = receive_buff;
 d1c:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <CANTX_buffer+0x7>
			if(Rx_frame_state < CANTX_buffer.header.length){
 d20:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 d24:	30 e0       	ldi	r19, 0x00	; 0
 d26:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <CANTX_buffer+0x2>
 d2a:	86 95       	lsr	r24
 d2c:	8f 70       	andi	r24, 0x0F	; 15
 d2e:	90 e0       	ldi	r25, 0x00	; 0
 d30:	28 17       	cp	r18, r24
 d32:	39 07       	cpc	r19, r25
 d34:	24 f4       	brge	.+8      	; 0xd3e <__vector_18+0x1ea>
				Rx_frame_state = s_Rxdata6;
 d36:	86 e0       	ldi	r24, 0x06	; 6
 d38:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 d3c:	53 c0       	rjmp	.+166    	; 0xde4 <__vector_18+0x290>
				}else{
				mcp2515_send_message(&CANTX_buffer);
 d3e:	86 e4       	ldi	r24, 0x46	; 70
 d40:	91 e0       	ldi	r25, 0x01	; 1
 d42:	0e 94 53 02 	call	0x4a6	; 0x4a6 <mcp2515_send_message>
				uart_rx_flag = 1;
 d46:	81 e0       	ldi	r24, 0x01	; 1
 d48:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <uart_rx_flag>
				receive_buff = 0;
				Rx_frame_state = s_RxStart;
 d4c:	80 e1       	ldi	r24, 0x10	; 16
 d4e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 d52:	48 c0       	rjmp	.+144    	; 0xde4 <__vector_18+0x290>
			}
		break;
		case s_Rxdata6 ://data6
			CANTX_buffer.data[5] = receive_buff;
 d54:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <CANTX_buffer+0x8>
			if(Rx_frame_state < CANTX_buffer.header.length){
 d58:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 d5c:	30 e0       	ldi	r19, 0x00	; 0
 d5e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <CANTX_buffer+0x2>
 d62:	86 95       	lsr	r24
 d64:	8f 70       	andi	r24, 0x0F	; 15
 d66:	90 e0       	ldi	r25, 0x00	; 0
 d68:	28 17       	cp	r18, r24
 d6a:	39 07       	cpc	r19, r25
 d6c:	24 f4       	brge	.+8      	; 0xd76 <__vector_18+0x222>
				Rx_frame_state = s_Rxdata7;
 d6e:	87 e0       	ldi	r24, 0x07	; 7
 d70:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 d74:	37 c0       	rjmp	.+110    	; 0xde4 <__vector_18+0x290>
				}else{
				mcp2515_send_message(&CANTX_buffer);
 d76:	86 e4       	ldi	r24, 0x46	; 70
 d78:	91 e0       	ldi	r25, 0x01	; 1
 d7a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <mcp2515_send_message>
				uart_rx_flag = 1;
 d7e:	81 e0       	ldi	r24, 0x01	; 1
 d80:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <uart_rx_flag>
				receive_buff = 0;
				Rx_frame_state = s_RxStart;
 d84:	80 e1       	ldi	r24, 0x10	; 16
 d86:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 d8a:	2c c0       	rjmp	.+88     	; 0xde4 <__vector_18+0x290>
			}
		break;
		case s_Rxdata7 ://data7
			CANTX_buffer.data[6] = receive_buff;
 d8c:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <CANTX_buffer+0x9>
			if(Rx_frame_state < CANTX_buffer.header.length){
 d90:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 d94:	30 e0       	ldi	r19, 0x00	; 0
 d96:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <CANTX_buffer+0x2>
 d9a:	86 95       	lsr	r24
 d9c:	8f 70       	andi	r24, 0x0F	; 15
 d9e:	90 e0       	ldi	r25, 0x00	; 0
 da0:	28 17       	cp	r18, r24
 da2:	39 07       	cpc	r19, r25
 da4:	24 f4       	brge	.+8      	; 0xdae <__vector_18+0x25a>
				Rx_frame_state = s_Rxdata8;
 da6:	88 e0       	ldi	r24, 0x08	; 8
 da8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 dac:	1b c0       	rjmp	.+54     	; 0xde4 <__vector_18+0x290>
				}else{
				mcp2515_send_message(&CANTX_buffer);
 dae:	86 e4       	ldi	r24, 0x46	; 70
 db0:	91 e0       	ldi	r25, 0x01	; 1
 db2:	0e 94 53 02 	call	0x4a6	; 0x4a6 <mcp2515_send_message>
				uart_rx_flag = 1;
 db6:	81 e0       	ldi	r24, 0x01	; 1
 db8:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <uart_rx_flag>
				receive_buff = 0;
				Rx_frame_state = s_RxStart;
 dbc:	80 e1       	ldi	r24, 0x10	; 16
 dbe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 dc2:	10 c0       	rjmp	.+32     	; 0xde4 <__vector_18+0x290>
			}
		break;
		case s_Rxdata8 ://data8
			CANTX_buffer.data[7] = receive_buff;
 dc4:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <CANTX_buffer+0xa>
			mcp2515_send_message(&CANTX_buffer);
 dc8:	86 e4       	ldi	r24, 0x46	; 70
 dca:	91 e0       	ldi	r25, 0x01	; 1
 dcc:	0e 94 53 02 	call	0x4a6	; 0x4a6 <mcp2515_send_message>
			uart_rx_flag = 1;
 dd0:	81 e0       	ldi	r24, 0x01	; 1
 dd2:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <uart_rx_flag>
			receive_buff = 0;
			Rx_frame_state = s_RxStart;
 dd6:	80 e1       	ldi	r24, 0x10	; 16
 dd8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
		break;
 ddc:	03 c0       	rjmp	.+6      	; 0xde4 <__vector_18+0x290>
		default : Rx_frame_state = s_RxStart;
 dde:	80 e1       	ldi	r24, 0x10	; 16
 de0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
		break;
	}
}
 de4:	ff 91       	pop	r31
 de6:	ef 91       	pop	r30
 de8:	bf 91       	pop	r27
 dea:	af 91       	pop	r26
 dec:	9f 91       	pop	r25
 dee:	8f 91       	pop	r24
 df0:	7f 91       	pop	r23
 df2:	6f 91       	pop	r22
 df4:	5f 91       	pop	r21
 df6:	4f 91       	pop	r20
 df8:	3f 91       	pop	r19
 dfa:	2f 91       	pop	r18
 dfc:	0f 90       	pop	r0
 dfe:	0f be       	out	0x3f, r0	; 63
 e00:	0f 90       	pop	r0
 e02:	1f 90       	pop	r1
 e04:	18 95       	reti

00000e06 <__divmodsi4>:
 e06:	05 2e       	mov	r0, r21
 e08:	97 fb       	bst	r25, 7
 e0a:	1e f4       	brtc	.+6      	; 0xe12 <__divmodsi4+0xc>
 e0c:	00 94       	com	r0
 e0e:	0e 94 1a 07 	call	0xe34	; 0xe34 <__negsi2>
 e12:	57 fd       	sbrc	r21, 7
 e14:	07 d0       	rcall	.+14     	; 0xe24 <__divmodsi4_neg2>
 e16:	0e 94 37 07 	call	0xe6e	; 0xe6e <__udivmodsi4>
 e1a:	07 fc       	sbrc	r0, 7
 e1c:	03 d0       	rcall	.+6      	; 0xe24 <__divmodsi4_neg2>
 e1e:	4e f4       	brtc	.+18     	; 0xe32 <__divmodsi4_exit>
 e20:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <__negsi2>

00000e24 <__divmodsi4_neg2>:
 e24:	50 95       	com	r21
 e26:	40 95       	com	r20
 e28:	30 95       	com	r19
 e2a:	21 95       	neg	r18
 e2c:	3f 4f       	sbci	r19, 0xFF	; 255
 e2e:	4f 4f       	sbci	r20, 0xFF	; 255
 e30:	5f 4f       	sbci	r21, 0xFF	; 255

00000e32 <__divmodsi4_exit>:
 e32:	08 95       	ret

00000e34 <__negsi2>:
 e34:	90 95       	com	r25
 e36:	80 95       	com	r24
 e38:	70 95       	com	r23
 e3a:	61 95       	neg	r22
 e3c:	7f 4f       	sbci	r23, 0xFF	; 255
 e3e:	8f 4f       	sbci	r24, 0xFF	; 255
 e40:	9f 4f       	sbci	r25, 0xFF	; 255
 e42:	08 95       	ret

00000e44 <__tablejump2__>:
 e44:	ee 0f       	add	r30, r30
 e46:	ff 1f       	adc	r31, r31
 e48:	05 90       	lpm	r0, Z+
 e4a:	f4 91       	lpm	r31, Z
 e4c:	e0 2d       	mov	r30, r0
 e4e:	09 94       	ijmp

00000e50 <__umulhisi3>:
 e50:	a2 9f       	mul	r26, r18
 e52:	b0 01       	movw	r22, r0
 e54:	b3 9f       	mul	r27, r19
 e56:	c0 01       	movw	r24, r0
 e58:	a3 9f       	mul	r26, r19
 e5a:	70 0d       	add	r23, r0
 e5c:	81 1d       	adc	r24, r1
 e5e:	11 24       	eor	r1, r1
 e60:	91 1d       	adc	r25, r1
 e62:	b2 9f       	mul	r27, r18
 e64:	70 0d       	add	r23, r0
 e66:	81 1d       	adc	r24, r1
 e68:	11 24       	eor	r1, r1
 e6a:	91 1d       	adc	r25, r1
 e6c:	08 95       	ret

00000e6e <__udivmodsi4>:
 e6e:	a1 e2       	ldi	r26, 0x21	; 33
 e70:	1a 2e       	mov	r1, r26
 e72:	aa 1b       	sub	r26, r26
 e74:	bb 1b       	sub	r27, r27
 e76:	fd 01       	movw	r30, r26
 e78:	0d c0       	rjmp	.+26     	; 0xe94 <__udivmodsi4_ep>

00000e7a <__udivmodsi4_loop>:
 e7a:	aa 1f       	adc	r26, r26
 e7c:	bb 1f       	adc	r27, r27
 e7e:	ee 1f       	adc	r30, r30
 e80:	ff 1f       	adc	r31, r31
 e82:	a2 17       	cp	r26, r18
 e84:	b3 07       	cpc	r27, r19
 e86:	e4 07       	cpc	r30, r20
 e88:	f5 07       	cpc	r31, r21
 e8a:	20 f0       	brcs	.+8      	; 0xe94 <__udivmodsi4_ep>
 e8c:	a2 1b       	sub	r26, r18
 e8e:	b3 0b       	sbc	r27, r19
 e90:	e4 0b       	sbc	r30, r20
 e92:	f5 0b       	sbc	r31, r21

00000e94 <__udivmodsi4_ep>:
 e94:	66 1f       	adc	r22, r22
 e96:	77 1f       	adc	r23, r23
 e98:	88 1f       	adc	r24, r24
 e9a:	99 1f       	adc	r25, r25
 e9c:	1a 94       	dec	r1
 e9e:	69 f7       	brne	.-38     	; 0xe7a <__udivmodsi4_loop>
 ea0:	60 95       	com	r22
 ea2:	70 95       	com	r23
 ea4:	80 95       	com	r24
 ea6:	90 95       	com	r25
 ea8:	9b 01       	movw	r18, r22
 eaa:	ac 01       	movw	r20, r24
 eac:	bd 01       	movw	r22, r26
 eae:	cf 01       	movw	r24, r30
 eb0:	08 95       	ret

00000eb2 <_exit>:
 eb2:	f8 94       	cli

00000eb4 <__stop_program>:
 eb4:	ff cf       	rjmp	.-2      	; 0xeb4 <__stop_program>
