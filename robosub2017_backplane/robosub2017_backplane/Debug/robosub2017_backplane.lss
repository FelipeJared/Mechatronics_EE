
robosub2017_backplane.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000007fc  00000890  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800128  00800128  000008b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000df7  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000035f  00000000  00000000  000017d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008b7  00000000  00000000  00001b36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  000023f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a3  00000000  00000000  00002664  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000078d  00000000  00000000  00002a07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003194  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 a9 03 	jmp	0x752	; 0x752 <__vector_1>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <__vector_21>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ec ef       	ldi	r30, 0xFC	; 252
  c8:	f7 e0       	ldi	r31, 0x07	; 7
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a8 32       	cpi	r26, 0x28	; 40
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a8 e2       	ldi	r26, 0x28	; 40
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a8 34       	cpi	r26, 0x48	; 72
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 03 03 	call	0x606	; 0x606 <main>
  ea:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <GPIO_init>:
void b8_Timer_init(void) 
{ 
	 TCCR0A |= (1 << WGM01); //set to CTC mode 
	 TCCR0B |= (1<<CS02) | (1<<CS00); //1024 prescaler 
	 TIMSK0 |= (1<<OCIE0A); //enable compare interrupt 
	 OCR0A = 39;//roughly 5ms or 200Hz. 
  f2:	52 98       	cbi	0x0a, 2	; 10
  f4:	53 9a       	sbi	0x0a, 3	; 10
  f6:	54 9a       	sbi	0x0a, 4	; 10
  f8:	55 9a       	sbi	0x0a, 5	; 10
  fa:	56 9a       	sbi	0x0a, 6	; 10
  fc:	6a 98       	cbi	0x0d, 2	; 13
  fe:	6b 98       	cbi	0x0d, 3	; 13
 100:	38 98       	cbi	0x07, 0	; 7
 102:	39 98       	cbi	0x07, 1	; 7
 104:	08 95       	ret

00000106 <INTERRUPT_init>:
 106:	e8 9a       	sbi	0x1d, 0	; 29
 108:	e9 e6       	ldi	r30, 0x69	; 105
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	8c 7f       	andi	r24, 0xFC	; 252
 110:	80 83       	st	Z, r24
 112:	78 94       	sei
 114:	08 95       	ret

00000116 <SPI_masterInit>:

******************************************************************************/
void SPI_masterInit(void)
{
	//set SS, MOSI, & SCK OUTPUT
	SET_OUTPUT(SS);
 116:	22 9a       	sbi	0x04, 2	; 4
	SET_OUTPUT(MOSI);
 118:	23 9a       	sbi	0x04, 3	; 4
	SET_OUTPUT(SCK);
 11a:	25 9a       	sbi	0x04, 5	; 4
	
	//SS high
	SET_H(SS);
 11c:	2a 9a       	sbi	0x05, 2	; 5
	// MOSI & SCK low
	SET_L(MOSI);
 11e:	2b 98       	cbi	0x05, 3	; 5
	SET_L(SCK);
 120:	2d 98       	cbi	0x05, 5	; 5
	
	//enable SPI
	SPCR0 |= (1<<SPE) | (1<<MSTR);
 122:	8c b5       	in	r24, 0x2c	; 44
 124:	80 65       	ori	r24, 0x50	; 80
 126:	8c bd       	out	0x2c, r24	; 44
	
	//set SCK divider to f_osc/8
	SPCR0 |= 0b11; //sets divider to f_osc/16
 128:	8c b5       	in	r24, 0x2c	; 44
 12a:	83 60       	ori	r24, 0x03	; 3
 12c:	8c bd       	out	0x2c, r24	; 44
 12e:	08 95       	ret

00000130 <SPI_txrx>:
	//SPSR |= 1; //f_osc * 2, results in f_osc/8
}

char SPI_txrx(char val)
{
	SPDR0 = val; //send value to buffer
 130:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR0 & (1<<SPIF))); //wait until complete
 132:	0d b4       	in	r0, 0x2d	; 45
 134:	07 fe       	sbrs	r0, 7
 136:	fd cf       	rjmp	.-6      	; 0x132 <SPI_txrx+0x2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	87 ec       	ldi	r24, 0xC7	; 199
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <SPI_txrx+0xc>
 140:	00 c0       	rjmp	.+0      	; 0x142 <SPI_txrx+0x12>
 142:	00 00       	nop
	_delay_us(50);
	return(SPDR0);  //return received value
 144:	8e b5       	in	r24, 0x2e	; 46
 146:	08 95       	ret

00000148 <USART_Init>:
	USART initialization|
******************************************************************************/
void USART_Init( unsigned int ubrr)
{
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 148:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
 14c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
 150:	e1 ec       	ldi	r30, 0xC1	; 193
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	88 61       	ori	r24, 0x18	; 24
 158:	80 83       	st	Z, r24
		/*Enable receiver and transmitter */
	
	UCSR0C |= (3<<UCSZ00);
 15a:	e2 ec       	ldi	r30, 0xC2	; 194
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	86 60       	ori	r24, 0x06	; 6
 162:	80 83       	st	Z, r24
 164:	08 95       	ret

00000166 <USART_Receive>:
		currently not used
******************************************************************************/
uint8_t USART_Receive( void )
{
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)));
 166:	e0 ec       	ldi	r30, 0xC0	; 192
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	88 23       	and	r24, r24
 16e:	ec f7       	brge	.-6      	; 0x16a <USART_Receive+0x4>
	/* Get and return received data from buffer */
	return UDR0;
 170:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 174:	08 95       	ret

00000176 <USART_Transmit>:
		transmits a character across the uart tx/rx pins
******************************************************************************/
void USART_Transmit( uint8_t data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
 176:	e0 ec       	ldi	r30, 0xC0	; 192
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	90 81       	ld	r25, Z
 17c:	95 ff       	sbrs	r25, 5
 17e:	fd cf       	rjmp	.-6      	; 0x17a <USART_Transmit+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 180:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 184:	08 95       	ret

00000186 <USART_Transmit_TX>:
	USART string transmit|
		parses a string argument and passes each character to the
		USART_Transmit function.
******************************************************************************/
void USART_Transmit_TX(char string[])
{
 186:	ef 92       	push	r14
 188:	ff 92       	push	r15
 18a:	0f 93       	push	r16
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
	int wordsize = strlen(string);
 192:	fc 01       	movw	r30, r24
 194:	01 90       	ld	r0, Z+
 196:	00 20       	and	r0, r0
 198:	e9 f7       	brne	.-6      	; 0x194 <USART_Transmit_TX+0xe>
 19a:	31 97       	sbiw	r30, 0x01	; 1
 19c:	7f 01       	movw	r14, r30
 19e:	e8 1a       	sub	r14, r24
 1a0:	f9 0a       	sbc	r15, r25
	int counter = 0;
	
	while(wordsize != counter)
 1a2:	61 f0       	breq	.+24     	; 0x1bc <USART_Transmit_TX+0x36>
 1a4:	8c 01       	movw	r16, r24
 1a6:	c0 e0       	ldi	r28, 0x00	; 0
 1a8:	d0 e0       	ldi	r29, 0x00	; 0
	{
		USART_Transmit(string[counter]);
 1aa:	f8 01       	movw	r30, r16
 1ac:	81 91       	ld	r24, Z+
 1ae:	8f 01       	movw	r16, r30
 1b0:	0e 94 bb 00 	call	0x176	; 0x176 <USART_Transmit>
		counter++;
 1b4:	21 96       	adiw	r28, 0x01	; 1
void USART_Transmit_TX(char string[])
{
	int wordsize = strlen(string);
	int counter = 0;
	
	while(wordsize != counter)
 1b6:	ec 16       	cp	r14, r28
 1b8:	fd 06       	cpc	r15, r29
 1ba:	b9 f7       	brne	.-18     	; 0x1aa <USART_Transmit_TX+0x24>
	{
		USART_Transmit(string[counter]);
		counter++;
	}
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	1f 91       	pop	r17
 1c2:	0f 91       	pop	r16
 1c4:	ff 90       	pop	r15
 1c6:	ef 90       	pop	r14
 1c8:	08 95       	ret

000001ca <mcp2515_write_register>:
	uint8_t data[8];
} tCAN;


void mcp2515_write_register( uint8_t adress, uint8_t data )
{
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	d8 2f       	mov	r29, r24
 1d0:	c6 2f       	mov	r28, r22
	SET_L(SS);//enable slave
 1d2:	2a 98       	cbi	0x05, 2	; 5

	SPI_txrx(CAN_WRITE);//send write instruction
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SPI_txrx(adress);//send address
 1da:	8d 2f       	mov	r24, r29
 1dc:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SPI_txrx(data);//send value
 1e0:	8c 2f       	mov	r24, r28
 1e2:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>

	SET_H(SS);//disable slave
 1e6:	2a 9a       	sbi	0x05, 2	; 5
}
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <mcp2515_read_register>:

uint8_t mcp2515_read_register(uint8_t adress)
{
 1ee:	cf 93       	push	r28
 1f0:	c8 2f       	mov	r28, r24
	uint8_t data;

	SET_L(SS);//enable slave
 1f2:	2a 98       	cbi	0x05, 2	; 5

	SPI_txrx(CAN_READ);
 1f4:	83 e0       	ldi	r24, 0x03	; 3
 1f6:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SPI_txrx(adress);
 1fa:	8c 2f       	mov	r24, r28
 1fc:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>

	data = SPI_txrx(0xff);
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>

	SET_H(SS);//disable slave
 206:	2a 9a       	sbi	0x05, 2	; 5

	return data;
}
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <mcp2515_bit_modify>:

// -------------------------------------------------------------------------
void mcp2515_bit_modify(uint8_t adress, uint8_t mask, uint8_t data)
{
 20c:	1f 93       	push	r17
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	18 2f       	mov	r17, r24
 214:	d6 2f       	mov	r29, r22
 216:	c4 2f       	mov	r28, r20
	SET_L(SS);
 218:	2a 98       	cbi	0x05, 2	; 5

	SPI_txrx(CAN_BIT_MODIFY);
 21a:	85 e0       	ldi	r24, 0x05	; 5
 21c:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SPI_txrx(adress);
 220:	81 2f       	mov	r24, r17
 222:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SPI_txrx(mask);
 226:	8d 2f       	mov	r24, r29
 228:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SPI_txrx(data);
 22c:	8c 2f       	mov	r24, r28
 22e:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>

	SET_H(SS);
 232:	2a 9a       	sbi	0x05, 2	; 5
}
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	08 95       	ret

0000023c <mcp2515_read_status>:
// ----------------------------------------------------------------------------
uint8_t mcp2515_read_status(uint8_t type)
{
	uint8_t data;

	SET_L(SS);
 23c:	2a 98       	cbi	0x05, 2	; 5

	SPI_txrx(type);
 23e:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	data = SPI_txrx(0xff);
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>

	SET_H(SS);
 248:	2a 9a       	sbi	0x05, 2	; 5

	return data;
}
 24a:	08 95       	ret

0000024c <mcp2515_init>:
			and receive filters for the canbus transceiver.
		
		If error, PB0 is set high to turn on an error LED.
******************************************************************************/
uint8_t mcp2515_init(uint8_t speed)
{
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	c8 2f       	mov	r28, r24

	// resets MCP2515 and puts it into configuration mode.
	SET_L(SS);
 252:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(CAN_RESET);
 254:	80 ec       	ldi	r24, 0xC0	; 192
 256:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SET_H(SS);
 25a:	2a 9a       	sbi	0x05, 2	; 5
 25c:	8a e6       	ldi	r24, 0x6A	; 106
 25e:	8a 95       	dec	r24
 260:	f1 f7       	brne	.-4      	; 0x25e <mcp2515_init+0x12>
 262:	00 c0       	rjmp	.+0      	; 0x264 <mcp2515_init+0x18>
	//I had to increase this from 10 to 20, as otherwise it would fail.
	//		The MCP2515 needed more time to reset.
	_delay_us(20);

	// load CNF1..3 Register
	SET_L(SS);
 264:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(CAN_WRITE);
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SPI_txrx(CNF3);  //address 0x28
 26c:	88 e2       	ldi	r24, 0x28	; 40
 26e:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>

	SPI_txrx((1<<PHSEG21));		// Bitrate 500 kbps at 16 MHz
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>

	/*after tx the MCP2515 increments the address automatically, so you can
		continue to write into adjacent registers, so the next write goes into
		0x29, the location of CNF2*/
	SPI_txrx((1<<BTLMODE)|(1<<PHSEG11));//CFN2
 278:	80 e9       	ldi	r24, 0x90	; 144
 27a:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
    SPI_txrx(speed);//writes to BRPn of CNF1
 27e:	8c 2f       	mov	r24, r28
 280:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>

	// activate interrupts
	SPI_txrx((1<<RX1IE)|(1<<RX0IE));
 284:	83 e0       	ldi	r24, 0x03	; 3
 286:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SET_H(SS);
 28a:	2a 9a       	sbi	0x05, 2	; 5

	// test if we could read back the value => is the chip accessible?
	if (mcp2515_read_register(CNF1) != speed) {
 28c:	8a e2       	ldi	r24, 0x2A	; 42
 28e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <mcp2515_read_register>
 292:	8c 17       	cp	r24, r28
 294:	19 f0       	breq	.+6      	; 0x29c <mcp2515_init+0x50>
		SET_H(LED4);
 296:	5e 9a       	sbi	0x0b, 6	; 11

		return false;
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	ae c0       	rjmp	.+348    	; 0x3f8 <mcp2515_init+0x1ac>
	}

	// deactivate the RXnBF Pins (High Impedance State)
	mcp2515_write_register(BFPCTRL, 0);
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	8c e0       	ldi	r24, 0x0C	; 12
 2a0:	0e 94 e5 00 	call	0x1ca	; 0x1ca <mcp2515_write_register>

	// set TXnRTS as inputs
	mcp2515_write_register(TXRTSCTRL, 0);
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	8d e0       	ldi	r24, 0x0D	; 13
 2a8:	0e 94 e5 00 	call	0x1ca	; 0x1ca <mcp2515_write_register>
	//mcp2515_write_register(RXB0CTRL, (1<<RXM0));//buffer0
	//mcp2515_write_register(RXB1CTRL, (1<<RXM0));//buffer1

	//Receive Masking:
	//block all ID's other than the exact RxID for buffer0
	SET_L(SS);
 2ac:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(CAN_WRITE);
 2ae:	82 e0       	ldi	r24, 0x02	; 2
 2b0:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SPI_txrx(RXM0SIDH);
 2b4:	80 e2       	ldi	r24, 0x20	; 32
 2b6:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SPI_txrx(RXMaskHi);
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SPI_txrx(RxMaskLow);
 2c0:	80 ee       	ldi	r24, 0xE0	; 224
 2c2:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SET_H(SS);
 2c6:	2a 9a       	sbi	0x05, 2	; 5
// 	mcp2515_write_register(RXM0SIDH, 0xFF);
// 	mcp2515_write_register(RXM0SIDL, 0xE0);
	//block all ID's other than the exact RxID for buffer1
	SET_L(SS);
 2c8:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(CAN_WRITE);
 2ca:	82 e0       	ldi	r24, 0x02	; 2
 2cc:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SPI_txrx(RXM1SIDH);
 2d0:	84 e2       	ldi	r24, 0x24	; 36
 2d2:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SPI_txrx(RXMaskHi);
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SPI_txrx(RxMaskLow);
 2dc:	80 ee       	ldi	r24, 0xE0	; 224
 2de:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SET_H(SS);
 2e2:	2a 9a       	sbi	0x05, 2	; 5
// 	mcp2515_write_register(RXM1SIDH, 0xFF);
// 	mcp2515_write_register(RXM1SIDL, 0xE0);

	//Set RxID
	SET_L(SS);
 2e4:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(CAN_WRITE);
 2e6:	82 e0       	ldi	r24, 0x02	; 2
 2e8:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SPI_txrx(RXF0SIDH);
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SPI_txrx(RxIDHi);
 2f2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <RxID>
 2f6:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <RxID+0x1>
 2fa:	96 95       	lsr	r25
 2fc:	87 95       	ror	r24
 2fe:	96 95       	lsr	r25
 300:	87 95       	ror	r24
 302:	96 95       	lsr	r25
 304:	87 95       	ror	r24
 306:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SPI_txrx(RxIDLow);
 30a:	c1 e0       	ldi	r28, 0x01	; 1
 30c:	d1 e0       	ldi	r29, 0x01	; 1
 30e:	88 81       	ld	r24, Y
 310:	82 95       	swap	r24
 312:	88 0f       	add	r24, r24
 314:	80 7e       	andi	r24, 0xE0	; 224
 316:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SET_H(SS);
 31a:	2a 9a       	sbi	0x05, 2	; 5
// 	mcp2515_write_register(RXF0SIDH, RxIDHi);//filter0
// 	mcp2515_write_register(RXF0SIDL, RxIDLow);

	SET_L(SS);
 31c:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(CAN_WRITE);
 31e:	82 e0       	ldi	r24, 0x02	; 2
 320:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SPI_txrx(RXF1SIDH);
 324:	84 e0       	ldi	r24, 0x04	; 4
 326:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SPI_txrx(RxIDHi);
 32a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <RxID>
 32e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <RxID+0x1>
 332:	96 95       	lsr	r25
 334:	87 95       	ror	r24
 336:	96 95       	lsr	r25
 338:	87 95       	ror	r24
 33a:	96 95       	lsr	r25
 33c:	87 95       	ror	r24
 33e:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SPI_txrx(RxIDLow);
 342:	88 81       	ld	r24, Y
 344:	82 95       	swap	r24
 346:	88 0f       	add	r24, r24
 348:	80 7e       	andi	r24, 0xE0	; 224
 34a:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SET_H(SS);
 34e:	2a 9a       	sbi	0x05, 2	; 5
// 	mcp2515_write_register(RXF1SIDH, RxIDHi);//filter1
// 	mcp2515_write_register(RXF1SIDL, RxIDLow);
	SET_L(SS);
 350:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(CAN_WRITE);
 352:	82 e0       	ldi	r24, 0x02	; 2
 354:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SPI_txrx(RXF2SIDH);
 358:	88 e0       	ldi	r24, 0x08	; 8
 35a:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SPI_txrx(RxIDHi);
 35e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <RxID>
 362:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <RxID+0x1>
 366:	96 95       	lsr	r25
 368:	87 95       	ror	r24
 36a:	96 95       	lsr	r25
 36c:	87 95       	ror	r24
 36e:	96 95       	lsr	r25
 370:	87 95       	ror	r24
 372:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SPI_txrx(RxIDLow);
 376:	88 81       	ld	r24, Y
 378:	82 95       	swap	r24
 37a:	88 0f       	add	r24, r24
 37c:	80 7e       	andi	r24, 0xE0	; 224
 37e:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SET_H(SS);
 382:	2a 9a       	sbi	0x05, 2	; 5
// 	mcp2515_write_register(RXF2SIDH, RxIDHi);//filter2
// 	mcp2515_write_register(RXF2SIDL, RxIDLow);
	SET_L(SS);
 384:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(CAN_WRITE);
 386:	82 e0       	ldi	r24, 0x02	; 2
 388:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SPI_txrx(RXF3SIDH);
 38c:	80 e1       	ldi	r24, 0x10	; 16
 38e:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SPI_txrx(RxIDHi);
 392:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <RxID>
 396:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <RxID+0x1>
 39a:	96 95       	lsr	r25
 39c:	87 95       	ror	r24
 39e:	96 95       	lsr	r25
 3a0:	87 95       	ror	r24
 3a2:	96 95       	lsr	r25
 3a4:	87 95       	ror	r24
 3a6:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SPI_txrx(RxIDLow);
 3aa:	88 81       	ld	r24, Y
 3ac:	82 95       	swap	r24
 3ae:	88 0f       	add	r24, r24
 3b0:	80 7e       	andi	r24, 0xE0	; 224
 3b2:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SET_H(SS);
 3b6:	2a 9a       	sbi	0x05, 2	; 5
// 	mcp2515_write_register(RXF3SIDH, RxIDHi);//filter3
// 	mcp2515_write_register(RXF3SIDL, RxIDLow);
	SET_L(SS);
 3b8:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(CAN_WRITE);
 3ba:	82 e0       	ldi	r24, 0x02	; 2
 3bc:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SPI_txrx(RXF4SIDH);
 3c0:	84 e1       	ldi	r24, 0x14	; 20
 3c2:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SPI_txrx(RxIDHi);
 3c6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <RxID>
 3ca:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <RxID+0x1>
 3ce:	96 95       	lsr	r25
 3d0:	87 95       	ror	r24
 3d2:	96 95       	lsr	r25
 3d4:	87 95       	ror	r24
 3d6:	96 95       	lsr	r25
 3d8:	87 95       	ror	r24
 3da:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SPI_txrx(RxIDLow);
 3de:	88 81       	ld	r24, Y
 3e0:	82 95       	swap	r24
 3e2:	88 0f       	add	r24, r24
 3e4:	80 7e       	andi	r24, 0xE0	; 224
 3e6:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SET_H(SS);
 3ea:	2a 9a       	sbi	0x05, 2	; 5
// 	mcp2515_write_register(RXF4SIDL, RxIDLow);

/******************************************************************************/

	// reset device to normal mode
	mcp2515_write_register(CANCTRL, 0);
 3ec:	60 e0       	ldi	r22, 0x00	; 0
 3ee:	8f e0       	ldi	r24, 0x0F	; 15
 3f0:	0e 94 e5 00 	call	0x1ca	; 0x1ca <mcp2515_write_register>
	SET_L(LED4);
 3f4:	5e 98       	cbi	0x0b, 6	; 11
	return true;
 3f6:	81 e0       	ldi	r24, 0x01	; 1
}
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	08 95       	ret

000003fe <mcp2515_get_message>:

// ----------------------------------------------------------------------------
uint8_t mcp2515_get_message(tCAN *message)
{
 3fe:	cf 92       	push	r12
 400:	df 92       	push	r13
 402:	ef 92       	push	r14
 404:	ff 92       	push	r15
 406:	0f 93       	push	r16
 408:	1f 93       	push	r17
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	1f 92       	push	r1
 410:	cd b7       	in	r28, 0x3d	; 61
 412:	de b7       	in	r29, 0x3e	; 62
 414:	6c 01       	movw	r12, r24
	// read status
	uint8_t status = mcp2515_read_status(CAN_RX_STATUS);
 416:	80 eb       	ldi	r24, 0xB0	; 176
 418:	0e 94 1e 01 	call	0x23c	; 0x23c <mcp2515_read_status>
 41c:	89 83       	std	Y+1, r24	; 0x01
	uint8_t addr;
	uint8_t t;
	if (bit_is_set(status,6)) {
 41e:	99 81       	ldd	r25, Y+1	; 0x01
 420:	89 2f       	mov	r24, r25
 422:	80 74       	andi	r24, 0x40	; 64
 424:	96 fd       	sbrc	r25, 6
 426:	06 c0       	rjmp	.+12     	; 0x434 <__FUSE_REGION_LENGTH__+0x34>
		// message in buffer 0
		addr = CAN_READ_RX_BUFF;
	}
	else if (bit_is_set(status,7)) {
 428:	99 81       	ldd	r25, Y+1	; 0x01
 42a:	99 23       	and	r25, r25
 42c:	0c f0       	brlt	.+2      	; 0x430 <__FUSE_REGION_LENGTH__+0x30>
 42e:	5e c0       	rjmp	.+188    	; 0x4ec <__FUSE_REGION_LENGTH__+0xec>
		// message in buffer 1
		addr = CAN_READ_RX_BUFF | 0x04;
 430:	84 e9       	ldi	r24, 0x94	; 148
 432:	01 c0       	rjmp	.+2      	; 0x436 <__FUSE_REGION_LENGTH__+0x36>
	uint8_t status = mcp2515_read_status(CAN_RX_STATUS);
	uint8_t addr;
	uint8_t t;
	if (bit_is_set(status,6)) {
		// message in buffer 0
		addr = CAN_READ_RX_BUFF;
 434:	80 e9       	ldi	r24, 0x90	; 144
	else {
		// Error: no message available
		return 0;
	}

	SET_L(SS);
 436:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(addr);
 438:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>

	// read id
	message->id  = (uint16_t) SPI_txrx(0xff) << 3;
 43c:	8f ef       	ldi	r24, 0xFF	; 255
 43e:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
 442:	28 e0       	ldi	r18, 0x08	; 8
 444:	82 9f       	mul	r24, r18
 446:	c0 01       	movw	r24, r0
 448:	11 24       	eor	r1, r1
 44a:	f6 01       	movw	r30, r12
 44c:	91 83       	std	Z+1, r25	; 0x01
 44e:	80 83       	st	Z, r24
	message->id |=            SPI_txrx(0xff) >> 5;
 450:	8f ef       	ldi	r24, 0xFF	; 255
 452:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
 456:	28 2f       	mov	r18, r24
 458:	22 95       	swap	r18
 45a:	26 95       	lsr	r18
 45c:	27 70       	andi	r18, 0x07	; 7
 45e:	f6 01       	movw	r30, r12
 460:	80 81       	ld	r24, Z
 462:	91 81       	ldd	r25, Z+1	; 0x01
 464:	82 2b       	or	r24, r18
 466:	91 83       	std	Z+1, r25	; 0x01
 468:	80 83       	st	Z, r24

	SPI_txrx(0xff);
 46a:	8f ef       	ldi	r24, 0xFF	; 255
 46c:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SPI_txrx(0xff);
 470:	8f ef       	ldi	r24, 0xFF	; 255
 472:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>

	// read DLC
	uint8_t length = SPI_txrx(0xff) & 0x0f;
 476:	8f ef       	ldi	r24, 0xFF	; 255
 478:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
 47c:	98 2f       	mov	r25, r24
 47e:	9f 70       	andi	r25, 0x0F	; 15

	message->header.length = length;
 480:	29 2f       	mov	r18, r25
 482:	22 0f       	add	r18, r18
 484:	f6 01       	movw	r30, r12
 486:	82 81       	ldd	r24, Z+2	; 0x02
 488:	81 7e       	andi	r24, 0xE1	; 225
 48a:	82 2b       	or	r24, r18
 48c:	82 83       	std	Z+2, r24	; 0x02
	message->header.rtr = (bit_is_set(status, 3)) ? 1 : 0;
 48e:	29 81       	ldd	r18, Y+1	; 0x01
 490:	23 fb       	bst	r18, 3
 492:	22 27       	eor	r18, r18
 494:	20 f9       	bld	r18, 0
 496:	20 fb       	bst	r18, 0
 498:	80 f9       	bld	r24, 0
 49a:	82 83       	std	Z+2, r24	; 0x02

	// read data
	for (t=0;t<length;t++) {
 49c:	99 23       	and	r25, r25
 49e:	a1 f0       	breq	.+40     	; 0x4c8 <__FUSE_REGION_LENGTH__+0xc8>
 4a0:	86 01       	movw	r16, r12
 4a2:	0d 5f       	subi	r16, 0xFD	; 253
 4a4:	1f 4f       	sbci	r17, 0xFF	; 255
 4a6:	91 50       	subi	r25, 0x01	; 1
 4a8:	e9 2e       	mov	r14, r25
 4aa:	f1 2c       	mov	r15, r1
 4ac:	f4 e0       	ldi	r31, 0x04	; 4
 4ae:	ef 0e       	add	r14, r31
 4b0:	f1 1c       	adc	r15, r1
 4b2:	ec 0c       	add	r14, r12
 4b4:	fd 1c       	adc	r15, r13
		message->data[t] = SPI_txrx(0xff);
 4b6:	8f ef       	ldi	r24, 0xFF	; 255
 4b8:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
 4bc:	f8 01       	movw	r30, r16
 4be:	81 93       	st	Z+, r24
 4c0:	8f 01       	movw	r16, r30

	message->header.length = length;
	message->header.rtr = (bit_is_set(status, 3)) ? 1 : 0;

	// read data
	for (t=0;t<length;t++) {
 4c2:	ee 15       	cp	r30, r14
 4c4:	ff 05       	cpc	r31, r15
 4c6:	b9 f7       	brne	.-18     	; 0x4b6 <__FUSE_REGION_LENGTH__+0xb6>
		message->data[t] = SPI_txrx(0xff);
	}
	SET_H(SS);
 4c8:	2a 9a       	sbi	0x05, 2	; 5

	// clear interrupt flag
	if (bit_is_set(status, 6)) {
 4ca:	89 81       	ldd	r24, Y+1	; 0x01
 4cc:	86 ff       	sbrs	r24, 6
 4ce:	06 c0       	rjmp	.+12     	; 0x4dc <__FUSE_REGION_LENGTH__+0xdc>
		mcp2515_bit_modify(CANINTF, (1<<RX0IF), 0);
 4d0:	40 e0       	ldi	r20, 0x00	; 0
 4d2:	61 e0       	ldi	r22, 0x01	; 1
 4d4:	8c e2       	ldi	r24, 0x2C	; 44
 4d6:	0e 94 06 01 	call	0x20c	; 0x20c <mcp2515_bit_modify>
 4da:	05 c0       	rjmp	.+10     	; 0x4e6 <__FUSE_REGION_LENGTH__+0xe6>
	}
	else {
		mcp2515_bit_modify(CANINTF, (1<<RX1IF), 0);
 4dc:	40 e0       	ldi	r20, 0x00	; 0
 4de:	62 e0       	ldi	r22, 0x02	; 2
 4e0:	8c e2       	ldi	r24, 0x2C	; 44
 4e2:	0e 94 06 01 	call	0x20c	; 0x20c <mcp2515_bit_modify>
	}

	return (status & 0x07) + 1;
 4e6:	89 81       	ldd	r24, Y+1	; 0x01
 4e8:	87 70       	andi	r24, 0x07	; 7
 4ea:	8f 5f       	subi	r24, 0xFF	; 255
}
 4ec:	0f 90       	pop	r0
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	1f 91       	pop	r17
 4f4:	0f 91       	pop	r16
 4f6:	ff 90       	pop	r15
 4f8:	ef 90       	pop	r14
 4fa:	df 90       	pop	r13
 4fc:	cf 90       	pop	r12
 4fe:	08 95       	ret

00000500 <mcp2515_send_message>:

// ----------------------------------------------------------------------------
uint8_t mcp2515_send_message(tCAN *message)
{
 500:	bf 92       	push	r11
 502:	cf 92       	push	r12
 504:	df 92       	push	r13
 506:	ef 92       	push	r14
 508:	ff 92       	push	r15
 50a:	0f 93       	push	r16
 50c:	1f 93       	push	r17
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
 512:	1f 92       	push	r1
 514:	cd b7       	in	r28, 0x3d	; 61
 516:	de b7       	in	r29, 0x3e	; 62
 518:	6c 01       	movw	r12, r24
	uint8_t status = mcp2515_read_status(CAN_READ_STATUS);
 51a:	80 ea       	ldi	r24, 0xA0	; 160
 51c:	0e 94 1e 01 	call	0x23c	; 0x23c <mcp2515_read_status>
 520:	89 83       	std	Y+1, r24	; 0x01
	   6	TXB2CNTRL.TXREQ
	 */
	uint8_t address;
	uint8_t t;

	if (bit_is_clear(status, 2)) {
 522:	89 81       	ldd	r24, Y+1	; 0x01
 524:	82 ff       	sbrs	r24, 2
 526:	0a c0       	rjmp	.+20     	; 0x53c <mcp2515_send_message+0x3c>
		address = 0x00;
	}
	else if (bit_is_clear(status, 4)) {
 528:	89 81       	ldd	r24, Y+1	; 0x01
 52a:	84 ff       	sbrs	r24, 4
 52c:	09 c0       	rjmp	.+18     	; 0x540 <mcp2515_send_message+0x40>
		address = 0x02;
	}
	else if (bit_is_clear(status, 6)) {
 52e:	89 81       	ldd	r24, Y+1	; 0x01
 530:	86 fd       	sbrc	r24, 6
 532:	5d c0       	rjmp	.+186    	; 0x5ee <mcp2515_send_message+0xee>
		address = 0x04;
 534:	68 94       	set
 536:	bb 24       	eor	r11, r11
 538:	b2 f8       	bld	r11, 2
 53a:	05 c0       	rjmp	.+10     	; 0x546 <mcp2515_send_message+0x46>
	 */
	uint8_t address;
	uint8_t t;

	if (bit_is_clear(status, 2)) {
		address = 0x00;
 53c:	b1 2c       	mov	r11, r1
 53e:	03 c0       	rjmp	.+6      	; 0x546 <mcp2515_send_message+0x46>
	}
	else if (bit_is_clear(status, 4)) {
		address = 0x02;
 540:	68 94       	set
 542:	bb 24       	eor	r11, r11
 544:	b1 f8       	bld	r11, 1
	else {
		// all buffer used => could not send message
		return 0;
	}

	SET_L(SS);
 546:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(CAN_LOAD_TX_BUFF | address);
 548:	8b 2d       	mov	r24, r11
 54a:	80 64       	ori	r24, 0x40	; 64
 54c:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>

	//split 11bit ID into it's respective register positions
	SPI_txrx(message->id >> 3);
 550:	f6 01       	movw	r30, r12
 552:	80 81       	ld	r24, Z
 554:	91 81       	ldd	r25, Z+1	; 0x01
 556:	96 95       	lsr	r25
 558:	87 95       	ror	r24
 55a:	96 95       	lsr	r25
 55c:	87 95       	ror	r24
 55e:	96 95       	lsr	r25
 560:	87 95       	ror	r24
 562:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
    SPI_txrx(message->id << 5);
 566:	f6 01       	movw	r30, r12
 568:	80 81       	ld	r24, Z
 56a:	82 95       	swap	r24
 56c:	88 0f       	add	r24, r24
 56e:	80 7e       	andi	r24, 0xE0	; 224
 570:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>

	SPI_txrx(0);
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SPI_txrx(0);
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>

	uint8_t length = message->header.length & 0x0f;
 580:	f6 01       	movw	r30, r12
 582:	82 81       	ldd	r24, Z+2	; 0x02
 584:	f8 2e       	mov	r15, r24
 586:	f6 94       	lsr	r15
 588:	ff 2d       	mov	r31, r15
 58a:	ff 70       	andi	r31, 0x0F	; 15
 58c:	ff 2e       	mov	r15, r31

	if (message->header.rtr) {
 58e:	80 ff       	sbrs	r24, 0
 590:	05 c0       	rjmp	.+10     	; 0x59c <mcp2515_send_message+0x9c>
		// a rtr-frame has a length, but contains no data
		SPI_txrx((1<<RTR) | length);
 592:	8f 2f       	mov	r24, r31
 594:	80 64       	ori	r24, 0x40	; 64
 596:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
 59a:	18 c0       	rjmp	.+48     	; 0x5cc <mcp2515_send_message+0xcc>
	}
	else {
		// set message length
		SPI_txrx(length);
 59c:	8f 2f       	mov	r24, r31
 59e:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>

		// data
		for (t=0;t<length;t++) {
 5a2:	ff 20       	and	r15, r15
 5a4:	99 f0       	breq	.+38     	; 0x5cc <mcp2515_send_message+0xcc>
 5a6:	86 01       	movw	r16, r12
 5a8:	0d 5f       	subi	r16, 0xFD	; 253
 5aa:	1f 4f       	sbci	r17, 0xFF	; 255
 5ac:	fa 94       	dec	r15
 5ae:	ef 2c       	mov	r14, r15
 5b0:	f1 2c       	mov	r15, r1
 5b2:	84 e0       	ldi	r24, 0x04	; 4
 5b4:	e8 0e       	add	r14, r24
 5b6:	f1 1c       	adc	r15, r1
 5b8:	ec 0c       	add	r14, r12
 5ba:	fd 1c       	adc	r15, r13
			SPI_txrx(message->data[t]);
 5bc:	f8 01       	movw	r30, r16
 5be:	81 91       	ld	r24, Z+
 5c0:	8f 01       	movw	r16, r30
 5c2:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	else {
		// set message length
		SPI_txrx(length);

		// data
		for (t=0;t<length;t++) {
 5c6:	0e 15       	cp	r16, r14
 5c8:	1f 05       	cpc	r17, r15
 5ca:	c1 f7       	brne	.-16     	; 0x5bc <mcp2515_send_message+0xbc>
			SPI_txrx(message->data[t]);
		}
	}
	SET_H(SS);
 5cc:	2a 9a       	sbi	0x05, 2	; 5
 5ce:	f5 e0       	ldi	r31, 0x05	; 5
 5d0:	fa 95       	dec	r31
 5d2:	f1 f7       	brne	.-4      	; 0x5d0 <mcp2515_send_message+0xd0>
 5d4:	00 00       	nop

	//Wait for message to "settle" in register
	_delay_us(1);

	// send message
	SET_L(SS);
 5d6:	2a 98       	cbi	0x05, 2	; 5
	address = (address == 0) ? 1 : address;
 5d8:	b1 10       	cpse	r11, r1
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <mcp2515_send_message+0xe0>
 5dc:	bb 24       	eor	r11, r11
 5de:	b3 94       	inc	r11
	SPI_txrx(CAN_RTS | address);
 5e0:	8b 2d       	mov	r24, r11
 5e2:	80 68       	ori	r24, 0x80	; 128
 5e4:	0e 94 98 00 	call	0x130	; 0x130 <SPI_txrx>
	SET_H(SS);
 5e8:	2a 9a       	sbi	0x05, 2	; 5

	return address;
 5ea:	8b 2d       	mov	r24, r11
 5ec:	01 c0       	rjmp	.+2      	; 0x5f0 <mcp2515_send_message+0xf0>
	else if (bit_is_clear(status, 6)) {
		address = 0x04;
	}
	else {
		// all buffer used => could not send message
		return 0;
 5ee:	80 e0       	ldi	r24, 0x00	; 0
	address = (address == 0) ? 1 : address;
	SPI_txrx(CAN_RTS | address);
	SET_H(SS);

	return address;
 5f0:	0f 90       	pop	r0
 5f2:	df 91       	pop	r29
 5f4:	cf 91       	pop	r28
 5f6:	1f 91       	pop	r17
 5f8:	0f 91       	pop	r16
 5fa:	ff 90       	pop	r15
 5fc:	ef 90       	pop	r14
 5fe:	df 90       	pop	r13
 600:	cf 90       	pop	r12
 602:	bf 90       	pop	r11
 604:	08 95       	ret

00000606 <main>:
	start of main()|
******************************************************************************/
int main(void)
{
  	//initialization functions
	GPIO_init();
 606:	0e 94 79 00 	call	0xf2	; 0xf2 <GPIO_init>
	INTERRUPT_init();
 60a:	0e 94 83 00 	call	0x106	; 0x106 <INTERRUPT_init>
	USART_Init(103);//103 sets baud rate at 9600
 60e:	87 e6       	ldi	r24, 0x67	; 103
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	0e 94 a4 00 	call	0x148	; 0x148 <USART_Init>
	SPI_masterInit();
 616:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_masterInit>
	
	//MCP2515 initialization
	if(mcp2515_init(CANSPEED_500))
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	0e 94 26 01 	call	0x24c	; 0x24c <mcp2515_init>
 620:	88 23       	and	r24, r24
 622:	29 f0       	breq	.+10     	; 0x62e <main+0x28>
	{
		USART_Transmit_TX("Can Init SUCCESS!");
 624:	83 e0       	ldi	r24, 0x03	; 3
 626:	91 e0       	ldi	r25, 0x01	; 1
 628:	0e 94 c3 00 	call	0x186	; 0x186 <USART_Transmit_TX>
 62c:	04 c0       	rjmp	.+8      	; 0x636 <main+0x30>
	}else
	{
		USART_Transmit_TX("Can Init FAILURE!");
 62e:	85 e1       	ldi	r24, 0x15	; 21
 630:	91 e0       	ldi	r25, 0x01	; 1
 632:	0e 94 c3 00 	call	0x186	; 0x186 <USART_Transmit_TX>
	}
	USART_Transmit(10);//New Line
 636:	8a e0       	ldi	r24, 0x0A	; 10
 638:	0e 94 bb 00 	call	0x176	; 0x176 <USART_Transmit>
	USART_Transmit(13);//Carriage return
 63c:	8d e0       	ldi	r24, 0x0D	; 13
 63e:	0e 94 bb 00 	call	0x176	; 0x176 <USART_Transmit>
	
	//setup the transmit frame
	usart_char.id = TxID;			//set target device ID
 642:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <TxID>
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <usart_char+0x1>
 64c:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <usart_char>
	usart_char.header.rtr = 0;		//no remote transmit(i.e. request info)
 650:	e7 e3       	ldi	r30, 0x37	; 55
 652:	f1 e0       	ldi	r31, 0x01	; 1
 654:	80 81       	ld	r24, Z
	usart_char.header.length = 1;	//single byte(could be up to 8)
 656:	80 7e       	andi	r24, 0xE0	; 224
 658:	82 60       	ori	r24, 0x02	; 2
 65a:	80 83       	st	Z, r24
	
	while(1)
    {
		if(!(UCSR0A & (1<<RXC0)))//if data in serial buffer
 65c:	0f 2e       	mov	r0, r31
 65e:	f0 ec       	ldi	r31, 0xC0	; 192
 660:	cf 2e       	mov	r12, r31
 662:	d1 2c       	mov	r13, r1
 664:	f0 2d       	mov	r31, r0
		{
			//get serial data
			usart_char.data[0] = USART_Receive();
 666:	0f 2e       	mov	r0, r31
 668:	f5 e3       	ldi	r31, 0x35	; 53
 66a:	ef 2e       	mov	r14, r31
 66c:	f1 e0       	ldi	r31, 0x01	; 1
 66e:	ff 2e       	mov	r15, r31
 670:	f0 2d       	mov	r31, r0
			mcp2515_send_message(&usart_char);
		}
		
		if(rx_flag){
			ATOMIC_BLOCK(ATOMIC_FORCEON){
				USART_Transmit(spi_char.id >> 8); //CanID_High
 672:	0a e2       	ldi	r16, 0x2A	; 42
 674:	11 e0       	ldi	r17, 0x01	; 1

				USART_Transmit(spi_char.id); //CandID_Low

				USART_Transmit(spi_char.header.rtr); //rtr
 676:	cc e2       	ldi	r28, 0x2C	; 44
 678:	d1 e0       	ldi	r29, 0x01	; 1
				USART_Transmit(spi_char.header.length); //length

				
				//read back all data received.
				if(!spi_char.header.rtr){
					for (uint8_t t = 0; t < spi_char.header.length;t++) {
 67a:	91 2c       	mov	r9, r1
 67c:	a1 2c       	mov	r10, r1
	usart_char.header.rtr = 0;		//no remote transmit(i.e. request info)
	usart_char.header.length = 1;	//single byte(could be up to 8)
	
	while(1)
    {
		if(!(UCSR0A & (1<<RXC0)))//if data in serial buffer
 67e:	f6 01       	movw	r30, r12
 680:	80 81       	ld	r24, Z
 682:	88 23       	and	r24, r24
 684:	3c f0       	brlt	.+14     	; 0x694 <main+0x8e>
		{
			//get serial data
			usart_char.data[0] = USART_Receive();
 686:	0e 94 b3 00 	call	0x166	; 0x166 <USART_Receive>
 68a:	f7 01       	movw	r30, r14
 68c:	83 83       	std	Z+3, r24	; 0x03
			
			//transmit usart_char over canbus
			mcp2515_send_message(&usart_char);
 68e:	c7 01       	movw	r24, r14
 690:	0e 94 80 02 	call	0x500	; 0x500 <mcp2515_send_message>
		}
		
		if(rx_flag){
 694:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <rx_flag>
 698:	88 23       	and	r24, r24
 69a:	91 f1       	breq	.+100    	; 0x700 <main+0xfa>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 69c:	f8 94       	cli
			ATOMIC_BLOCK(ATOMIC_FORCEON){
				USART_Transmit(spi_char.id >> 8); //CanID_High
 69e:	f8 01       	movw	r30, r16
 6a0:	81 81       	ldd	r24, Z+1	; 0x01
 6a2:	0e 94 bb 00 	call	0x176	; 0x176 <USART_Transmit>

				USART_Transmit(spi_char.id); //CandID_Low
 6a6:	f8 01       	movw	r30, r16
 6a8:	80 81       	ld	r24, Z
 6aa:	0e 94 bb 00 	call	0x176	; 0x176 <USART_Transmit>

				USART_Transmit(spi_char.header.rtr); //rtr
 6ae:	88 81       	ld	r24, Y
 6b0:	87 95       	ror	r24
 6b2:	88 27       	eor	r24, r24
 6b4:	87 95       	ror	r24
 6b6:	88 0f       	add	r24, r24
 6b8:	88 0b       	sbc	r24, r24
 6ba:	0e 94 bb 00 	call	0x176	; 0x176 <USART_Transmit>

				USART_Transmit(spi_char.header.length); //length
 6be:	88 81       	ld	r24, Y
 6c0:	86 95       	lsr	r24
 6c2:	8f 70       	andi	r24, 0x0F	; 15
 6c4:	0e 94 bb 00 	call	0x176	; 0x176 <USART_Transmit>

				
				//read back all data received.
				if(!spi_char.header.rtr){
 6c8:	88 81       	ld	r24, Y
 6ca:	80 fd       	sbrc	r24, 0
 6cc:	16 c0       	rjmp	.+44     	; 0x6fa <main+0xf4>
					for (uint8_t t = 0; t < spi_char.header.length;t++) {
 6ce:	86 95       	lsr	r24
 6d0:	8f 70       	andi	r24, 0x0F	; 15
 6d2:	99 f0       	breq	.+38     	; 0x6fa <main+0xf4>
 6d4:	89 2d       	mov	r24, r9
 6d6:	9a 2d       	mov	r25, r10
 6d8:	b1 2c       	mov	r11, r1
						USART_Transmit(spi_char.data[t]); //data
 6da:	fc 01       	movw	r30, r24
 6dc:	e6 5d       	subi	r30, 0xD6	; 214
 6de:	fe 4f       	sbci	r31, 0xFE	; 254
 6e0:	83 81       	ldd	r24, Z+3	; 0x03
 6e2:	0e 94 bb 00 	call	0x176	; 0x176 <USART_Transmit>
				USART_Transmit(spi_char.header.length); //length

				
				//read back all data received.
				if(!spi_char.header.rtr){
					for (uint8_t t = 0; t < spi_char.header.length;t++) {
 6e6:	b3 94       	inc	r11
 6e8:	8b 2d       	mov	r24, r11
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	28 81       	ld	r18, Y
 6ee:	26 95       	lsr	r18
 6f0:	2f 70       	andi	r18, 0x0F	; 15
 6f2:	30 e0       	ldi	r19, 0x00	; 0
 6f4:	82 17       	cp	r24, r18
 6f6:	93 07       	cpc	r25, r19
 6f8:	84 f3       	brlt	.-32     	; 0x6da <main+0xd4>
						USART_Transmit(spi_char.data[t]); //data
					}
				}
				rx_flag = 0;
 6fa:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <rx_flag>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 6fe:	78 94       	sei
			}
		}
		
		TOGGLE(LED1);
 700:	4b 9a       	sbi	0x09, 3	; 9
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 702:	ff ef       	ldi	r31, 0xFF	; 255
 704:	23 ec       	ldi	r18, 0xC3	; 195
 706:	89 e0       	ldi	r24, 0x09	; 9
 708:	f1 50       	subi	r31, 0x01	; 1
 70a:	20 40       	sbci	r18, 0x00	; 0
 70c:	80 40       	sbci	r24, 0x00	; 0
 70e:	e1 f7       	brne	.-8      	; 0x708 <main+0x102>
 710:	00 c0       	rjmp	.+0      	; 0x712 <main+0x10c>
 712:	00 00       	nop
		_delay_ms(200);
		TOGGLE(LED2);
 714:	4c 9a       	sbi	0x09, 4	; 9
 716:	9f ef       	ldi	r25, 0xFF	; 255
 718:	e3 ec       	ldi	r30, 0xC3	; 195
 71a:	f9 e0       	ldi	r31, 0x09	; 9
 71c:	91 50       	subi	r25, 0x01	; 1
 71e:	e0 40       	sbci	r30, 0x00	; 0
 720:	f0 40       	sbci	r31, 0x00	; 0
 722:	e1 f7       	brne	.-8      	; 0x71c <main+0x116>
 724:	00 c0       	rjmp	.+0      	; 0x726 <main+0x120>
 726:	00 00       	nop
		_delay_ms(200);
		TOGGLE(LED3);
 728:	4d 9a       	sbi	0x09, 5	; 9
 72a:	2f ef       	ldi	r18, 0xFF	; 255
 72c:	83 ec       	ldi	r24, 0xC3	; 195
 72e:	99 e0       	ldi	r25, 0x09	; 9
 730:	21 50       	subi	r18, 0x01	; 1
 732:	80 40       	sbci	r24, 0x00	; 0
 734:	90 40       	sbci	r25, 0x00	; 0
 736:	e1 f7       	brne	.-8      	; 0x730 <main+0x12a>
 738:	00 c0       	rjmp	.+0      	; 0x73a <main+0x134>
 73a:	00 00       	nop
		_delay_ms(200);
		TOGGLE(LED4);
 73c:	4e 9a       	sbi	0x09, 6	; 9
 73e:	ef ef       	ldi	r30, 0xFF	; 255
 740:	f3 ec       	ldi	r31, 0xC3	; 195
 742:	29 e0       	ldi	r18, 0x09	; 9
 744:	e1 50       	subi	r30, 0x01	; 1
 746:	f0 40       	sbci	r31, 0x00	; 0
 748:	20 40       	sbci	r18, 0x00	; 0
 74a:	e1 f7       	brne	.-8      	; 0x744 <main+0x13e>
 74c:	00 c0       	rjmp	.+0      	; 0x74e <main+0x148>
 74e:	00 00       	nop
 750:	96 cf       	rjmp	.-212    	; 0x67e <main+0x78>

00000752 <__vector_1>:

/******************************************************************************
	RECEIVE interrupt on pin PD2|
******************************************************************************/
ISR(INT0_vect)
{
 752:	1f 92       	push	r1
 754:	0f 92       	push	r0
 756:	0f b6       	in	r0, 0x3f	; 63
 758:	0f 92       	push	r0
 75a:	11 24       	eor	r1, r1
 75c:	2f 93       	push	r18
 75e:	3f 93       	push	r19
 760:	4f 93       	push	r20
 762:	5f 93       	push	r21
 764:	6f 93       	push	r22
 766:	7f 93       	push	r23
 768:	8f 93       	push	r24
 76a:	9f 93       	push	r25
 76c:	af 93       	push	r26
 76e:	bf 93       	push	r27
 770:	ef 93       	push	r30
 772:	ff 93       	push	r31
	mcp2515_get_message(&spi_char);//get canbus message
 774:	8a e2       	ldi	r24, 0x2A	; 42
 776:	91 e0       	ldi	r25, 0x01	; 1
 778:	0e 94 ff 01 	call	0x3fe	; 0x3fe <mcp2515_get_message>
	rx_flag = 1;  //set flag
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <rx_flag>
}
 782:	ff 91       	pop	r31
 784:	ef 91       	pop	r30
 786:	bf 91       	pop	r27
 788:	af 91       	pop	r26
 78a:	9f 91       	pop	r25
 78c:	8f 91       	pop	r24
 78e:	7f 91       	pop	r23
 790:	6f 91       	pop	r22
 792:	5f 91       	pop	r21
 794:	4f 91       	pop	r20
 796:	3f 91       	pop	r19
 798:	2f 91       	pop	r18
 79a:	0f 90       	pop	r0
 79c:	0f be       	out	0x3f, r0	; 63
 79e:	0f 90       	pop	r0
 7a0:	1f 90       	pop	r1
 7a2:	18 95       	reti

000007a4 <__vector_21>:

/******************************************************************************* 
	 ADC conversion complete ISR|
*******************************************************************************/ 
ISR(ADC_vect) 
{ 
 7a4:	1f 92       	push	r1
 7a6:	0f 92       	push	r0
 7a8:	0f b6       	in	r0, 0x3f	; 63
 7aa:	0f 92       	push	r0
 7ac:	11 24       	eor	r1, r1
 7ae:	2f 93       	push	r18
 7b0:	3f 93       	push	r19
 7b2:	8f 93       	push	r24
 7b4:	ef 93       	push	r30
 7b6:	ff 93       	push	r31
	voltage_sense[adc_select] = ADC;
 7b8:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
 7bc:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 7c0:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 7c4:	e8 2f       	mov	r30, r24
 7c6:	f0 e0       	ldi	r31, 0x00	; 0
 7c8:	ee 0f       	add	r30, r30
 7ca:	ff 1f       	adc	r31, r31
 7cc:	e0 5c       	subi	r30, 0xC0	; 192
 7ce:	fe 4f       	sbci	r31, 0xFE	; 254
 7d0:	31 83       	std	Z+1, r19	; 0x01
 7d2:	20 83       	st	Z, r18
	
	adc_select++;
 7d4:	8f 5f       	subi	r24, 0xFF	; 255
	if(adc_select > 3)
 7d6:	84 30       	cpi	r24, 0x04	; 4
 7d8:	18 f4       	brcc	.+6      	; 0x7e0 <__vector_21+0x3c>
*******************************************************************************/ 
ISR(ADC_vect) 
{ 
	voltage_sense[adc_select] = ADC;
	
	adc_select++;
 7da:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
 7de:	02 c0       	rjmp	.+4      	; 0x7e4 <__vector_21+0x40>
	if(adc_select > 3)
		adc_select = 0;
 7e0:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__data_end>
}
 7e4:	ff 91       	pop	r31
 7e6:	ef 91       	pop	r30
 7e8:	8f 91       	pop	r24
 7ea:	3f 91       	pop	r19
 7ec:	2f 91       	pop	r18
 7ee:	0f 90       	pop	r0
 7f0:	0f be       	out	0x3f, r0	; 63
 7f2:	0f 90       	pop	r0
 7f4:	1f 90       	pop	r1
 7f6:	18 95       	reti

000007f8 <_exit>:
 7f8:	f8 94       	cli

000007fa <__stop_program>:
 7fa:	ff cf       	rjmp	.-2      	; 0x7fa <__stop_program>
