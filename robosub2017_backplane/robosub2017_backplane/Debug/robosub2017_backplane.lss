
robosub2017_backplane.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00000b6c  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  0080013c  0080013c  00000c3c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c3c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014e0  00000000  00000000  00000d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000350  00000000  00000000  00002254  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a84  00000000  00000000  000025a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000360  00000000  00000000  00003028  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008a9  00000000  00000000  00003388  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c67  00000000  00000000  00003c31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004898  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <__vector_1>
   8:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
   c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  10:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  14:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  18:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  1c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  20:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  24:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  28:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  2c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  30:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  34:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  38:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  3c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  40:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  44:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  48:	0c 94 83 04 	jmp	0x906	; 0x906 <__vector_18>
  4c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  50:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  54:	0c 94 19 04 	jmp	0x832	; 0x832 <__vector_21>
  58:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  5c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  60:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  64:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  68:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  6c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  70:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  74:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  78:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  7c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  80:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  84:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  88:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  8c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  90:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  94:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  98:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  9c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  a0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  a4:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  a8:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  ac:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  b0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__bad_interrupt>
  b4:	df 04       	cpc	r13, r15
  b6:	fa 04       	cpc	r15, r10
  b8:	13 05       	cpc	r17, r3
  ba:	2c 05       	cpc	r18, r12
  bc:	45 05       	cpc	r20, r5
  be:	5e 05       	cpc	r21, r14
  c0:	77 05       	cpc	r23, r7
  c2:	90 05       	cpc	r25, r0
  c4:	9a 05       	cpc	r25, r10
  c6:	9a 05       	cpc	r25, r10
  c8:	9a 05       	cpc	r25, r10
  ca:	9a 05       	cpc	r25, r10
  cc:	9a 05       	cpc	r25, r10
  ce:	9a 05       	cpc	r25, r10
  d0:	9a 05       	cpc	r25, r10
  d2:	a4 04       	cpc	r10, r4
  d4:	9a 05       	cpc	r25, r10
  d6:	9a 05       	cpc	r25, r10
  d8:	9a 05       	cpc	r25, r10
  da:	9a 05       	cpc	r25, r10
  dc:	9a 05       	cpc	r25, r10
  de:	9a 05       	cpc	r25, r10
  e0:	9a 05       	cpc	r25, r10
  e2:	9a 05       	cpc	r25, r10
  e4:	9a 05       	cpc	r25, r10
  e6:	9a 05       	cpc	r25, r10
  e8:	9a 05       	cpc	r25, r10
  ea:	9a 05       	cpc	r25, r10
  ec:	9a 05       	cpc	r25, r10
  ee:	9a 05       	cpc	r25, r10
  f0:	9a 05       	cpc	r25, r10
  f2:	b7 04       	cpc	r11, r7

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	d8 e0       	ldi	r29, 0x08	; 8
  fc:	de bf       	out	0x3e, r29	; 62
  fe:	cd bf       	out	0x3d, r28	; 61

00000100 <__do_copy_data>:
 100:	11 e0       	ldi	r17, 0x01	; 1
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b1 e0       	ldi	r27, 0x01	; 1
 106:	ec e6       	ldi	r30, 0x6C	; 108
 108:	fb e0       	ldi	r31, 0x0B	; 11
 10a:	02 c0       	rjmp	.+4      	; 0x110 <__do_copy_data+0x10>
 10c:	05 90       	lpm	r0, Z+
 10e:	0d 92       	st	X+, r0
 110:	ac 33       	cpi	r26, 0x3C	; 60
 112:	b1 07       	cpc	r27, r17
 114:	d9 f7       	brne	.-10     	; 0x10c <__do_copy_data+0xc>

00000116 <__do_clear_bss>:
 116:	21 e0       	ldi	r18, 0x01	; 1
 118:	ac e3       	ldi	r26, 0x3C	; 60
 11a:	b1 e0       	ldi	r27, 0x01	; 1
 11c:	01 c0       	rjmp	.+2      	; 0x120 <.do_clear_bss_start>

0000011e <.do_clear_bss_loop>:
 11e:	1d 92       	st	X+, r1

00000120 <.do_clear_bss_start>:
 120:	ac 35       	cpi	r26, 0x5C	; 92
 122:	b2 07       	cpc	r27, r18
 124:	e1 f7       	brne	.-8      	; 0x11e <.do_clear_bss_loop>
 126:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <main>
 12a:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <_exit>

0000012e <__bad_interrupt>:
 12e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000132 <GPIO_init>:
 https://www.arduino.cc/en/Reference/Map 
******************************************************************************/ 
long map(long x, long in_min, long in_max, long out_min, long out_max) 
{ 
 return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min; 
 132:	52 98       	cbi	0x0a, 2	; 10
 134:	53 9a       	sbi	0x0a, 3	; 10
 136:	54 9a       	sbi	0x0a, 4	; 10
 138:	55 9a       	sbi	0x0a, 5	; 10
 13a:	56 9a       	sbi	0x0a, 6	; 10
 13c:	6a 98       	cbi	0x0d, 2	; 13
 13e:	6b 98       	cbi	0x0d, 3	; 13
 140:	38 98       	cbi	0x07, 0	; 7
 142:	39 98       	cbi	0x07, 1	; 7
 144:	08 95       	ret

00000146 <INTERRUPT_init>:
 146:	e8 9a       	sbi	0x1d, 0	; 29
 148:	e9 e6       	ldi	r30, 0x69	; 105
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	8c 7f       	andi	r24, 0xFC	; 252
 150:	80 83       	st	Z, r24
 152:	78 94       	sei
 154:	08 95       	ret

00000156 <ADC_init>:
 156:	ec e7       	ldi	r30, 0x7C	; 124
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	80 64       	ori	r24, 0x40	; 64
 15e:	80 83       	st	Z, r24
 160:	ea e7       	ldi	r30, 0x7A	; 122
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	88 6a       	ori	r24, 0xA8	; 168
 168:	80 83       	st	Z, r24
 16a:	08 95       	ret

0000016c <SPI_masterInit>:

******************************************************************************/
void SPI_masterInit(void)
{
	//set SS, MOSI, & SCK OUTPUT
	SET_OUTPUT(SS);
 16c:	22 9a       	sbi	0x04, 2	; 4
	SET_OUTPUT(MOSI);
 16e:	23 9a       	sbi	0x04, 3	; 4
	SET_OUTPUT(SCK);
 170:	25 9a       	sbi	0x04, 5	; 4
	
	//SS high
	SET_H(SS);
 172:	2a 9a       	sbi	0x05, 2	; 5
	// MOSI & SCK low
	SET_L(MOSI);
 174:	2b 98       	cbi	0x05, 3	; 5
	SET_L(SCK);
 176:	2d 98       	cbi	0x05, 5	; 5
	
	//enable SPI
	SPCR0 |= (1<<SPE) | (1<<MSTR);
 178:	8c b5       	in	r24, 0x2c	; 44
 17a:	80 65       	ori	r24, 0x50	; 80
 17c:	8c bd       	out	0x2c, r24	; 44
	
	//set SCK divider to f_osc/8
	SPCR0 |= 0b11; //sets divider to f_osc/16
 17e:	8c b5       	in	r24, 0x2c	; 44
 180:	83 60       	ori	r24, 0x03	; 3
 182:	8c bd       	out	0x2c, r24	; 44
 184:	08 95       	ret

00000186 <SPI_txrx>:
	//SPSR |= 1; //f_osc * 2, results in f_osc/8
}

char SPI_txrx(char val)
{
	SPDR0 = val; //send value to buffer
 186:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR0 & (1<<SPIF))); //wait until complete
 188:	0d b4       	in	r0, 0x2d	; 45
 18a:	07 fe       	sbrs	r0, 7
 18c:	fd cf       	rjmp	.-6      	; 0x188 <SPI_txrx+0x2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	87 ec       	ldi	r24, 0xC7	; 199
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <SPI_txrx+0xc>
 196:	00 c0       	rjmp	.+0      	; 0x198 <SPI_txrx+0x12>
 198:	00 00       	nop
	_delay_us(50);
	return(SPDR0);  //return received value
 19a:	8e b5       	in	r24, 0x2e	; 46
 19c:	08 95       	ret

0000019e <mcp2515_write_register>:
	uint8_t data[8];
} tCAN;


void mcp2515_write_register( uint8_t adress, uint8_t data )
{
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	d8 2f       	mov	r29, r24
 1a4:	c6 2f       	mov	r28, r22
	SET_L(SS);//enable slave
 1a6:	2a 98       	cbi	0x05, 2	; 5

	SPI_txrx(CAN_WRITE);//send write instruction
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SPI_txrx(adress);//send address
 1ae:	8d 2f       	mov	r24, r29
 1b0:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SPI_txrx(data);//send value
 1b4:	8c 2f       	mov	r24, r28
 1b6:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>

	SET_H(SS);//disable slave
 1ba:	2a 9a       	sbi	0x05, 2	; 5
}
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <mcp2515_read_register>:

uint8_t mcp2515_read_register(uint8_t adress)
{
 1c2:	cf 93       	push	r28
 1c4:	c8 2f       	mov	r28, r24
	uint8_t data;

	SET_L(SS);//enable slave
 1c6:	2a 98       	cbi	0x05, 2	; 5

	SPI_txrx(CAN_READ);
 1c8:	83 e0       	ldi	r24, 0x03	; 3
 1ca:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SPI_txrx(adress);
 1ce:	8c 2f       	mov	r24, r28
 1d0:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>

	data = SPI_txrx(0xff);
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>

	SET_H(SS);//disable slave
 1da:	2a 9a       	sbi	0x05, 2	; 5

	return data;
}
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <mcp2515_bit_modify>:

// -------------------------------------------------------------------------
void mcp2515_bit_modify(uint8_t adress, uint8_t mask, uint8_t data)
{
 1e0:	1f 93       	push	r17
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	18 2f       	mov	r17, r24
 1e8:	d6 2f       	mov	r29, r22
 1ea:	c4 2f       	mov	r28, r20
	SET_L(SS);
 1ec:	2a 98       	cbi	0x05, 2	; 5

	SPI_txrx(CAN_BIT_MODIFY);
 1ee:	85 e0       	ldi	r24, 0x05	; 5
 1f0:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SPI_txrx(adress);
 1f4:	81 2f       	mov	r24, r17
 1f6:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SPI_txrx(mask);
 1fa:	8d 2f       	mov	r24, r29
 1fc:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SPI_txrx(data);
 200:	8c 2f       	mov	r24, r28
 202:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>

	SET_H(SS);
 206:	2a 9a       	sbi	0x05, 2	; 5
}
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	1f 91       	pop	r17
 20e:	08 95       	ret

00000210 <mcp2515_read_status>:
// ----------------------------------------------------------------------------
uint8_t mcp2515_read_status(uint8_t type)
{
	uint8_t data;

	SET_L(SS);
 210:	2a 98       	cbi	0x05, 2	; 5

	SPI_txrx(type);
 212:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	data = SPI_txrx(0xff);
 216:	8f ef       	ldi	r24, 0xFF	; 255
 218:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>

	SET_H(SS);
 21c:	2a 9a       	sbi	0x05, 2	; 5

	return data;
}
 21e:	08 95       	ret

00000220 <mcp2515_init>:
			and receive filters for the canbus transceiver.
		
		
******************************************************************************/
uint8_t mcp2515_init(uint8_t speed)
{
 220:	cf 93       	push	r28
 222:	c8 2f       	mov	r28, r24

	// resets MCP2515 and puts it into configuration mode.
	SET_L(SS);
 224:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(CAN_RESET);
 226:	80 ec       	ldi	r24, 0xC0	; 192
 228:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SET_H(SS);
 22c:	2a 9a       	sbi	0x05, 2	; 5
 22e:	8a e6       	ldi	r24, 0x6A	; 106
 230:	8a 95       	dec	r24
 232:	f1 f7       	brne	.-4      	; 0x230 <mcp2515_init+0x10>
 234:	00 c0       	rjmp	.+0      	; 0x236 <mcp2515_init+0x16>
	//I had to increase this from 10 to 20, as otherwise it would fail.
	//		The MCP2515 needed more time to reset.
	_delay_us(20);

	// load CNF1..3 Register
	SET_L(SS);
 236:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(CAN_WRITE);
 238:	82 e0       	ldi	r24, 0x02	; 2
 23a:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SPI_txrx(CNF3);  //address 0x28
 23e:	88 e2       	ldi	r24, 0x28	; 40
 240:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>

	SPI_txrx((1<<PHSEG21));		// Bitrate 500 kbps at 16 MHz
 244:	82 e0       	ldi	r24, 0x02	; 2
 246:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>

	/*after tx the MCP2515 increments the address automatically, so you can
		continue to write into adjacent registers, so the next write goes into
		0x29, the location of CNF2*/
	SPI_txrx((1<<BTLMODE)|(1<<PHSEG11));//CFN2
 24a:	80 e9       	ldi	r24, 0x90	; 144
 24c:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
    SPI_txrx(speed);//writes to BRPn of CNF1
 250:	8c 2f       	mov	r24, r28
 252:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>

	// activate interrupts
	SPI_txrx((1<<RX1IE)|(1<<RX0IE));
 256:	83 e0       	ldi	r24, 0x03	; 3
 258:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SET_H(SS);
 25c:	2a 9a       	sbi	0x05, 2	; 5

	// test if we could read back the value => is the chip accessible?
	if (mcp2515_read_register(CNF1) != speed) {
 25e:	8a e2       	ldi	r24, 0x2A	; 42
 260:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <mcp2515_read_register>
 264:	8c 17       	cp	r24, r28
 266:	19 f0       	breq	.+6      	; 0x26e <mcp2515_init+0x4e>
		SET_H(LED4);
 268:	5e 9a       	sbi	0x0b, 6	; 11

		return false;
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	7e c0       	rjmp	.+252    	; 0x36a <mcp2515_init+0x14a>
	}

	// deactivate the RXnBF Pins (High Impedance State)
	mcp2515_write_register(BFPCTRL, 0);
 26e:	60 e0       	ldi	r22, 0x00	; 0
 270:	8c e0       	ldi	r24, 0x0C	; 12
 272:	0e 94 cf 00 	call	0x19e	; 0x19e <mcp2515_write_register>

	// set TXnRTS as inputs
	mcp2515_write_register(TXRTSCTRL, 0);
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	8d e0       	ldi	r24, 0x0D	; 13
 27a:	0e 94 cf 00 	call	0x19e	; 0x19e <mcp2515_write_register>
	//mcp2515_write_register(RXB0CTRL, (1<<RXM0));//buffer0
	//mcp2515_write_register(RXB1CTRL, (1<<RXM0));//buffer1

	//Receive Masking:
	//block all ID's other than the exact RxID for buffer0
	SET_L(SS);
 27e:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(CAN_WRITE);
 280:	82 e0       	ldi	r24, 0x02	; 2
 282:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SPI_txrx(RXM0SIDH);
 286:	80 e2       	ldi	r24, 0x20	; 32
 288:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SPI_txrx(RXMaskHi);
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SPI_txrx(RxMaskLow);
 292:	80 ee       	ldi	r24, 0xE0	; 224
 294:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SET_H(SS);
 298:	2a 9a       	sbi	0x05, 2	; 5
// 	mcp2515_write_register(RXM0SIDH, 0xFF);
// 	mcp2515_write_register(RXM0SIDL, 0xE0);
	//block all ID's other than the exact RxID for buffer1
	SET_L(SS);
 29a:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(CAN_WRITE);
 29c:	82 e0       	ldi	r24, 0x02	; 2
 29e:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SPI_txrx(RXM1SIDH);
 2a2:	84 e2       	ldi	r24, 0x24	; 36
 2a4:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SPI_txrx(RXMaskHi);
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SPI_txrx(RxMaskLow);
 2ae:	80 ee       	ldi	r24, 0xE0	; 224
 2b0:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SET_H(SS);
 2b4:	2a 9a       	sbi	0x05, 2	; 5
// 	mcp2515_write_register(RXM1SIDH, 0xFF);
// 	mcp2515_write_register(RXM1SIDL, 0xE0);

	//Set RxID
	SET_L(SS);
 2b6:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(CAN_WRITE);
 2b8:	82 e0       	ldi	r24, 0x02	; 2
 2ba:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SPI_txrx(RXF0SIDH);
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SPI_txrx(Rx0IDHi);
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SPI_txrx(Rx0IDLow);
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SET_H(SS);
 2d0:	2a 9a       	sbi	0x05, 2	; 5
// 	mcp2515_write_register(RXF0SIDH, RxIDHi);//filter0
// 	mcp2515_write_register(RXF0SIDL, RxIDLow);

	SET_L(SS);
 2d2:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(CAN_WRITE);
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SPI_txrx(RXF1SIDH);
 2da:	84 e0       	ldi	r24, 0x04	; 4
 2dc:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SPI_txrx(Rx1IDHi);
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SPI_txrx(Rx1IDLow);
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SET_H(SS);
 2ec:	2a 9a       	sbi	0x05, 2	; 5
// 	mcp2515_write_register(RXF1SIDH, RxIDHi);//filter1
// 	mcp2515_write_register(RXF1SIDL, RxIDLow);
	SET_L(SS);
 2ee:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(CAN_WRITE);
 2f0:	82 e0       	ldi	r24, 0x02	; 2
 2f2:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SPI_txrx(RXF2SIDH);
 2f6:	88 e0       	ldi	r24, 0x08	; 8
 2f8:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SPI_txrx(Rx2IDHi);
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SPI_txrx(Rx2IDLow);
 302:	80 e2       	ldi	r24, 0x20	; 32
 304:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SET_H(SS);
 308:	2a 9a       	sbi	0x05, 2	; 5
// 	mcp2515_write_register(RXF2SIDH, RxIDHi);//filter2
// 	mcp2515_write_register(RXF2SIDL, RxIDLow);
	SET_L(SS);
 30a:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(CAN_WRITE);
 30c:	82 e0       	ldi	r24, 0x02	; 2
 30e:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SPI_txrx(RXF3SIDH);
 312:	80 e1       	ldi	r24, 0x10	; 16
 314:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SPI_txrx(Rx3IDHi);
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SPI_txrx(Rx3IDLow);
 31e:	80 e2       	ldi	r24, 0x20	; 32
 320:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SET_H(SS);
 324:	2a 9a       	sbi	0x05, 2	; 5
// 	mcp2515_write_register(RXF3SIDH, RxIDHi);//filter3
// 	mcp2515_write_register(RXF3SIDL, RxIDLow);
	SET_L(SS);
 326:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(CAN_WRITE);
 328:	82 e0       	ldi	r24, 0x02	; 2
 32a:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SPI_txrx(RXF4SIDH);
 32e:	84 e1       	ldi	r24, 0x14	; 20
 330:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SPI_txrx(Rx4IDHi);
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SPI_txrx(Rx4IDLow);
 33a:	80 e2       	ldi	r24, 0x20	; 32
 33c:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SET_H(SS);
 340:	2a 9a       	sbi	0x05, 2	; 5
// 	mcp2515_write_register(RXF4SIDH, RxIDHi);//filter4
// 	mcp2515_write_register(RXF4SIDL, RxIDLow);

	SET_L(SS);
 342:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(CAN_WRITE);
 344:	82 e0       	ldi	r24, 0x02	; 2
 346:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SPI_txrx(RXF5SIDH);
 34a:	88 e1       	ldi	r24, 0x18	; 24
 34c:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SPI_txrx(Rx5IDHi);
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SPI_txrx(Rx5IDLow);
 356:	80 e2       	ldi	r24, 0x20	; 32
 358:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SET_H(SS);
 35c:	2a 9a       	sbi	0x05, 2	; 5
	// 	mcp2515_write_register(RXF4SIDL, RxIDLow);

/******************************************************************************/

	// reset device to normal mode
	mcp2515_write_register(CANCTRL, 0);
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	8f e0       	ldi	r24, 0x0F	; 15
 362:	0e 94 cf 00 	call	0x19e	; 0x19e <mcp2515_write_register>
	SET_L(LED4);
 366:	5e 98       	cbi	0x0b, 6	; 11
	return true;
 368:	81 e0       	ldi	r24, 0x01	; 1
}
 36a:	cf 91       	pop	r28
 36c:	08 95       	ret

0000036e <mcp2515_get_message>:

// ----------------------------------------------------------------------------
uint8_t mcp2515_get_message(tCAN *message)
{
 36e:	cf 92       	push	r12
 370:	df 92       	push	r13
 372:	ef 92       	push	r14
 374:	ff 92       	push	r15
 376:	0f 93       	push	r16
 378:	1f 93       	push	r17
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
 37e:	1f 92       	push	r1
 380:	cd b7       	in	r28, 0x3d	; 61
 382:	de b7       	in	r29, 0x3e	; 62
 384:	6c 01       	movw	r12, r24
	// read status
	uint8_t status = mcp2515_read_status(CAN_RX_STATUS);
 386:	80 eb       	ldi	r24, 0xB0	; 176
 388:	0e 94 08 01 	call	0x210	; 0x210 <mcp2515_read_status>
 38c:	89 83       	std	Y+1, r24	; 0x01
	uint8_t addr;
	uint8_t t;
	if (bit_is_set(status,6)) {
 38e:	99 81       	ldd	r25, Y+1	; 0x01
 390:	89 2f       	mov	r24, r25
 392:	80 74       	andi	r24, 0x40	; 64
 394:	96 fd       	sbrc	r25, 6
 396:	06 c0       	rjmp	.+12     	; 0x3a4 <mcp2515_get_message+0x36>
		// message in buffer 0
		addr = CAN_READ_RX_BUFF;
	}
	else if (bit_is_set(status,7)) {
 398:	99 81       	ldd	r25, Y+1	; 0x01
 39a:	99 23       	and	r25, r25
 39c:	0c f0       	brlt	.+2      	; 0x3a0 <mcp2515_get_message+0x32>
 39e:	5e c0       	rjmp	.+188    	; 0x45c <__FUSE_REGION_LENGTH__+0x5c>
		// message in buffer 1
		addr = CAN_READ_RX_BUFF | 0x04;
 3a0:	84 e9       	ldi	r24, 0x94	; 148
 3a2:	01 c0       	rjmp	.+2      	; 0x3a6 <mcp2515_get_message+0x38>
	uint8_t status = mcp2515_read_status(CAN_RX_STATUS);
	uint8_t addr;
	uint8_t t;
	if (bit_is_set(status,6)) {
		// message in buffer 0
		addr = CAN_READ_RX_BUFF;
 3a4:	80 e9       	ldi	r24, 0x90	; 144
	else {
		// Error: no message available
		return 0;
	}

	SET_L(SS);
 3a6:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(addr);
 3a8:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>

	// read id
	message->id  = (uint16_t) SPI_txrx(0xff) << 3;
 3ac:	8f ef       	ldi	r24, 0xFF	; 255
 3ae:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
 3b2:	28 e0       	ldi	r18, 0x08	; 8
 3b4:	82 9f       	mul	r24, r18
 3b6:	c0 01       	movw	r24, r0
 3b8:	11 24       	eor	r1, r1
 3ba:	f6 01       	movw	r30, r12
 3bc:	91 83       	std	Z+1, r25	; 0x01
 3be:	80 83       	st	Z, r24
	message->id |=            SPI_txrx(0xff) >> 5;
 3c0:	8f ef       	ldi	r24, 0xFF	; 255
 3c2:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
 3c6:	28 2f       	mov	r18, r24
 3c8:	22 95       	swap	r18
 3ca:	26 95       	lsr	r18
 3cc:	27 70       	andi	r18, 0x07	; 7
 3ce:	f6 01       	movw	r30, r12
 3d0:	80 81       	ld	r24, Z
 3d2:	91 81       	ldd	r25, Z+1	; 0x01
 3d4:	82 2b       	or	r24, r18
 3d6:	91 83       	std	Z+1, r25	; 0x01
 3d8:	80 83       	st	Z, r24

	SPI_txrx(0xff);
 3da:	8f ef       	ldi	r24, 0xFF	; 255
 3dc:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SPI_txrx(0xff);
 3e0:	8f ef       	ldi	r24, 0xFF	; 255
 3e2:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>

	// read DLC
	uint8_t length = SPI_txrx(0xff) & 0x0f;
 3e6:	8f ef       	ldi	r24, 0xFF	; 255
 3e8:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
 3ec:	98 2f       	mov	r25, r24
 3ee:	9f 70       	andi	r25, 0x0F	; 15

	message->header.length = length;
 3f0:	29 2f       	mov	r18, r25
 3f2:	22 0f       	add	r18, r18
 3f4:	f6 01       	movw	r30, r12
 3f6:	82 81       	ldd	r24, Z+2	; 0x02
 3f8:	81 7e       	andi	r24, 0xE1	; 225
 3fa:	82 2b       	or	r24, r18
 3fc:	82 83       	std	Z+2, r24	; 0x02
	message->header.rtr = (bit_is_set(status, 3)) ? 1 : 0;
 3fe:	29 81       	ldd	r18, Y+1	; 0x01
 400:	23 fb       	bst	r18, 3
 402:	22 27       	eor	r18, r18
 404:	20 f9       	bld	r18, 0
 406:	20 fb       	bst	r18, 0
 408:	80 f9       	bld	r24, 0
 40a:	82 83       	std	Z+2, r24	; 0x02

	// read data
	for (t=0;t<length;t++) {
 40c:	99 23       	and	r25, r25
 40e:	a1 f0       	breq	.+40     	; 0x438 <__FUSE_REGION_LENGTH__+0x38>
 410:	86 01       	movw	r16, r12
 412:	0d 5f       	subi	r16, 0xFD	; 253
 414:	1f 4f       	sbci	r17, 0xFF	; 255
 416:	91 50       	subi	r25, 0x01	; 1
 418:	e9 2e       	mov	r14, r25
 41a:	f1 2c       	mov	r15, r1
 41c:	f4 e0       	ldi	r31, 0x04	; 4
 41e:	ef 0e       	add	r14, r31
 420:	f1 1c       	adc	r15, r1
 422:	ec 0c       	add	r14, r12
 424:	fd 1c       	adc	r15, r13
		message->data[t] = SPI_txrx(0xff);
 426:	8f ef       	ldi	r24, 0xFF	; 255
 428:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
 42c:	f8 01       	movw	r30, r16
 42e:	81 93       	st	Z+, r24
 430:	8f 01       	movw	r16, r30

	message->header.length = length;
	message->header.rtr = (bit_is_set(status, 3)) ? 1 : 0;

	// read data
	for (t=0;t<length;t++) {
 432:	ee 15       	cp	r30, r14
 434:	ff 05       	cpc	r31, r15
 436:	b9 f7       	brne	.-18     	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
		message->data[t] = SPI_txrx(0xff);
	}
	SET_H(SS);
 438:	2a 9a       	sbi	0x05, 2	; 5

	// clear interrupt flag
	if (bit_is_set(status, 6)) {
 43a:	89 81       	ldd	r24, Y+1	; 0x01
 43c:	86 ff       	sbrs	r24, 6
 43e:	06 c0       	rjmp	.+12     	; 0x44c <__FUSE_REGION_LENGTH__+0x4c>
		mcp2515_bit_modify(CANINTF, (1<<RX0IF), 0);
 440:	40 e0       	ldi	r20, 0x00	; 0
 442:	61 e0       	ldi	r22, 0x01	; 1
 444:	8c e2       	ldi	r24, 0x2C	; 44
 446:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <mcp2515_bit_modify>
 44a:	05 c0       	rjmp	.+10     	; 0x456 <__FUSE_REGION_LENGTH__+0x56>
	}
	else {
		mcp2515_bit_modify(CANINTF, (1<<RX1IF), 0);
 44c:	40 e0       	ldi	r20, 0x00	; 0
 44e:	62 e0       	ldi	r22, 0x02	; 2
 450:	8c e2       	ldi	r24, 0x2C	; 44
 452:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <mcp2515_bit_modify>
	}

	return (status & 0x07) + 1;
 456:	89 81       	ldd	r24, Y+1	; 0x01
 458:	87 70       	andi	r24, 0x07	; 7
 45a:	8f 5f       	subi	r24, 0xFF	; 255
}
 45c:	0f 90       	pop	r0
 45e:	df 91       	pop	r29
 460:	cf 91       	pop	r28
 462:	1f 91       	pop	r17
 464:	0f 91       	pop	r16
 466:	ff 90       	pop	r15
 468:	ef 90       	pop	r14
 46a:	df 90       	pop	r13
 46c:	cf 90       	pop	r12
 46e:	08 95       	ret

00000470 <mcp2515_send_message>:

// ----------------------------------------------------------------------------
uint8_t mcp2515_send_message(tCAN *message)
{
 470:	bf 92       	push	r11
 472:	cf 92       	push	r12
 474:	df 92       	push	r13
 476:	ef 92       	push	r14
 478:	ff 92       	push	r15
 47a:	0f 93       	push	r16
 47c:	1f 93       	push	r17
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
 482:	1f 92       	push	r1
 484:	cd b7       	in	r28, 0x3d	; 61
 486:	de b7       	in	r29, 0x3e	; 62
 488:	6c 01       	movw	r12, r24
	uint8_t status = mcp2515_read_status(CAN_READ_STATUS);
 48a:	80 ea       	ldi	r24, 0xA0	; 160
 48c:	0e 94 08 01 	call	0x210	; 0x210 <mcp2515_read_status>
 490:	89 83       	std	Y+1, r24	; 0x01
	   6	TXB2CNTRL.TXREQ
	 */
	uint8_t address;
	uint8_t t;

	if (bit_is_clear(status, 2)) {
 492:	89 81       	ldd	r24, Y+1	; 0x01
 494:	82 ff       	sbrs	r24, 2
 496:	0a c0       	rjmp	.+20     	; 0x4ac <mcp2515_send_message+0x3c>
		address = 0x00;
	}
	else if (bit_is_clear(status, 4)) {
 498:	89 81       	ldd	r24, Y+1	; 0x01
 49a:	84 ff       	sbrs	r24, 4
 49c:	09 c0       	rjmp	.+18     	; 0x4b0 <mcp2515_send_message+0x40>
		address = 0x02;
	}
	else if (bit_is_clear(status, 6)) {
 49e:	89 81       	ldd	r24, Y+1	; 0x01
 4a0:	86 fd       	sbrc	r24, 6
 4a2:	69 c0       	rjmp	.+210    	; 0x576 <mcp2515_send_message+0x106>
		address = 0x04;
 4a4:	68 94       	set
 4a6:	bb 24       	eor	r11, r11
 4a8:	b2 f8       	bld	r11, 2
 4aa:	05 c0       	rjmp	.+10     	; 0x4b6 <mcp2515_send_message+0x46>
	 */
	uint8_t address;
	uint8_t t;

	if (bit_is_clear(status, 2)) {
		address = 0x00;
 4ac:	b1 2c       	mov	r11, r1
 4ae:	03 c0       	rjmp	.+6      	; 0x4b6 <mcp2515_send_message+0x46>
	}
	else if (bit_is_clear(status, 4)) {
		address = 0x02;
 4b0:	68 94       	set
 4b2:	bb 24       	eor	r11, r11
 4b4:	b1 f8       	bld	r11, 1
	else {
		// all buffer used => could not send message
		return 0;
	}

	SET_L(SS);
 4b6:	2a 98       	cbi	0x05, 2	; 5
	SPI_txrx(CAN_LOAD_TX_BUFF | address);
 4b8:	8b 2d       	mov	r24, r11
 4ba:	80 64       	ori	r24, 0x40	; 64
 4bc:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>

	//split 11bit ID into it's respective register positions
	SPI_txrx(message->id >> 3);
 4c0:	d6 01       	movw	r26, r12
 4c2:	8d 91       	ld	r24, X+
 4c4:	9c 91       	ld	r25, X
 4c6:	96 95       	lsr	r25
 4c8:	87 95       	ror	r24
 4ca:	96 95       	lsr	r25
 4cc:	87 95       	ror	r24
 4ce:	96 95       	lsr	r25
 4d0:	87 95       	ror	r24
 4d2:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
    SPI_txrx(message->id << 5);
 4d6:	f6 01       	movw	r30, r12
 4d8:	80 81       	ld	r24, Z
 4da:	82 95       	swap	r24
 4dc:	88 0f       	add	r24, r24
 4de:	80 7e       	andi	r24, 0xE0	; 224
 4e0:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>

	SPI_txrx(0);
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SPI_txrx(0);
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>

	uint8_t length = message->header.length & 0x0f;
 4f0:	d6 01       	movw	r26, r12
 4f2:	12 96       	adiw	r26, 0x02	; 2
 4f4:	8c 91       	ld	r24, X
 4f6:	e8 2e       	mov	r14, r24
 4f8:	e6 94       	lsr	r14
 4fa:	be 2d       	mov	r27, r14
 4fc:	bf 70       	andi	r27, 0x0F	; 15
 4fe:	eb 2e       	mov	r14, r27

	if (message->header.rtr) {
 500:	80 ff       	sbrs	r24, 0
 502:	05 c0       	rjmp	.+10     	; 0x50e <mcp2515_send_message+0x9e>
		// a rtr-frame has a length, but contains no data
		SPI_txrx((1<<RTR) | length);
 504:	8b 2f       	mov	r24, r27
 506:	80 64       	ori	r24, 0x40	; 64
 508:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
 50c:	17 c0       	rjmp	.+46     	; 0x53c <mcp2515_send_message+0xcc>
	}
	else {
		// set message length
		SPI_txrx(length);
 50e:	8b 2f       	mov	r24, r27
 510:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>

		// data
		for (t=0;t<length;t++) {
 514:	ee 20       	and	r14, r14
 516:	91 f0       	breq	.+36     	; 0x53c <mcp2515_send_message+0xcc>
 518:	86 01       	movw	r16, r12
 51a:	0d 5f       	subi	r16, 0xFD	; 253
 51c:	1f 4f       	sbci	r17, 0xFF	; 255
 51e:	ea 94       	dec	r14
 520:	f1 2c       	mov	r15, r1
 522:	e4 e0       	ldi	r30, 0x04	; 4
 524:	ee 0e       	add	r14, r30
 526:	f1 1c       	adc	r15, r1
 528:	ec 0c       	add	r14, r12
 52a:	fd 1c       	adc	r15, r13
			SPI_txrx(message->data[t]);
 52c:	d8 01       	movw	r26, r16
 52e:	8d 91       	ld	r24, X+
 530:	8d 01       	movw	r16, r26
 532:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	else {
		// set message length
		SPI_txrx(length);

		// data
		for (t=0;t<length;t++) {
 536:	0e 15       	cp	r16, r14
 538:	1f 05       	cpc	r17, r15
 53a:	c1 f7       	brne	.-16     	; 0x52c <mcp2515_send_message+0xbc>
			SPI_txrx(message->data[t]);
		}
	}
	SET_H(SS);
 53c:	2a 9a       	sbi	0x05, 2	; 5
 53e:	b5 e0       	ldi	r27, 0x05	; 5
 540:	ba 95       	dec	r27
 542:	f1 f7       	brne	.-4      	; 0x540 <mcp2515_send_message+0xd0>
 544:	00 00       	nop

	//Wait for message to "settle" in register
	_delay_us(1);

	// send message
	SET_L(SS);
 546:	2a 98       	cbi	0x05, 2	; 5
	address = (address == 0) ? 1 : address;
 548:	b1 10       	cpse	r11, r1
 54a:	02 c0       	rjmp	.+4      	; 0x550 <mcp2515_send_message+0xe0>
 54c:	bb 24       	eor	r11, r11
 54e:	b3 94       	inc	r11
	SPI_txrx(CAN_RTS | address);
 550:	8b 2d       	mov	r24, r11
 552:	80 68       	ori	r24, 0x80	; 128
 554:	0e 94 c3 00 	call	0x186	; 0x186 <SPI_txrx>
	SET_H(SS);
 558:	2a 9a       	sbi	0x05, 2	; 5
	
	message->id = 0;
 55a:	f6 01       	movw	r30, r12
 55c:	11 82       	std	Z+1, r1	; 0x01
 55e:	10 82       	st	Z, r1
	message->header.rtr = 0;
 560:	82 81       	ldd	r24, Z+2	; 0x02
	message->header.length = 0;
 562:	80 7e       	andi	r24, 0xE0	; 224
 564:	82 83       	std	Z+2, r24	; 0x02
	memset(message->data, 0, sizeof(message->data));
 566:	33 96       	adiw	r30, 0x03	; 3
 568:	88 e0       	ldi	r24, 0x08	; 8
 56a:	df 01       	movw	r26, r30
 56c:	1d 92       	st	X+, r1
 56e:	8a 95       	dec	r24
 570:	e9 f7       	brne	.-6      	; 0x56c <mcp2515_send_message+0xfc>
	
	
	

	return address;
 572:	8b 2d       	mov	r24, r11
 574:	01 c0       	rjmp	.+2      	; 0x578 <mcp2515_send_message+0x108>
	else if (bit_is_clear(status, 6)) {
		address = 0x04;
	}
	else {
		// all buffer used => could not send message
		return 0;
 576:	80 e0       	ldi	r24, 0x00	; 0
	
	
	

	return address;
 578:	0f 90       	pop	r0
 57a:	df 91       	pop	r29
 57c:	cf 91       	pop	r28
 57e:	1f 91       	pop	r17
 580:	0f 91       	pop	r16
 582:	ff 90       	pop	r15
 584:	ef 90       	pop	r14
 586:	df 90       	pop	r13
 588:	cf 90       	pop	r12
 58a:	bf 90       	pop	r11
 58c:	08 95       	ret

0000058e <USART_Init>:
	USART initialization|
******************************************************************************/
void USART_Init( unsigned int ubrr)
{
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 58e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
 592:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
 596:	e1 ec       	ldi	r30, 0xC1	; 193
 598:	f0 e0       	ldi	r31, 0x00	; 0
 59a:	80 81       	ld	r24, Z
 59c:	88 69       	ori	r24, 0x98	; 152
 59e:	80 83       	st	Z, r24
		/*Enable receiver, transmitter, and receive interrupt */
	
	UCSR0C |= (3<<UCSZ00);
 5a0:	e2 ec       	ldi	r30, 0xC2	; 194
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	80 81       	ld	r24, Z
 5a6:	86 60       	ori	r24, 0x06	; 6
 5a8:	80 83       	st	Z, r24
 5aa:	08 95       	ret

000005ac <USART_Receive>:
		currently not used
******************************************************************************/
uint8_t USART_Receive( void )
{
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)));
 5ac:	e0 ec       	ldi	r30, 0xC0	; 192
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	80 81       	ld	r24, Z
 5b2:	88 23       	and	r24, r24
 5b4:	ec f7       	brge	.-6      	; 0x5b0 <USART_Receive+0x4>
	/* Get and return received data from buffer */
	return UDR0;
 5b6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 5ba:	08 95       	ret

000005bc <USART_Transmit>:
		transmits a character across the uart tx/rx pins
******************************************************************************/
void USART_Transmit( uint8_t data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
 5bc:	e0 ec       	ldi	r30, 0xC0	; 192
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	90 81       	ld	r25, Z
 5c2:	95 ff       	sbrs	r25, 5
 5c4:	fd cf       	rjmp	.-6      	; 0x5c0 <USART_Transmit+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
 5c6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 5ca:	08 95       	ret

000005cc <USART_Transmit_TX>:
	USART string transmit|
		parses a string argument and passes each character to the
		USART_Transmit function.
******************************************************************************/
void USART_Transmit_TX(char string[])
{
 5cc:	ef 92       	push	r14
 5ce:	ff 92       	push	r15
 5d0:	0f 93       	push	r16
 5d2:	1f 93       	push	r17
 5d4:	cf 93       	push	r28
 5d6:	df 93       	push	r29
	int wordsize = strlen(string);
 5d8:	fc 01       	movw	r30, r24
 5da:	01 90       	ld	r0, Z+
 5dc:	00 20       	and	r0, r0
 5de:	e9 f7       	brne	.-6      	; 0x5da <USART_Transmit_TX+0xe>
 5e0:	31 97       	sbiw	r30, 0x01	; 1
 5e2:	7f 01       	movw	r14, r30
 5e4:	e8 1a       	sub	r14, r24
 5e6:	f9 0a       	sbc	r15, r25
	int counter = 0;
	
	while(wordsize != counter)
 5e8:	61 f0       	breq	.+24     	; 0x602 <USART_Transmit_TX+0x36>
 5ea:	8c 01       	movw	r16, r24
 5ec:	c0 e0       	ldi	r28, 0x00	; 0
 5ee:	d0 e0       	ldi	r29, 0x00	; 0
	{
		USART_Transmit(string[counter]);
 5f0:	f8 01       	movw	r30, r16
 5f2:	81 91       	ld	r24, Z+
 5f4:	8f 01       	movw	r16, r30
 5f6:	0e 94 de 02 	call	0x5bc	; 0x5bc <USART_Transmit>
		counter++;
 5fa:	21 96       	adiw	r28, 0x01	; 1
void USART_Transmit_TX(char string[])
{
	int wordsize = strlen(string);
	int counter = 0;
	
	while(wordsize != counter)
 5fc:	ec 16       	cp	r14, r28
 5fe:	fd 06       	cpc	r15, r29
 600:	b9 f7       	brne	.-18     	; 0x5f0 <USART_Transmit_TX+0x24>
	{
		USART_Transmit(string[counter]);
		counter++;
	}
}
 602:	df 91       	pop	r29
 604:	cf 91       	pop	r28
 606:	1f 91       	pop	r17
 608:	0f 91       	pop	r16
 60a:	ff 90       	pop	r15
 60c:	ef 90       	pop	r14
 60e:	08 95       	ret

00000610 <USART_CAN_TX>:
/******************************************************************************
	USART CAN FRAME transmit|
		transmits a full CAN frame struct(tCAN) over UART
******************************************************************************/
void USART_CAN_TX(tCAN data)
{
 610:	cf 92       	push	r12
 612:	df 92       	push	r13
 614:	ef 92       	push	r14
 616:	ff 92       	push	r15
 618:	0f 93       	push	r16
 61a:	1f 93       	push	r17
 61c:	cf 93       	push	r28
 61e:	df 93       	push	r29
 620:	cd b7       	in	r28, 0x3d	; 61
 622:	de b7       	in	r29, 0x3e	; 62
 624:	2b 97       	sbiw	r28, 0x0b	; 11
 626:	0f b6       	in	r0, 0x3f	; 63
 628:	f8 94       	cli
 62a:	de bf       	out	0x3e, r29	; 62
 62c:	0f be       	out	0x3f, r0	; 63
 62e:	cd bf       	out	0x3d, r28	; 61
 630:	e9 82       	std	Y+1, r14	; 0x01
 632:	fa 82       	std	Y+2, r15	; 0x02
 634:	0b 83       	std	Y+3, r16	; 0x03
 636:	1c 83       	std	Y+4, r17	; 0x04
 638:	2d 83       	std	Y+5, r18	; 0x05
 63a:	3e 83       	std	Y+6, r19	; 0x06
 63c:	4f 83       	std	Y+7, r20	; 0x07
 63e:	58 87       	std	Y+8, r21	; 0x08
 640:	69 87       	std	Y+9, r22	; 0x09
 642:	7a 87       	std	Y+10, r23	; 0x0a
 644:	8b 87       	std	Y+11, r24	; 0x0b
 646:	c9 80       	ldd	r12, Y+1	; 0x01
 648:	da 80       	ldd	r13, Y+2	; 0x02
 64a:	06 95       	lsr	r16
 64c:	0f 70       	andi	r16, 0x0F	; 15
	USART_Transmit(data.id >> 3); //CanID_High
 64e:	c6 01       	movw	r24, r12
 650:	96 95       	lsr	r25
 652:	87 95       	ror	r24
 654:	96 95       	lsr	r25
 656:	87 95       	ror	r24
 658:	96 95       	lsr	r25
 65a:	87 95       	ror	r24
 65c:	0e 94 de 02 	call	0x5bc	; 0x5bc <USART_Transmit>
	
	USART_Transmit((data.id << 5) | (data.header.rtr <<4) | data.header.length);
 660:	cc 0c       	add	r12, r12
 662:	cc 0c       	add	r12, r12
 664:	cc 0c       	add	r12, r12
 666:	cc 0c       	add	r12, r12
 668:	cc 0c       	add	r12, r12
 66a:	8b 81       	ldd	r24, Y+3	; 0x03
 66c:	87 95       	ror	r24
 66e:	88 27       	eor	r24, r24
 670:	87 95       	ror	r24
 672:	88 0f       	add	r24, r24
 674:	88 0b       	sbc	r24, r24
 676:	82 95       	swap	r24
 678:	80 7f       	andi	r24, 0xF0	; 240
 67a:	8c 29       	or	r24, r12
 67c:	80 2b       	or	r24, r16
 67e:	0e 94 de 02 	call	0x5bc	; 0x5bc <USART_Transmit>
	
	//read back all data received.
	if(!data.header.rtr){
 682:	8b 81       	ldd	r24, Y+3	; 0x03
 684:	80 fd       	sbrc	r24, 0
 686:	17 c0       	rjmp	.+46     	; 0x6b6 <USART_CAN_TX+0xa6>
		for (uint8_t t = 0; t < data.header.length;t++) {
 688:	e0 2e       	mov	r14, r16
 68a:	f1 2c       	mov	r15, r1
 68c:	1e 14       	cp	r1, r14
 68e:	1f 04       	cpc	r1, r15
 690:	94 f4       	brge	.+36     	; 0x6b6 <USART_CAN_TX+0xa6>
 692:	80 e0       	ldi	r24, 0x00	; 0
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	10 e0       	ldi	r17, 0x00	; 0
			USART_Transmit(data.data[t]); //data
 698:	e4 e0       	ldi	r30, 0x04	; 4
 69a:	f0 e0       	ldi	r31, 0x00	; 0
 69c:	ec 0f       	add	r30, r28
 69e:	fd 1f       	adc	r31, r29
 6a0:	e8 0f       	add	r30, r24
 6a2:	f9 1f       	adc	r31, r25
 6a4:	80 81       	ld	r24, Z
 6a6:	0e 94 de 02 	call	0x5bc	; 0x5bc <USART_Transmit>
	
	USART_Transmit((data.id << 5) | (data.header.rtr <<4) | data.header.length);
	
	//read back all data received.
	if(!data.header.rtr){
		for (uint8_t t = 0; t < data.header.length;t++) {
 6aa:	1f 5f       	subi	r17, 0xFF	; 255
 6ac:	81 2f       	mov	r24, r17
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	8e 15       	cp	r24, r14
 6b2:	9f 05       	cpc	r25, r15
 6b4:	8c f3       	brlt	.-30     	; 0x698 <USART_CAN_TX+0x88>
			USART_Transmit(data.data[t]); //data
		}
	}
}
 6b6:	2b 96       	adiw	r28, 0x0b	; 11
 6b8:	0f b6       	in	r0, 0x3f	; 63
 6ba:	f8 94       	cli
 6bc:	de bf       	out	0x3e, r29	; 62
 6be:	0f be       	out	0x3f, r0	; 63
 6c0:	cd bf       	out	0x3d, r28	; 61
 6c2:	df 91       	pop	r29
 6c4:	cf 91       	pop	r28
 6c6:	1f 91       	pop	r17
 6c8:	0f 91       	pop	r16
 6ca:	ff 90       	pop	r15
 6cc:	ef 90       	pop	r14
 6ce:	df 90       	pop	r13
 6d0:	cf 90       	pop	r12
 6d2:	08 95       	ret

000006d4 <main>:
	start of main()|
******************************************************************************/
int main(void)
{
  	//initialization functions
	GPIO_init();
 6d4:	0e 94 99 00 	call	0x132	; 0x132 <GPIO_init>
	INTERRUPT_init();
 6d8:	0e 94 a3 00 	call	0x146	; 0x146 <INTERRUPT_init>
	ADC_init();
 6dc:	0e 94 ab 00 	call	0x156	; 0x156 <ADC_init>
	USART_Init(103);//103 sets baud rate at 9600
 6e0:	87 e6       	ldi	r24, 0x67	; 103
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	0e 94 c7 02 	call	0x58e	; 0x58e <USART_Init>
	SPI_masterInit();
 6e8:	0e 94 b6 00 	call	0x16c	; 0x16c <SPI_masterInit>
	
	//MCP2515 initialization
	if(mcp2515_init(CANSPEED_500))
 6ec:	81 e0       	ldi	r24, 0x01	; 1
 6ee:	0e 94 10 01 	call	0x220	; 0x220 <mcp2515_init>
 6f2:	88 23       	and	r24, r24
 6f4:	29 f0       	breq	.+10     	; 0x700 <main+0x2c>
	{//[TODO]these need to be updated to RAW serial messages
		USART_Transmit_TX("Can Init SUCCESS!");
 6f6:	88 e1       	ldi	r24, 0x18	; 24
 6f8:	91 e0       	ldi	r25, 0x01	; 1
 6fa:	0e 94 e6 02 	call	0x5cc	; 0x5cc <USART_Transmit_TX>
 6fe:	04 c0       	rjmp	.+8      	; 0x708 <main+0x34>
	}else
	{
		USART_Transmit_TX("Can Init FAILURE!");
 700:	8a e2       	ldi	r24, 0x2A	; 42
 702:	91 e0       	ldi	r25, 0x01	; 1
 704:	0e 94 e6 02 	call	0x5cc	; 0x5cc <USART_Transmit_TX>
	}
	USART_Transmit(10);//New Line
 708:	8a e0       	ldi	r24, 0x0A	; 10
 70a:	0e 94 de 02 	call	0x5bc	; 0x5bc <USART_Transmit>
	USART_Transmit(13);//Carriage return
 70e:	8d e0       	ldi	r24, 0x0D	; 13
 710:	0e 94 de 02 	call	0x5bc	; 0x5bc <USART_Transmit>
	
	//setup the transmit frame
	CANTX_buffer.id = TxID;			//set target device ID
 714:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <TxID>
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <CANTX_buffer+0x1>
 71e:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <CANTX_buffer>
	CANTX_buffer.header.rtr = 0;	//no remote transmit(i.e. request info)
 722:	eb e4       	ldi	r30, 0x4B	; 75
 724:	f1 e0       	ldi	r31, 0x01	; 1
 726:	80 81       	ld	r24, Z
	CANTX_buffer.header.length = 1;//single byte(could be up to 8)
 728:	80 7e       	andi	r24, 0xE0	; 224
 72a:	82 60       	ori	r24, 0x02	; 2
 72c:	80 83       	st	Z, r24
	

	
	ADCSRA |= (1<<ADSC); //start adc sample
 72e:	ea e7       	ldi	r30, 0x7A	; 122
 730:	f0 e0       	ldi	r31, 0x00	; 0
 732:	80 81       	ld	r24, Z
 734:	80 64       	ori	r24, 0x40	; 64
 736:	80 83       	st	Z, r24
				TOGGLE(LED4);
				
				//matches received ID.  if current request, returns
				//	current data
				//if more cases are required, will convert to a switch-case
				if(CANRX_buffer.id == Read_Request_Backplane_Current.id){
 738:	0f 2e       	mov	r0, r31
 73a:	fe e3       	ldi	r31, 0x3E	; 62
 73c:	af 2e       	mov	r10, r31
 73e:	f1 e0       	ldi	r31, 0x01	; 1
 740:	bf 2e       	mov	r11, r31
 742:	f0 2d       	mov	r31, r0
 744:	0f 2e       	mov	r0, r31
 746:	f1 e0       	ldi	r31, 0x01	; 1
 748:	cf 2e       	mov	r12, r31
 74a:	f1 e0       	ldi	r31, 0x01	; 1
 74c:	df 2e       	mov	r13, r31
 74e:	f0 2d       	mov	r31, r0
		
		
		
	
		//if data received on CAN...
		if(rx_flag){
 750:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <rx_flag>
 754:	88 23       	and	r24, r24
 756:	e1 f3       	breq	.-8      	; 0x750 <main+0x7c>
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE){//disables interrupts
 758:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 75a:	f8 94       	cli
				//[FOR DEBUGGING]transimts received frame over uart.
				USART_CAN_TX(CANRX_buffer);
 75c:	e0 90 3e 01 	lds	r14, 0x013E	; 0x80013e <CANRX_buffer>
 760:	f0 90 3f 01 	lds	r15, 0x013F	; 0x80013f <CANRX_buffer+0x1>
 764:	00 91 40 01 	lds	r16, 0x0140	; 0x800140 <CANRX_buffer+0x2>
 768:	10 91 41 01 	lds	r17, 0x0141	; 0x800141 <CANRX_buffer+0x3>
 76c:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <CANRX_buffer+0x4>
 770:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <CANRX_buffer+0x5>
 774:	40 91 44 01 	lds	r20, 0x0144	; 0x800144 <CANRX_buffer+0x6>
 778:	50 91 45 01 	lds	r21, 0x0145	; 0x800145 <CANRX_buffer+0x7>
 77c:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <CANRX_buffer+0x8>
 780:	70 91 47 01 	lds	r23, 0x0147	; 0x800147 <CANRX_buffer+0x9>
 784:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <CANRX_buffer+0xa>
 788:	0e 94 08 03 	call	0x610	; 0x610 <USART_CAN_TX>
				TOGGLE(LED4);
 78c:	4e 9a       	sbi	0x09, 6	; 9
				
				//matches received ID.  if current request, returns
				//	current data
				//if more cases are required, will convert to a switch-case
				if(CANRX_buffer.id == Read_Request_Backplane_Current.id){
 78e:	f5 01       	movw	r30, r10
 790:	20 81       	ld	r18, Z
 792:	31 81       	ldd	r19, Z+1	; 0x01
 794:	f6 01       	movw	r30, r12
 796:	80 81       	ld	r24, Z
 798:	91 81       	ldd	r25, Z+1	; 0x01
 79a:	28 17       	cp	r18, r24
 79c:	39 07       	cpc	r19, r25
 79e:	e1 f4       	brne	.+56     	; 0x7d8 <main+0x104>
					USART_CAN_TX(Request_Response_Backplane_Current);
 7a0:	e0 90 0c 01 	lds	r14, 0x010C	; 0x80010c <Request_Response_Backplane_Current>
 7a4:	f0 90 0d 01 	lds	r15, 0x010D	; 0x80010d <Request_Response_Backplane_Current+0x1>
 7a8:	00 91 0e 01 	lds	r16, 0x010E	; 0x80010e <Request_Response_Backplane_Current+0x2>
 7ac:	10 91 0f 01 	lds	r17, 0x010F	; 0x80010f <Request_Response_Backplane_Current+0x3>
 7b0:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <Request_Response_Backplane_Current+0x4>
 7b4:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <Request_Response_Backplane_Current+0x5>
 7b8:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <Request_Response_Backplane_Current+0x6>
 7bc:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <Request_Response_Backplane_Current+0x7>
 7c0:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <Request_Response_Backplane_Current+0x8>
 7c4:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <Request_Response_Backplane_Current+0x9>
 7c8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <Request_Response_Backplane_Current+0xa>
 7cc:	0e 94 08 03 	call	0x610	; 0x610 <USART_CAN_TX>
						//send over uart
					mcp2515_send_message(&Request_Response_Backplane_Current);
 7d0:	8c e0       	ldi	r24, 0x0C	; 12
 7d2:	91 e0       	ldi	r25, 0x01	; 1
 7d4:	0e 94 38 02 	call	0x470	; 0x470 <mcp2515_send_message>
						//send over can
				}
				rx_flag = 0;//clear receive flag
 7d8:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <rx_flag>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 7dc:	cf bf       	out	0x3f, r28	; 63
    __asm__ volatile ("" ::: "memory");
 7de:	b8 cf       	rjmp	.-144    	; 0x750 <main+0x7c>

000007e0 <__vector_1>:

/******************************************************************************
	CAN RECEIVE interrupt on pin PD2|
******************************************************************************/
ISR(INT0_vect)
{
 7e0:	1f 92       	push	r1
 7e2:	0f 92       	push	r0
 7e4:	0f b6       	in	r0, 0x3f	; 63
 7e6:	0f 92       	push	r0
 7e8:	11 24       	eor	r1, r1
 7ea:	2f 93       	push	r18
 7ec:	3f 93       	push	r19
 7ee:	4f 93       	push	r20
 7f0:	5f 93       	push	r21
 7f2:	6f 93       	push	r22
 7f4:	7f 93       	push	r23
 7f6:	8f 93       	push	r24
 7f8:	9f 93       	push	r25
 7fa:	af 93       	push	r26
 7fc:	bf 93       	push	r27
 7fe:	ef 93       	push	r30
 800:	ff 93       	push	r31
	mcp2515_get_message(&CANRX_buffer);//get canbus message
 802:	8e e3       	ldi	r24, 0x3E	; 62
 804:	91 e0       	ldi	r25, 0x01	; 1
 806:	0e 94 b7 01 	call	0x36e	; 0x36e <mcp2515_get_message>
	rx_flag = 1;  //set flag
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <rx_flag>
}
 810:	ff 91       	pop	r31
 812:	ef 91       	pop	r30
 814:	bf 91       	pop	r27
 816:	af 91       	pop	r26
 818:	9f 91       	pop	r25
 81a:	8f 91       	pop	r24
 81c:	7f 91       	pop	r23
 81e:	6f 91       	pop	r22
 820:	5f 91       	pop	r21
 822:	4f 91       	pop	r20
 824:	3f 91       	pop	r19
 826:	2f 91       	pop	r18
 828:	0f 90       	pop	r0
 82a:	0f be       	out	0x3f, r0	; 63
 82c:	0f 90       	pop	r0
 82e:	1f 90       	pop	r1
 830:	18 95       	reti

00000832 <__vector_21>:

/******************************************************************************* 
	 ADC conversion complete ISR|
*******************************************************************************/ 
ISR(ADC_vect) 
{ 
 832:	1f 92       	push	r1
 834:	0f 92       	push	r0
 836:	0f b6       	in	r0, 0x3f	; 63
 838:	0f 92       	push	r0
 83a:	11 24       	eor	r1, r1
 83c:	2f 93       	push	r18
 83e:	3f 93       	push	r19
 840:	8f 93       	push	r24
 842:	af 93       	push	r26
 844:	bf 93       	push	r27
 846:	ef 93       	push	r30
 848:	ff 93       	push	r31
		
			voltage_sens = {ADC0, ADC1, ADC6, ADC7} 
			which corresponds to
			voltage_sens = {P5V_SENSE, P20V_SENSE, P24V_SENS, P6V_SENSE} 
	*/
	voltage_sense[adc_select] = ADCH;
 84a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
 84e:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 852:	e8 2f       	mov	r30, r24
 854:	f0 e0       	ldi	r31, 0x00	; 0
 856:	ee 0f       	add	r30, r30
 858:	ff 1f       	adc	r31, r31
 85a:	ec 5a       	subi	r30, 0xAC	; 172
 85c:	fe 4f       	sbci	r31, 0xFE	; 254
 85e:	30 e0       	ldi	r19, 0x00	; 0
 860:	31 83       	std	Z+1, r19	; 0x01
 862:	20 83       	st	Z, r18
	
	
	adc_select++;
 864:	8f 5f       	subi	r24, 0xFF	; 255
	if(adc_select > 3){//resets count at 4 and stores values in CAN frame
 866:	84 30       	cpi	r24, 0x04	; 4
 868:	18 f4       	brcc	.+6      	; 0x870 <__vector_21+0x3e>
			voltage_sens = {P5V_SENSE, P20V_SENSE, P24V_SENS, P6V_SENSE} 
	*/
	voltage_sense[adc_select] = ADCH;
	
	
	adc_select++;
 86a:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
 86e:	13 c0       	rjmp	.+38     	; 0x896 <__vector_21+0x64>
	if(adc_select > 3){//resets count at 4 and stores values in CAN frame
		adc_select = 0;
 870:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__data_end>
		for(uint8_t j = 0; j < 4; j++){
		Request_Response_Backplane_Current.data[j] = voltage_sense[j];
 874:	ec e0       	ldi	r30, 0x0C	; 12
 876:	f1 e0       	ldi	r31, 0x01	; 1
 878:	a4 e5       	ldi	r26, 0x54	; 84
 87a:	b1 e0       	ldi	r27, 0x01	; 1
 87c:	8c 91       	ld	r24, X
 87e:	83 83       	std	Z+3, r24	; 0x03
 880:	12 96       	adiw	r26, 0x02	; 2
 882:	8c 91       	ld	r24, X
 884:	12 97       	sbiw	r26, 0x02	; 2
 886:	84 83       	std	Z+4, r24	; 0x04
 888:	14 96       	adiw	r26, 0x04	; 4
 88a:	8c 91       	ld	r24, X
 88c:	14 97       	sbiw	r26, 0x04	; 4
 88e:	85 83       	std	Z+5, r24	; 0x05
 890:	16 96       	adiw	r26, 0x06	; 6
 892:	8c 91       	ld	r24, X
 894:	86 83       	std	Z+6, r24	; 0x06
		}
		
	}
	
	//select which adc to sample from
	switch(adc_select){
 896:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
 89a:	81 30       	cpi	r24, 0x01	; 1
 89c:	61 f0       	breq	.+24     	; 0x8b6 <__vector_21+0x84>
 89e:	28 f0       	brcs	.+10     	; 0x8aa <__vector_21+0x78>
 8a0:	82 30       	cpi	r24, 0x02	; 2
 8a2:	79 f0       	breq	.+30     	; 0x8c2 <__vector_21+0x90>
 8a4:	83 30       	cpi	r24, 0x03	; 3
 8a6:	99 f0       	breq	.+38     	; 0x8ce <__vector_21+0x9c>
 8a8:	18 c0       	rjmp	.+48     	; 0x8da <__vector_21+0xa8>
		case 0 : ADMUX &= 0b11110000; //set ADC0
 8aa:	ec e7       	ldi	r30, 0x7C	; 124
 8ac:	f0 e0       	ldi	r31, 0x00	; 0
 8ae:	80 81       	ld	r24, Z
 8b0:	80 7f       	andi	r24, 0xF0	; 240
 8b2:	80 83       	st	Z, r24
		
			break;	
 8b4:	17 c0       	rjmp	.+46     	; 0x8e4 <__vector_21+0xb2>
		case 1 : ADMUX &= 0b11110001; //set ADC1
 8b6:	ec e7       	ldi	r30, 0x7C	; 124
 8b8:	f0 e0       	ldi	r31, 0x00	; 0
 8ba:	80 81       	ld	r24, Z
 8bc:	81 7f       	andi	r24, 0xF1	; 241
 8be:	80 83       	st	Z, r24
		
		break;
 8c0:	11 c0       	rjmp	.+34     	; 0x8e4 <__vector_21+0xb2>
		case 2 : ADMUX &= 0b11110110; //set ADC6
 8c2:	ec e7       	ldi	r30, 0x7C	; 124
 8c4:	f0 e0       	ldi	r31, 0x00	; 0
 8c6:	80 81       	ld	r24, Z
 8c8:	86 7f       	andi	r24, 0xF6	; 246
 8ca:	80 83       	st	Z, r24
		
		break;
 8cc:	0b c0       	rjmp	.+22     	; 0x8e4 <__vector_21+0xb2>
		case 3 : ADMUX &= 0b11110111; //set ADC7
 8ce:	ec e7       	ldi	r30, 0x7C	; 124
 8d0:	f0 e0       	ldi	r31, 0x00	; 0
 8d2:	80 81       	ld	r24, Z
 8d4:	87 7f       	andi	r24, 0xF7	; 247
 8d6:	80 83       	st	Z, r24
		
		break;
 8d8:	05 c0       	rjmp	.+10     	; 0x8e4 <__vector_21+0xb2>
		default : ADMUX &= 0b11110000; //set ADC0
 8da:	ec e7       	ldi	r30, 0x7C	; 124
 8dc:	f0 e0       	ldi	r31, 0x00	; 0
 8de:	80 81       	ld	r24, Z
 8e0:	80 7f       	andi	r24, 0xF0	; 240
 8e2:	80 83       	st	Z, r24
		
		break;
	}
	ADCSRA |= (1<<ADSC); //start adc sample
 8e4:	ea e7       	ldi	r30, 0x7A	; 122
 8e6:	f0 e0       	ldi	r31, 0x00	; 0
 8e8:	80 81       	ld	r24, Z
 8ea:	80 64       	ori	r24, 0x40	; 64
 8ec:	80 83       	st	Z, r24
}
 8ee:	ff 91       	pop	r31
 8f0:	ef 91       	pop	r30
 8f2:	bf 91       	pop	r27
 8f4:	af 91       	pop	r26
 8f6:	8f 91       	pop	r24
 8f8:	3f 91       	pop	r19
 8fa:	2f 91       	pop	r18
 8fc:	0f 90       	pop	r0
 8fe:	0f be       	out	0x3f, r0	; 63
 900:	0f 90       	pop	r0
 902:	1f 90       	pop	r1
 904:	18 95       	reti

00000906 <__vector_18>:
		-define "start byte" as 0xEE
	"UART Confined CAN FRAME"(UCCF) defined in excel file
		~/"RoboSub 17 CAN Frames Rev.4.xlsx"
******************************************************************************/
ISR(USART0_RX_vect)
{
 906:	1f 92       	push	r1
 908:	0f 92       	push	r0
 90a:	0f b6       	in	r0, 0x3f	; 63
 90c:	0f 92       	push	r0
 90e:	11 24       	eor	r1, r1
 910:	2f 93       	push	r18
 912:	3f 93       	push	r19
 914:	4f 93       	push	r20
 916:	5f 93       	push	r21
 918:	6f 93       	push	r22
 91a:	7f 93       	push	r23
 91c:	8f 93       	push	r24
 91e:	9f 93       	push	r25
 920:	af 93       	push	r26
 922:	bf 93       	push	r27
 924:	ef 93       	push	r30
 926:	ff 93       	push	r31
	
	uint8_t receive_buff = USART_Receive();
 928:	0e 94 d6 02 	call	0x5ac	; 0x5ac <USART_Receive>
	//transmit usart_char over canbus
	mcp2515_send_message(&CANTX_buffer);
	*/
	
	//select which adc to sample from
	switch(Rx_frame_state){
 92c:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <Rx_frame_state>
 930:	4e 2f       	mov	r20, r30
 932:	50 e0       	ldi	r21, 0x00	; 0
 934:	fa 01       	movw	r30, r20
 936:	31 97       	sbiw	r30, 0x01	; 1
 938:	e0 32       	cpi	r30, 0x20	; 32
 93a:	f1 05       	cpc	r31, r1
 93c:	08 f0       	brcs	.+2      	; 0x940 <__vector_18+0x3a>
 93e:	fa c0       	rjmp	.+500    	; 0xb34 <__vector_18+0x22e>
 940:	e6 5a       	subi	r30, 0xA6	; 166
 942:	ff 4f       	sbci	r31, 0xFF	; 255
 944:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__tablejump2__>
		case s_RxIDH : //frameID High
		
			CANTX_buffer.id |= receive_buff <<3;
 948:	e9 e4       	ldi	r30, 0x49	; 73
 94a:	f1 e0       	ldi	r31, 0x01	; 1
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	88 0f       	add	r24, r24
 950:	99 1f       	adc	r25, r25
 952:	88 0f       	add	r24, r24
 954:	99 1f       	adc	r25, r25
 956:	88 0f       	add	r24, r24
 958:	99 1f       	adc	r25, r25
 95a:	20 81       	ld	r18, Z
 95c:	31 81       	ldd	r19, Z+1	; 0x01
 95e:	82 2b       	or	r24, r18
 960:	93 2b       	or	r25, r19
 962:	91 83       	std	Z+1, r25	; 0x01
 964:	80 83       	st	Z, r24
			Rx_frame_state = s_RxIDL;
 966:	80 e2       	ldi	r24, 0x20	; 32
 968:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
		break;
 96c:	e6 c0       	rjmp	.+460    	; 0xb3a <__vector_18+0x234>
		case s_RxIDL : //frameID Low, rtr, & length = 0bXXXYZZZZ

			CANTX_buffer.id |= (receive_buff >>5);
 96e:	e9 e4       	ldi	r30, 0x49	; 73
 970:	f1 e0       	ldi	r31, 0x01	; 1
 972:	98 2f       	mov	r25, r24
 974:	92 95       	swap	r25
 976:	96 95       	lsr	r25
 978:	97 70       	andi	r25, 0x07	; 7
 97a:	20 81       	ld	r18, Z
 97c:	31 81       	ldd	r19, Z+1	; 0x01
 97e:	29 2b       	or	r18, r25
 980:	31 83       	std	Z+1, r19	; 0x01
 982:	20 83       	st	Z, r18
			CANTX_buffer.header.rtr =  ((receive_buff >>4) & 0x01);
 984:	28 2f       	mov	r18, r24
 986:	22 95       	swap	r18
 988:	2f 70       	andi	r18, 0x0F	; 15
 98a:	eb e4       	ldi	r30, 0x4B	; 75
 98c:	f1 e0       	ldi	r31, 0x01	; 1
 98e:	90 81       	ld	r25, Z
 990:	20 fb       	bst	r18, 0
 992:	90 f9       	bld	r25, 0
			CANTX_buffer.header.length = (receive_buff & 0x0F);
 994:	8f 70       	andi	r24, 0x0F	; 15
 996:	88 0f       	add	r24, r24
 998:	91 7e       	andi	r25, 0xE1	; 225
 99a:	89 2b       	or	r24, r25
 99c:	80 83       	st	Z, r24
			
			if(CANTX_buffer.header.rtr){
 99e:	80 ff       	sbrs	r24, 0
 9a0:	09 c0       	rjmp	.+18     	; 0x9b4 <__vector_18+0xae>
				mcp2515_send_message(&CANTX_buffer);
 9a2:	89 e4       	ldi	r24, 0x49	; 73
 9a4:	91 e0       	ldi	r25, 0x01	; 1
 9a6:	0e 94 38 02 	call	0x470	; 0x470 <mcp2515_send_message>
				receive_buff = 0;
				Rx_frame_state = s_RxIDH;
 9aa:	80 e1       	ldi	r24, 0x10	; 16
 9ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
				TOGGLE(LED1);
 9b0:	4b 9a       	sbi	0x09, 3	; 9
 9b2:	c3 c0       	rjmp	.+390    	; 0xb3a <__vector_18+0x234>
			} else {
				Rx_frame_state = s_Rxdata1;
 9b4:	81 e0       	ldi	r24, 0x01	; 1
 9b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
				TOGGLE(LED2);
 9ba:	4c 9a       	sbi	0x09, 4	; 9
 9bc:	be c0       	rjmp	.+380    	; 0xb3a <__vector_18+0x234>
			}
		
		break;
		case s_Rxdata1 : //data1
			CANTX_buffer.data[0] = receive_buff;
 9be:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <CANTX_buffer+0x3>
			
			if(Rx_frame_state < CANTX_buffer.header.length){
 9c2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 9c6:	30 e0       	ldi	r19, 0x00	; 0
 9c8:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <CANTX_buffer+0x2>
 9cc:	86 95       	lsr	r24
 9ce:	8f 70       	andi	r24, 0x0F	; 15
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	28 17       	cp	r18, r24
 9d4:	39 07       	cpc	r19, r25
 9d6:	2c f4       	brge	.+10     	; 0x9e2 <__vector_18+0xdc>
				Rx_frame_state = s_Rxdata2;
 9d8:	82 e0       	ldi	r24, 0x02	; 2
 9da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
				TOGGLE(LED3);
 9de:	4d 9a       	sbi	0x09, 5	; 9
 9e0:	ac c0       	rjmp	.+344    	; 0xb3a <__vector_18+0x234>
			}else{
				mcp2515_send_message(&CANTX_buffer);
 9e2:	89 e4       	ldi	r24, 0x49	; 73
 9e4:	91 e0       	ldi	r25, 0x01	; 1
 9e6:	0e 94 38 02 	call	0x470	; 0x470 <mcp2515_send_message>
				receive_buff = 0;
				Rx_frame_state = s_RxIDH;
 9ea:	80 e1       	ldi	r24, 0x10	; 16
 9ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
				TOGGLE(LED4);
 9f0:	4e 9a       	sbi	0x09, 6	; 9
 9f2:	a3 c0       	rjmp	.+326    	; 0xb3a <__vector_18+0x234>
			}
		break;
		case s_Rxdata2 ://data2
			CANTX_buffer.data[1] = receive_buff;
 9f4:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <CANTX_buffer+0x4>
			
			if(Rx_frame_state < CANTX_buffer.header.length){
 9f8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 9fc:	30 e0       	ldi	r19, 0x00	; 0
 9fe:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <CANTX_buffer+0x2>
 a02:	86 95       	lsr	r24
 a04:	8f 70       	andi	r24, 0x0F	; 15
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	28 17       	cp	r18, r24
 a0a:	39 07       	cpc	r19, r25
 a0c:	24 f4       	brge	.+8      	; 0xa16 <__vector_18+0x110>
				Rx_frame_state = s_Rxdata3;
 a0e:	83 e0       	ldi	r24, 0x03	; 3
 a10:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 a14:	92 c0       	rjmp	.+292    	; 0xb3a <__vector_18+0x234>
				}else{
				mcp2515_send_message(&CANTX_buffer);
 a16:	89 e4       	ldi	r24, 0x49	; 73
 a18:	91 e0       	ldi	r25, 0x01	; 1
 a1a:	0e 94 38 02 	call	0x470	; 0x470 <mcp2515_send_message>
				receive_buff = 0;
				Rx_frame_state = s_RxIDH;
 a1e:	80 e1       	ldi	r24, 0x10	; 16
 a20:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 a24:	8a c0       	rjmp	.+276    	; 0xb3a <__vector_18+0x234>
			}
		break;
		case s_Rxdata3 ://data3
			CANTX_buffer.data[2] = receive_buff;
 a26:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <CANTX_buffer+0x5>
			
			if(Rx_frame_state < CANTX_buffer.header.length){
 a2a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 a2e:	30 e0       	ldi	r19, 0x00	; 0
 a30:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <CANTX_buffer+0x2>
 a34:	86 95       	lsr	r24
 a36:	8f 70       	andi	r24, 0x0F	; 15
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	28 17       	cp	r18, r24
 a3c:	39 07       	cpc	r19, r25
 a3e:	24 f4       	brge	.+8      	; 0xa48 <__vector_18+0x142>
				Rx_frame_state = s_Rxdata4;
 a40:	84 e0       	ldi	r24, 0x04	; 4
 a42:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 a46:	79 c0       	rjmp	.+242    	; 0xb3a <__vector_18+0x234>
				}else{
				mcp2515_send_message(&CANTX_buffer);
 a48:	89 e4       	ldi	r24, 0x49	; 73
 a4a:	91 e0       	ldi	r25, 0x01	; 1
 a4c:	0e 94 38 02 	call	0x470	; 0x470 <mcp2515_send_message>
				receive_buff = 0;
				Rx_frame_state = s_RxIDH;
 a50:	80 e1       	ldi	r24, 0x10	; 16
 a52:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 a56:	71 c0       	rjmp	.+226    	; 0xb3a <__vector_18+0x234>
			}
		break;
		case s_Rxdata4 ://data4
			CANTX_buffer.data[3] = receive_buff;
 a58:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <CANTX_buffer+0x6>
	
			if(Rx_frame_state < CANTX_buffer.header.length){
 a5c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 a60:	30 e0       	ldi	r19, 0x00	; 0
 a62:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <CANTX_buffer+0x2>
 a66:	86 95       	lsr	r24
 a68:	8f 70       	andi	r24, 0x0F	; 15
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	28 17       	cp	r18, r24
 a6e:	39 07       	cpc	r19, r25
 a70:	24 f4       	brge	.+8      	; 0xa7a <__vector_18+0x174>
				Rx_frame_state = s_Rxdata5;
 a72:	85 e0       	ldi	r24, 0x05	; 5
 a74:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 a78:	60 c0       	rjmp	.+192    	; 0xb3a <__vector_18+0x234>
				}else{
				mcp2515_send_message(&CANTX_buffer);
 a7a:	89 e4       	ldi	r24, 0x49	; 73
 a7c:	91 e0       	ldi	r25, 0x01	; 1
 a7e:	0e 94 38 02 	call	0x470	; 0x470 <mcp2515_send_message>
				receive_buff = 0;
				Rx_frame_state = s_RxIDH;
 a82:	80 e1       	ldi	r24, 0x10	; 16
 a84:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 a88:	58 c0       	rjmp	.+176    	; 0xb3a <__vector_18+0x234>
			}
		break;
		case s_Rxdata5 ://data5
			CANTX_buffer.data[4] = receive_buff;
 a8a:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <CANTX_buffer+0x7>
			
			if(Rx_frame_state < CANTX_buffer.header.length){
 a8e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 a92:	30 e0       	ldi	r19, 0x00	; 0
 a94:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <CANTX_buffer+0x2>
 a98:	86 95       	lsr	r24
 a9a:	8f 70       	andi	r24, 0x0F	; 15
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	28 17       	cp	r18, r24
 aa0:	39 07       	cpc	r19, r25
 aa2:	24 f4       	brge	.+8      	; 0xaac <__vector_18+0x1a6>
				Rx_frame_state = s_Rxdata6;
 aa4:	86 e0       	ldi	r24, 0x06	; 6
 aa6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 aaa:	47 c0       	rjmp	.+142    	; 0xb3a <__vector_18+0x234>
				}else{
				mcp2515_send_message(&CANTX_buffer);
 aac:	89 e4       	ldi	r24, 0x49	; 73
 aae:	91 e0       	ldi	r25, 0x01	; 1
 ab0:	0e 94 38 02 	call	0x470	; 0x470 <mcp2515_send_message>
				receive_buff = 0;
				Rx_frame_state = s_RxIDH;
 ab4:	80 e1       	ldi	r24, 0x10	; 16
 ab6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 aba:	3f c0       	rjmp	.+126    	; 0xb3a <__vector_18+0x234>
			}
		break;
		case s_Rxdata6 ://data6
			CANTX_buffer.data[5] = receive_buff;
 abc:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <CANTX_buffer+0x8>
			
			if(Rx_frame_state < CANTX_buffer.header.length){
 ac0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 ac4:	30 e0       	ldi	r19, 0x00	; 0
 ac6:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <CANTX_buffer+0x2>
 aca:	86 95       	lsr	r24
 acc:	8f 70       	andi	r24, 0x0F	; 15
 ace:	90 e0       	ldi	r25, 0x00	; 0
 ad0:	28 17       	cp	r18, r24
 ad2:	39 07       	cpc	r19, r25
 ad4:	24 f4       	brge	.+8      	; 0xade <__vector_18+0x1d8>
				Rx_frame_state = s_Rxdata7;
 ad6:	87 e0       	ldi	r24, 0x07	; 7
 ad8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 adc:	2e c0       	rjmp	.+92     	; 0xb3a <__vector_18+0x234>
				}else{
				mcp2515_send_message(&CANTX_buffer);
 ade:	89 e4       	ldi	r24, 0x49	; 73
 ae0:	91 e0       	ldi	r25, 0x01	; 1
 ae2:	0e 94 38 02 	call	0x470	; 0x470 <mcp2515_send_message>
				receive_buff = 0;
				Rx_frame_state = s_RxIDH;
 ae6:	80 e1       	ldi	r24, 0x10	; 16
 ae8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 aec:	26 c0       	rjmp	.+76     	; 0xb3a <__vector_18+0x234>
			}
		break;
		case s_Rxdata7 ://data7
			CANTX_buffer.data[6] = receive_buff;
 aee:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <CANTX_buffer+0x9>
			
			if(Rx_frame_state < CANTX_buffer.header.length){
 af2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Rx_frame_state>
 af6:	30 e0       	ldi	r19, 0x00	; 0
 af8:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <CANTX_buffer+0x2>
 afc:	86 95       	lsr	r24
 afe:	8f 70       	andi	r24, 0x0F	; 15
 b00:	90 e0       	ldi	r25, 0x00	; 0
 b02:	28 17       	cp	r18, r24
 b04:	39 07       	cpc	r19, r25
 b06:	24 f4       	brge	.+8      	; 0xb10 <__vector_18+0x20a>
				Rx_frame_state = s_Rxdata8;
 b08:	88 e0       	ldi	r24, 0x08	; 8
 b0a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 b0e:	15 c0       	rjmp	.+42     	; 0xb3a <__vector_18+0x234>
				}else{
				mcp2515_send_message(&CANTX_buffer);
 b10:	89 e4       	ldi	r24, 0x49	; 73
 b12:	91 e0       	ldi	r25, 0x01	; 1
 b14:	0e 94 38 02 	call	0x470	; 0x470 <mcp2515_send_message>
				receive_buff = 0;
				Rx_frame_state = s_RxIDH;
 b18:	80 e1       	ldi	r24, 0x10	; 16
 b1a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
 b1e:	0d c0       	rjmp	.+26     	; 0xb3a <__vector_18+0x234>
			}
		break;
		case s_Rxdata8 ://data8
			CANTX_buffer.data[7] = receive_buff;
 b20:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <CANTX_buffer+0xa>
			
			mcp2515_send_message(&CANTX_buffer);
 b24:	89 e4       	ldi	r24, 0x49	; 73
 b26:	91 e0       	ldi	r25, 0x01	; 1
 b28:	0e 94 38 02 	call	0x470	; 0x470 <mcp2515_send_message>
			receive_buff = 0;
			Rx_frame_state = s_RxIDH;
 b2c:	80 e1       	ldi	r24, 0x10	; 16
 b2e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
		break;
 b32:	03 c0       	rjmp	.+6      	; 0xb3a <__vector_18+0x234>
		default : Rx_frame_state = s_RxIDH;
 b34:	80 e1       	ldi	r24, 0x10	; 16
 b36:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Rx_frame_state>
		
		break;
	}
	
	
}
 b3a:	ff 91       	pop	r31
 b3c:	ef 91       	pop	r30
 b3e:	bf 91       	pop	r27
 b40:	af 91       	pop	r26
 b42:	9f 91       	pop	r25
 b44:	8f 91       	pop	r24
 b46:	7f 91       	pop	r23
 b48:	6f 91       	pop	r22
 b4a:	5f 91       	pop	r21
 b4c:	4f 91       	pop	r20
 b4e:	3f 91       	pop	r19
 b50:	2f 91       	pop	r18
 b52:	0f 90       	pop	r0
 b54:	0f be       	out	0x3f, r0	; 63
 b56:	0f 90       	pop	r0
 b58:	1f 90       	pop	r1
 b5a:	18 95       	reti

00000b5c <__tablejump2__>:
 b5c:	ee 0f       	add	r30, r30
 b5e:	ff 1f       	adc	r31, r31
 b60:	05 90       	lpm	r0, Z+
 b62:	f4 91       	lpm	r31, Z
 b64:	e0 2d       	mov	r30, r0
 b66:	09 94       	ijmp

00000b68 <_exit>:
 b68:	f8 94       	cli

00000b6a <__stop_program>:
 b6a:	ff cf       	rjmp	.-2      	; 0xb6a <__stop_program>
