
SIB_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000260  00800100  000013c0  00001454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001e9  00800360  00800360  000016b4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000016b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001710  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00001750  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002bf1  00000000  00000000  000018c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d1c  00000000  00000000  000044b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017d3  00000000  00000000  000051d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000824  00000000  00000000  000069a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e77  00000000  00000000  000071cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000204d  00000000  00000000  00008043  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 93 03 	jmp	0x726	; 0x726 <__vector_1>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__vector_11>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 cb 02 	jmp	0x596	; 0x596 <__vector_14>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__vector_18>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      54:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__vector_21>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 bc 03 	jmp	0x778	; 0x778 <__vector_24>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	13 e0       	ldi	r17, 0x03	; 3
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	e0 ec       	ldi	r30, 0xC0	; 192
      c8:	f3 e1       	ldi	r31, 0x13	; 19
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	a0 36       	cpi	r26, 0x60	; 96
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	25 e0       	ldi	r18, 0x05	; 5
      d8:	a0 e6       	ldi	r26, 0x60	; 96
      da:	b3 e0       	ldi	r27, 0x03	; 3
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a9 34       	cpi	r26, 0x49	; 73
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 32 06 	call	0xc64	; 0xc64 <main>
      ea:	0c 94 de 09 	jmp	0x13bc	; 0x13bc <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <sys_config>:
	}
	//LED_ON;
	//string_out = "Pressure Sensors Init'd";
	//sendString(string_out);

}
      f2:	21 9a       	sbi	0x04, 1	; 4
      f4:	87 b1       	in	r24, 0x07	; 7
      f6:	87 b9       	out	0x07, r24	; 7
      f8:	87 b1       	in	r24, 0x07	; 7
      fa:	87 b9       	out	0x07, r24	; 7
      fc:	87 b1       	in	r24, 0x07	; 7
      fe:	87 b9       	out	0x07, r24	; 7
     100:	8a b1       	in	r24, 0x0a	; 10
     102:	8a b9       	out	0x0a, r24	; 10
     104:	51 9a       	sbi	0x0a, 1	; 10
     106:	8a b1       	in	r24, 0x0a	; 10
     108:	8a b9       	out	0x0a, r24	; 10
     10a:	8a b1       	in	r24, 0x0a	; 10
     10c:	8a b9       	out	0x0a, r24	; 10
     10e:	8a b1       	in	r24, 0x0a	; 10
     110:	8a b9       	out	0x0a, r24	; 10
     112:	8a b1       	in	r24, 0x0a	; 10
     114:	8a b9       	out	0x0a, r24	; 10
     116:	8a b1       	in	r24, 0x0a	; 10
     118:	8a b9       	out	0x0a, r24	; 10
     11a:	8a b1       	in	r24, 0x0a	; 10
     11c:	8a b9       	out	0x0a, r24	; 10
     11e:	84 b1       	in	r24, 0x04	; 4
     120:	84 b9       	out	0x04, r24	; 4
     122:	23 9a       	sbi	0x04, 3	; 4
     124:	2b 9a       	sbi	0x05, 3	; 5
     126:	3c 9a       	sbi	0x07, 4	; 7
     128:	44 9a       	sbi	0x08, 4	; 8
     12a:	08 95       	ret

0000012c <getMedian_of3>:
     12c:	f6 2f       	mov	r31, r22
     12e:	e7 2f       	mov	r30, r23
     130:	64 17       	cp	r22, r20
     132:	75 07       	cpc	r23, r21
     134:	10 f4       	brcc	.+4      	; 0x13a <getMedian_of3+0xe>
     136:	f4 2f       	mov	r31, r20
     138:	e5 2f       	mov	r30, r21
     13a:	2f 2f       	mov	r18, r31
     13c:	3e 2f       	mov	r19, r30
     13e:	28 17       	cp	r18, r24
     140:	39 07       	cpc	r19, r25
     142:	08 f4       	brcc	.+2      	; 0x146 <getMedian_of3+0x1a>
     144:	9c 01       	movw	r18, r24
     146:	b6 2f       	mov	r27, r22
     148:	a7 2f       	mov	r26, r23
     14a:	46 17       	cp	r20, r22
     14c:	57 07       	cpc	r21, r23
     14e:	10 f4       	brcc	.+4      	; 0x154 <getMedian_of3+0x28>
     150:	b4 2f       	mov	r27, r20
     152:	a5 2f       	mov	r26, r21
     154:	eb 2f       	mov	r30, r27
     156:	fa 2f       	mov	r31, r26
     158:	8e 17       	cp	r24, r30
     15a:	9f 07       	cpc	r25, r31
     15c:	08 f4       	brcc	.+2      	; 0x160 <getMedian_of3+0x34>
     15e:	fc 01       	movw	r30, r24
     160:	82 17       	cp	r24, r18
     162:	93 07       	cpc	r25, r19
     164:	19 f0       	breq	.+6      	; 0x16c <getMedian_of3+0x40>
     166:	8e 17       	cp	r24, r30
     168:	9f 07       	cpc	r25, r31
     16a:	71 f4       	brne	.+28     	; 0x188 <getMedian_of3+0x5c>
     16c:	62 17       	cp	r22, r18
     16e:	73 07       	cpc	r23, r19
     170:	31 f0       	breq	.+12     	; 0x17e <getMedian_of3+0x52>
     172:	6e 17       	cp	r22, r30
     174:	7f 07       	cpc	r23, r31
     176:	31 f0       	breq	.+12     	; 0x184 <getMedian_of3+0x58>
     178:	86 2f       	mov	r24, r22
     17a:	97 2f       	mov	r25, r23
     17c:	08 95       	ret
     17e:	84 2f       	mov	r24, r20
     180:	95 2f       	mov	r25, r21
     182:	08 95       	ret
     184:	84 2f       	mov	r24, r20
     186:	95 2f       	mov	r25, r21
     188:	08 95       	ret

0000018a <INTERRUPT_init>:
     18a:	e8 9a       	sbi	0x1d, 0	; 29
     18c:	e9 e6       	ldi	r30, 0x69	; 105
     18e:	f0 e0       	ldi	r31, 0x00	; 0
     190:	80 81       	ld	r24, Z
     192:	8c 7f       	andi	r24, 0xFC	; 252
     194:	80 83       	st	Z, r24
     196:	78 94       	sei
     198:	08 95       	ret

0000019a <SPI_masterInit>:
     19a:	22 9a       	sbi	0x04, 2	; 4
     19c:	23 9a       	sbi	0x04, 3	; 4
     19e:	25 9a       	sbi	0x04, 5	; 4
     1a0:	2a 9a       	sbi	0x05, 2	; 5
     1a2:	2b 98       	cbi	0x05, 3	; 5
     1a4:	2d 98       	cbi	0x05, 5	; 5
     1a6:	8c b5       	in	r24, 0x2c	; 44
     1a8:	80 65       	ori	r24, 0x50	; 80
     1aa:	8c bd       	out	0x2c, r24	; 44
     1ac:	8c b5       	in	r24, 0x2c	; 44
     1ae:	83 60       	ori	r24, 0x03	; 3
     1b0:	8c bd       	out	0x2c, r24	; 44
     1b2:	08 95       	ret

000001b4 <SPI_txrx>:
     1b4:	8e bd       	out	0x2e, r24	; 46
     1b6:	0d b4       	in	r0, 0x2d	; 45
     1b8:	07 fe       	sbrs	r0, 7
     1ba:	fd cf       	rjmp	.-6      	; 0x1b6 <SPI_txrx+0x2>
     1bc:	87 ec       	ldi	r24, 0xC7	; 199
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	01 97       	sbiw	r24, 0x01	; 1
     1c2:	f1 f7       	brne	.-4      	; 0x1c0 <SPI_txrx+0xc>
     1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <SPI_txrx+0x12>
     1c6:	00 00       	nop
     1c8:	8e b5       	in	r24, 0x2e	; 46
     1ca:	08 95       	ret

000001cc <mcp2515_bit_modify>:
     1cc:	1f 93       	push	r17
     1ce:	cf 93       	push	r28
     1d0:	df 93       	push	r29
     1d2:	18 2f       	mov	r17, r24
     1d4:	d6 2f       	mov	r29, r22
     1d6:	c4 2f       	mov	r28, r20
     1d8:	2a 98       	cbi	0x05, 2	; 5
     1da:	85 e0       	ldi	r24, 0x05	; 5
     1dc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <SPI_txrx>
     1e0:	81 2f       	mov	r24, r17
     1e2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <SPI_txrx>
     1e6:	8d 2f       	mov	r24, r29
     1e8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <SPI_txrx>
     1ec:	8c 2f       	mov	r24, r28
     1ee:	0e 94 da 00 	call	0x1b4	; 0x1b4 <SPI_txrx>
     1f2:	2a 9a       	sbi	0x05, 2	; 5
     1f4:	df 91       	pop	r29
     1f6:	cf 91       	pop	r28
     1f8:	1f 91       	pop	r17
     1fa:	08 95       	ret

000001fc <mcp2515_read_status>:
     1fc:	2a 98       	cbi	0x05, 2	; 5
     1fe:	0e 94 da 00 	call	0x1b4	; 0x1b4 <SPI_txrx>
     202:	8f ef       	ldi	r24, 0xFF	; 255
     204:	0e 94 da 00 	call	0x1b4	; 0x1b4 <SPI_txrx>
     208:	2a 9a       	sbi	0x05, 2	; 5
     20a:	08 95       	ret

0000020c <mcp2515_get_message>:
     20c:	cf 92       	push	r12
     20e:	df 92       	push	r13
     210:	ef 92       	push	r14
     212:	ff 92       	push	r15
     214:	0f 93       	push	r16
     216:	1f 93       	push	r17
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	1f 92       	push	r1
     21e:	cd b7       	in	r28, 0x3d	; 61
     220:	de b7       	in	r29, 0x3e	; 62
     222:	6c 01       	movw	r12, r24
     224:	80 eb       	ldi	r24, 0xB0	; 176
     226:	0e 94 fe 00 	call	0x1fc	; 0x1fc <mcp2515_read_status>
     22a:	89 83       	std	Y+1, r24	; 0x01
     22c:	99 81       	ldd	r25, Y+1	; 0x01
     22e:	89 2f       	mov	r24, r25
     230:	80 74       	andi	r24, 0x40	; 64
     232:	96 fd       	sbrc	r25, 6
     234:	06 c0       	rjmp	.+12     	; 0x242 <mcp2515_get_message+0x36>
     236:	99 81       	ldd	r25, Y+1	; 0x01
     238:	99 23       	and	r25, r25
     23a:	0c f0       	brlt	.+2      	; 0x23e <mcp2515_get_message+0x32>
     23c:	5d c0       	rjmp	.+186    	; 0x2f8 <mcp2515_get_message+0xec>
     23e:	84 e9       	ldi	r24, 0x94	; 148
     240:	01 c0       	rjmp	.+2      	; 0x244 <mcp2515_get_message+0x38>
     242:	80 e9       	ldi	r24, 0x90	; 144
     244:	2a 98       	cbi	0x05, 2	; 5
     246:	0e 94 da 00 	call	0x1b4	; 0x1b4 <SPI_txrx>
     24a:	8f ef       	ldi	r24, 0xFF	; 255
     24c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <SPI_txrx>
     250:	28 e0       	ldi	r18, 0x08	; 8
     252:	82 9f       	mul	r24, r18
     254:	c0 01       	movw	r24, r0
     256:	11 24       	eor	r1, r1
     258:	f6 01       	movw	r30, r12
     25a:	91 83       	std	Z+1, r25	; 0x01
     25c:	80 83       	st	Z, r24
     25e:	8f ef       	ldi	r24, 0xFF	; 255
     260:	0e 94 da 00 	call	0x1b4	; 0x1b4 <SPI_txrx>
     264:	28 2f       	mov	r18, r24
     266:	22 95       	swap	r18
     268:	26 95       	lsr	r18
     26a:	27 70       	andi	r18, 0x07	; 7
     26c:	f6 01       	movw	r30, r12
     26e:	80 81       	ld	r24, Z
     270:	91 81       	ldd	r25, Z+1	; 0x01
     272:	82 2b       	or	r24, r18
     274:	91 83       	std	Z+1, r25	; 0x01
     276:	80 83       	st	Z, r24
     278:	8f ef       	ldi	r24, 0xFF	; 255
     27a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <SPI_txrx>
     27e:	8f ef       	ldi	r24, 0xFF	; 255
     280:	0e 94 da 00 	call	0x1b4	; 0x1b4 <SPI_txrx>
     284:	8f ef       	ldi	r24, 0xFF	; 255
     286:	0e 94 da 00 	call	0x1b4	; 0x1b4 <SPI_txrx>
     28a:	8f 70       	andi	r24, 0x0F	; 15
     28c:	28 2f       	mov	r18, r24
     28e:	22 0f       	add	r18, r18
     290:	f6 01       	movw	r30, r12
     292:	92 81       	ldd	r25, Z+2	; 0x02
     294:	91 7e       	andi	r25, 0xE1	; 225
     296:	92 2b       	or	r25, r18
     298:	92 83       	std	Z+2, r25	; 0x02
     29a:	29 81       	ldd	r18, Y+1	; 0x01
     29c:	23 fb       	bst	r18, 3
     29e:	22 27       	eor	r18, r18
     2a0:	20 f9       	bld	r18, 0
     2a2:	20 fb       	bst	r18, 0
     2a4:	90 f9       	bld	r25, 0
     2a6:	92 83       	std	Z+2, r25	; 0x02
     2a8:	88 23       	and	r24, r24
     2aa:	a1 f0       	breq	.+40     	; 0x2d4 <mcp2515_get_message+0xc8>
     2ac:	86 01       	movw	r16, r12
     2ae:	0d 5f       	subi	r16, 0xFD	; 253
     2b0:	1f 4f       	sbci	r17, 0xFF	; 255
     2b2:	81 50       	subi	r24, 0x01	; 1
     2b4:	e8 2e       	mov	r14, r24
     2b6:	f1 2c       	mov	r15, r1
     2b8:	f4 e0       	ldi	r31, 0x04	; 4
     2ba:	ef 0e       	add	r14, r31
     2bc:	f1 1c       	adc	r15, r1
     2be:	ec 0c       	add	r14, r12
     2c0:	fd 1c       	adc	r15, r13
     2c2:	8f ef       	ldi	r24, 0xFF	; 255
     2c4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <SPI_txrx>
     2c8:	f8 01       	movw	r30, r16
     2ca:	81 93       	st	Z+, r24
     2cc:	8f 01       	movw	r16, r30
     2ce:	ee 15       	cp	r30, r14
     2d0:	ff 05       	cpc	r31, r15
     2d2:	b9 f7       	brne	.-18     	; 0x2c2 <mcp2515_get_message+0xb6>
     2d4:	2a 9a       	sbi	0x05, 2	; 5
     2d6:	89 81       	ldd	r24, Y+1	; 0x01
     2d8:	86 ff       	sbrs	r24, 6
     2da:	06 c0       	rjmp	.+12     	; 0x2e8 <mcp2515_get_message+0xdc>
     2dc:	40 e0       	ldi	r20, 0x00	; 0
     2de:	61 e0       	ldi	r22, 0x01	; 1
     2e0:	8c e2       	ldi	r24, 0x2C	; 44
     2e2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <mcp2515_bit_modify>
     2e6:	05 c0       	rjmp	.+10     	; 0x2f2 <mcp2515_get_message+0xe6>
     2e8:	40 e0       	ldi	r20, 0x00	; 0
     2ea:	62 e0       	ldi	r22, 0x02	; 2
     2ec:	8c e2       	ldi	r24, 0x2C	; 44
     2ee:	0e 94 e6 00 	call	0x1cc	; 0x1cc <mcp2515_bit_modify>
     2f2:	89 81       	ldd	r24, Y+1	; 0x01
     2f4:	87 70       	andi	r24, 0x07	; 7
     2f6:	8f 5f       	subi	r24, 0xFF	; 255
     2f8:	0f 90       	pop	r0
     2fa:	df 91       	pop	r29
     2fc:	cf 91       	pop	r28
     2fe:	1f 91       	pop	r17
     300:	0f 91       	pop	r16
     302:	ff 90       	pop	r15
     304:	ef 90       	pop	r14
     306:	df 90       	pop	r13
     308:	cf 90       	pop	r12
     30a:	08 95       	ret

0000030c <mcp2515_send_message>:
     30c:	bf 92       	push	r11
     30e:	cf 92       	push	r12
     310:	df 92       	push	r13
     312:	ef 92       	push	r14
     314:	ff 92       	push	r15
     316:	0f 93       	push	r16
     318:	1f 93       	push	r17
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	1f 92       	push	r1
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62
     324:	6c 01       	movw	r12, r24
     326:	80 ea       	ldi	r24, 0xA0	; 160
     328:	0e 94 fe 00 	call	0x1fc	; 0x1fc <mcp2515_read_status>
     32c:	89 83       	std	Y+1, r24	; 0x01
     32e:	89 81       	ldd	r24, Y+1	; 0x01
     330:	82 ff       	sbrs	r24, 2
     332:	0a c0       	rjmp	.+20     	; 0x348 <mcp2515_send_message+0x3c>
     334:	89 81       	ldd	r24, Y+1	; 0x01
     336:	84 ff       	sbrs	r24, 4
     338:	09 c0       	rjmp	.+18     	; 0x34c <mcp2515_send_message+0x40>
     33a:	89 81       	ldd	r24, Y+1	; 0x01
     33c:	86 fd       	sbrc	r24, 6
     33e:	69 c0       	rjmp	.+210    	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     340:	68 94       	set
     342:	bb 24       	eor	r11, r11
     344:	b2 f8       	bld	r11, 2
     346:	05 c0       	rjmp	.+10     	; 0x352 <mcp2515_send_message+0x46>
     348:	b1 2c       	mov	r11, r1
     34a:	03 c0       	rjmp	.+6      	; 0x352 <mcp2515_send_message+0x46>
     34c:	68 94       	set
     34e:	bb 24       	eor	r11, r11
     350:	b1 f8       	bld	r11, 1
     352:	2a 98       	cbi	0x05, 2	; 5
     354:	8b 2d       	mov	r24, r11
     356:	80 64       	ori	r24, 0x40	; 64
     358:	0e 94 da 00 	call	0x1b4	; 0x1b4 <SPI_txrx>
     35c:	d6 01       	movw	r26, r12
     35e:	8d 91       	ld	r24, X+
     360:	9c 91       	ld	r25, X
     362:	96 95       	lsr	r25
     364:	87 95       	ror	r24
     366:	96 95       	lsr	r25
     368:	87 95       	ror	r24
     36a:	96 95       	lsr	r25
     36c:	87 95       	ror	r24
     36e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <SPI_txrx>
     372:	f6 01       	movw	r30, r12
     374:	80 81       	ld	r24, Z
     376:	82 95       	swap	r24
     378:	88 0f       	add	r24, r24
     37a:	80 7e       	andi	r24, 0xE0	; 224
     37c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <SPI_txrx>
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	0e 94 da 00 	call	0x1b4	; 0x1b4 <SPI_txrx>
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	0e 94 da 00 	call	0x1b4	; 0x1b4 <SPI_txrx>
     38c:	d6 01       	movw	r26, r12
     38e:	12 96       	adiw	r26, 0x02	; 2
     390:	8c 91       	ld	r24, X
     392:	e8 2e       	mov	r14, r24
     394:	e6 94       	lsr	r14
     396:	be 2d       	mov	r27, r14
     398:	bf 70       	andi	r27, 0x0F	; 15
     39a:	eb 2e       	mov	r14, r27
     39c:	80 ff       	sbrs	r24, 0
     39e:	05 c0       	rjmp	.+10     	; 0x3aa <mcp2515_send_message+0x9e>
     3a0:	8b 2f       	mov	r24, r27
     3a2:	80 64       	ori	r24, 0x40	; 64
     3a4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <SPI_txrx>
     3a8:	17 c0       	rjmp	.+46     	; 0x3d8 <mcp2515_send_message+0xcc>
     3aa:	8b 2f       	mov	r24, r27
     3ac:	0e 94 da 00 	call	0x1b4	; 0x1b4 <SPI_txrx>
     3b0:	ee 20       	and	r14, r14
     3b2:	91 f0       	breq	.+36     	; 0x3d8 <mcp2515_send_message+0xcc>
     3b4:	86 01       	movw	r16, r12
     3b6:	0d 5f       	subi	r16, 0xFD	; 253
     3b8:	1f 4f       	sbci	r17, 0xFF	; 255
     3ba:	ea 94       	dec	r14
     3bc:	f1 2c       	mov	r15, r1
     3be:	e4 e0       	ldi	r30, 0x04	; 4
     3c0:	ee 0e       	add	r14, r30
     3c2:	f1 1c       	adc	r15, r1
     3c4:	ec 0c       	add	r14, r12
     3c6:	fd 1c       	adc	r15, r13
     3c8:	d8 01       	movw	r26, r16
     3ca:	8d 91       	ld	r24, X+
     3cc:	8d 01       	movw	r16, r26
     3ce:	0e 94 da 00 	call	0x1b4	; 0x1b4 <SPI_txrx>
     3d2:	0e 15       	cp	r16, r14
     3d4:	1f 05       	cpc	r17, r15
     3d6:	c1 f7       	brne	.-16     	; 0x3c8 <mcp2515_send_message+0xbc>
     3d8:	2a 9a       	sbi	0x05, 2	; 5
     3da:	b5 e0       	ldi	r27, 0x05	; 5
     3dc:	ba 95       	dec	r27
     3de:	f1 f7       	brne	.-4      	; 0x3dc <mcp2515_send_message+0xd0>
     3e0:	00 00       	nop
     3e2:	2a 98       	cbi	0x05, 2	; 5
     3e4:	b1 10       	cpse	r11, r1
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <mcp2515_send_message+0xe0>
     3e8:	bb 24       	eor	r11, r11
     3ea:	b3 94       	inc	r11
     3ec:	8b 2d       	mov	r24, r11
     3ee:	80 68       	ori	r24, 0x80	; 128
     3f0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <SPI_txrx>
     3f4:	2a 9a       	sbi	0x05, 2	; 5
     3f6:	f6 01       	movw	r30, r12
     3f8:	11 82       	std	Z+1, r1	; 0x01
     3fa:	10 82       	st	Z, r1
     3fc:	82 81       	ldd	r24, Z+2	; 0x02
     3fe:	80 7e       	andi	r24, 0xE0	; 224
     400:	82 83       	std	Z+2, r24	; 0x02
     402:	33 96       	adiw	r30, 0x03	; 3
     404:	88 e0       	ldi	r24, 0x08	; 8
     406:	df 01       	movw	r26, r30
     408:	1d 92       	st	X+, r1
     40a:	8a 95       	dec	r24
     40c:	e9 f7       	brne	.-6      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     40e:	8b 2d       	mov	r24, r11
     410:	01 c0       	rjmp	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	0f 90       	pop	r0
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	1f 91       	pop	r17
     41c:	0f 91       	pop	r16
     41e:	ff 90       	pop	r15
     420:	ef 90       	pop	r14
     422:	df 90       	pop	r13
     424:	cf 90       	pop	r12
     426:	bf 90       	pop	r11
     428:	08 95       	ret

0000042a <USART_Init>:
     42a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     42e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     432:	e1 ec       	ldi	r30, 0xC1	; 193
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	80 81       	ld	r24, Z
     438:	88 69       	ori	r24, 0x98	; 152
     43a:	80 83       	st	Z, r24
     43c:	e2 ec       	ldi	r30, 0xC2	; 194
     43e:	f0 e0       	ldi	r31, 0x00	; 0
     440:	80 81       	ld	r24, Z
     442:	86 60       	ori	r24, 0x06	; 6
     444:	80 83       	st	Z, r24
     446:	08 95       	ret

00000448 <USART_Receive>:
     448:	e0 ec       	ldi	r30, 0xC0	; 192
     44a:	f0 e0       	ldi	r31, 0x00	; 0
     44c:	80 81       	ld	r24, Z
     44e:	88 23       	and	r24, r24
     450:	ec f7       	brge	.-6      	; 0x44c <USART_Receive+0x4>
     452:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     456:	08 95       	ret

00000458 <USART_Transmit>:
     458:	e0 ec       	ldi	r30, 0xC0	; 192
     45a:	f0 e0       	ldi	r31, 0x00	; 0
     45c:	90 81       	ld	r25, Z
     45e:	95 ff       	sbrs	r25, 5
     460:	fd cf       	rjmp	.-6      	; 0x45c <USART_Transmit+0x4>
     462:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     466:	08 95       	ret

00000468 <USART_CAN_TX>:
     468:	cf 92       	push	r12
     46a:	df 92       	push	r13
     46c:	ef 92       	push	r14
     46e:	ff 92       	push	r15
     470:	0f 93       	push	r16
     472:	1f 93       	push	r17
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	cd b7       	in	r28, 0x3d	; 61
     47a:	de b7       	in	r29, 0x3e	; 62
     47c:	2b 97       	sbiw	r28, 0x0b	; 11
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	f8 94       	cli
     482:	de bf       	out	0x3e, r29	; 62
     484:	0f be       	out	0x3f, r0	; 63
     486:	cd bf       	out	0x3d, r28	; 61
     488:	e9 82       	std	Y+1, r14	; 0x01
     48a:	fa 82       	std	Y+2, r15	; 0x02
     48c:	0b 83       	std	Y+3, r16	; 0x03
     48e:	1c 83       	std	Y+4, r17	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	69 87       	std	Y+9, r22	; 0x09
     49a:	7a 87       	std	Y+10, r23	; 0x0a
     49c:	8b 87       	std	Y+11, r24	; 0x0b
     49e:	c9 80       	ldd	r12, Y+1	; 0x01
     4a0:	da 80       	ldd	r13, Y+2	; 0x02
     4a2:	06 95       	lsr	r16
     4a4:	0f 70       	andi	r16, 0x0F	; 15
     4a6:	c6 01       	movw	r24, r12
     4a8:	96 95       	lsr	r25
     4aa:	87 95       	ror	r24
     4ac:	96 95       	lsr	r25
     4ae:	87 95       	ror	r24
     4b0:	96 95       	lsr	r25
     4b2:	87 95       	ror	r24
     4b4:	0e 94 2c 02 	call	0x458	; 0x458 <USART_Transmit>
     4b8:	8b 81       	ldd	r24, Y+3	; 0x03
     4ba:	81 70       	andi	r24, 0x01	; 1
     4bc:	82 95       	swap	r24
     4be:	80 7f       	andi	r24, 0xF0	; 240
     4c0:	cc 0c       	add	r12, r12
     4c2:	cc 0c       	add	r12, r12
     4c4:	cc 0c       	add	r12, r12
     4c6:	cc 0c       	add	r12, r12
     4c8:	cc 0c       	add	r12, r12
     4ca:	8c 29       	or	r24, r12
     4cc:	80 2b       	or	r24, r16
     4ce:	0e 94 2c 02 	call	0x458	; 0x458 <USART_Transmit>
     4d2:	8b 81       	ldd	r24, Y+3	; 0x03
     4d4:	80 fd       	sbrc	r24, 0
     4d6:	17 c0       	rjmp	.+46     	; 0x506 <USART_CAN_TX+0x9e>
     4d8:	e0 2e       	mov	r14, r16
     4da:	f1 2c       	mov	r15, r1
     4dc:	1e 14       	cp	r1, r14
     4de:	1f 04       	cpc	r1, r15
     4e0:	94 f4       	brge	.+36     	; 0x506 <USART_CAN_TX+0x9e>
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	10 e0       	ldi	r17, 0x00	; 0
     4e8:	e4 e0       	ldi	r30, 0x04	; 4
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	ec 0f       	add	r30, r28
     4ee:	fd 1f       	adc	r31, r29
     4f0:	e8 0f       	add	r30, r24
     4f2:	f9 1f       	adc	r31, r25
     4f4:	80 81       	ld	r24, Z
     4f6:	0e 94 2c 02 	call	0x458	; 0x458 <USART_Transmit>
     4fa:	1f 5f       	subi	r17, 0xFF	; 255
     4fc:	81 2f       	mov	r24, r17
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	8e 15       	cp	r24, r14
     502:	9f 05       	cpc	r25, r15
     504:	8c f3       	brlt	.-30     	; 0x4e8 <USART_CAN_TX+0x80>
     506:	2b 96       	adiw	r28, 0x0b	; 11
     508:	0f b6       	in	r0, 0x3f	; 63
     50a:	f8 94       	cli
     50c:	de bf       	out	0x3e, r29	; 62
     50e:	0f be       	out	0x3f, r0	; 63
     510:	cd bf       	out	0x3d, r28	; 61
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	1f 91       	pop	r17
     518:	0f 91       	pop	r16
     51a:	ff 90       	pop	r15
     51c:	ef 90       	pop	r14
     51e:	df 90       	pop	r13
     520:	cf 90       	pop	r12
     522:	08 95       	ret

00000524 <initUART>:
     524:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     528:	87 e6       	ldi	r24, 0x67	; 103
     52a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     52e:	88 e0       	ldi	r24, 0x08	; 8
     530:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     534:	86 e0       	ldi	r24, 0x06	; 6
     536:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     53a:	08 95       	ret

0000053c <txUART>:
     53c:	e0 ec       	ldi	r30, 0xC0	; 192
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	90 81       	ld	r25, Z
     542:	95 ff       	sbrs	r25, 5
     544:	fd cf       	rjmp	.-6      	; 0x540 <txUART+0x4>
     546:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     54a:	08 95       	ret

0000054c <sendString>:
     54c:	cf 93       	push	r28
     54e:	df 93       	push	r29
     550:	ec 01       	movw	r28, r24
     552:	88 81       	ld	r24, Y
     554:	88 23       	and	r24, r24
     556:	31 f0       	breq	.+12     	; 0x564 <sendString+0x18>
     558:	21 96       	adiw	r28, 0x01	; 1
     55a:	0e 94 9e 02 	call	0x53c	; 0x53c <txUART>
     55e:	89 91       	ld	r24, Y+
     560:	81 11       	cpse	r24, r1
     562:	fb cf       	rjmp	.-10     	; 0x55a <sendString+0xe>
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	08 95       	ret

0000056a <init_ADC>:
     56a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     56e:	8e ec       	ldi	r24, 0xCE	; 206
     570:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     574:	81 ec       	ldi	r24, 0xC1	; 193
     576:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
     57a:	08 95       	ret

0000057c <init_ADC_timer>:
     57c:	8d e4       	ldi	r24, 0x4D	; 77
     57e:	87 bd       	out	0x27, r24	; 39
     580:	84 b5       	in	r24, 0x24	; 36
     582:	82 60       	ori	r24, 0x02	; 2
     584:	84 bd       	out	0x24, r24	; 36
     586:	84 e0       	ldi	r24, 0x04	; 4
     588:	85 bd       	out	0x25, r24	; 37
     58a:	ee e6       	ldi	r30, 0x6E	; 110
     58c:	f0 e0       	ldi	r31, 0x00	; 0
     58e:	80 81       	ld	r24, Z
     590:	82 60       	ori	r24, 0x02	; 2
     592:	80 83       	st	Z, r24
     594:	08 95       	ret

00000596 <__vector_14>:
     596:	1f 92       	push	r1
     598:	0f 92       	push	r0
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	0f 92       	push	r0
     59e:	11 24       	eor	r1, r1
     5a0:	8f 93       	push	r24
     5a2:	ef 93       	push	r30
     5a4:	ff 93       	push	r31
     5a6:	ea e7       	ldi	r30, 0x7A	; 122
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	80 81       	ld	r24, Z
     5ac:	80 64       	ori	r24, 0x40	; 64
     5ae:	80 83       	st	Z, r24
     5b0:	ff 91       	pop	r31
     5b2:	ef 91       	pop	r30
     5b4:	8f 91       	pop	r24
     5b6:	0f 90       	pop	r0
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	0f 90       	pop	r0
     5bc:	1f 90       	pop	r1
     5be:	18 95       	reti

000005c0 <__vector_21>:
     5c0:	1f 92       	push	r1
     5c2:	0f 92       	push	r0
     5c4:	0f b6       	in	r0, 0x3f	; 63
     5c6:	0f 92       	push	r0
     5c8:	11 24       	eor	r1, r1
     5ca:	2f 93       	push	r18
     5cc:	8f 93       	push	r24
     5ce:	9f 93       	push	r25
     5d0:	ef 93       	push	r30
     5d2:	ff 93       	push	r31
     5d4:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <adCount>
     5d8:	85 30       	cpi	r24, 0x05	; 5
     5da:	31 f0       	breq	.+12     	; 0x5e8 <__vector_21+0x28>
     5dc:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <adCount>
     5e0:	8f 5f       	subi	r24, 0xFF	; 255
     5e2:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <adCount>
     5e6:	02 c0       	rjmp	.+4      	; 0x5ec <__vector_21+0x2c>
     5e8:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <adCount>
     5ec:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <adCount>
     5f0:	80 ff       	sbrs	r24, 0
     5f2:	61 c0       	rjmp	.+194    	; 0x6b6 <__vector_21+0xf6>
     5f4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	90 93 6a 03 	sts	0x036A, r25	; 0x80036a <adResult+0x1>
     5fe:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <adResult>
     602:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     606:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <adResult>
     60a:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <adResult+0x1>
     60e:	92 2b       	or	r25, r18
     610:	90 93 6a 03 	sts	0x036A, r25	; 0x80036a <adResult+0x1>
     614:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <adResult>
     618:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <adCount>
     61c:	85 30       	cpi	r24, 0x05	; 5
     61e:	40 f5       	brcc	.+80     	; 0x670 <__vector_21+0xb0>
     620:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <adCount>
     624:	81 30       	cpi	r24, 0x01	; 1
     626:	81 f4       	brne	.+32     	; 0x648 <__vector_21+0x88>
     628:	e0 91 6b 03 	lds	r30, 0x036B	; 0x80036b <ep_history>
     62c:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <adResult>
     630:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <adResult+0x1>
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	ee 0f       	add	r30, r30
     638:	ff 1f       	adc	r31, r31
     63a:	ea 50       	subi	r30, 0x0A	; 10
     63c:	fc 4f       	sbci	r31, 0xFC	; 252
     63e:	91 83       	std	Z+1, r25	; 0x01
     640:	80 83       	st	Z, r24
     642:	86 e0       	ldi	r24, 0x06	; 6
     644:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     648:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <adCount>
     64c:	83 30       	cpi	r24, 0x03	; 3
     64e:	81 f4       	brne	.+32     	; 0x670 <__vector_21+0xb0>
     650:	e0 91 6b 03 	lds	r30, 0x036B	; 0x80036b <ep_history>
     654:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <adResult>
     658:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <adResult+0x1>
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	ee 0f       	add	r30, r30
     660:	ff 1f       	adc	r31, r31
     662:	ee 51       	subi	r30, 0x1E	; 30
     664:	fc 4f       	sbci	r31, 0xFC	; 252
     666:	91 83       	std	Z+1, r25	; 0x01
     668:	80 83       	st	Z, r24
     66a:	87 e0       	ldi	r24, 0x07	; 7
     66c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     670:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <adCount>
     674:	85 30       	cpi	r24, 0x05	; 5
     676:	e1 f4       	brne	.+56     	; 0x6b0 <__vector_21+0xf0>
     678:	e0 91 6b 03 	lds	r30, 0x036B	; 0x80036b <ep_history>
     67c:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <adResult>
     680:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <adResult+0x1>
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	ee 0f       	add	r30, r30
     688:	ff 1f       	adc	r31, r31
     68a:	e5 56       	subi	r30, 0x65	; 101
     68c:	fc 4f       	sbci	r31, 0xFC	; 252
     68e:	91 83       	std	Z+1, r25	; 0x01
     690:	80 83       	st	Z, r24
     692:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     696:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <ep_history>
     69a:	89 30       	cpi	r24, 0x09	; 9
     69c:	30 f4       	brcc	.+12     	; 0x6aa <__vector_21+0xea>
     69e:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <ep_history>
     6a2:	8f 5f       	subi	r24, 0xFF	; 255
     6a4:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <ep_history>
     6a8:	03 c0       	rjmp	.+6      	; 0x6b0 <__vector_21+0xf0>
     6aa:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <ep_history>
     6ae:	19 9a       	sbi	0x03, 1	; 3
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <adcDone>
     6b6:	ff 91       	pop	r31
     6b8:	ef 91       	pop	r30
     6ba:	9f 91       	pop	r25
     6bc:	8f 91       	pop	r24
     6be:	2f 91       	pop	r18
     6c0:	0f 90       	pop	r0
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	0f 90       	pop	r0
     6c6:	1f 90       	pop	r1
     6c8:	18 95       	reti

000006ca <__vector_18>:
     6ca:	1f 92       	push	r1
     6cc:	0f 92       	push	r0
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	0f 92       	push	r0
     6d2:	11 24       	eor	r1, r1
     6d4:	2f 93       	push	r18
     6d6:	3f 93       	push	r19
     6d8:	4f 93       	push	r20
     6da:	5f 93       	push	r21
     6dc:	6f 93       	push	r22
     6de:	7f 93       	push	r23
     6e0:	8f 93       	push	r24
     6e2:	9f 93       	push	r25
     6e4:	af 93       	push	r26
     6e6:	bf 93       	push	r27
     6e8:	ef 93       	push	r30
     6ea:	ff 93       	push	r31
     6ec:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     6f0:	88 23       	and	r24, r24
     6f2:	44 f0       	brlt	.+16     	; 0x704 <__vector_18+0x3a>
     6f4:	0e 94 24 02 	call	0x448	; 0x448 <USART_Receive>
     6f8:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <CANTX_buffer+0x3>
     6fc:	8e e1       	ldi	r24, 0x1E	; 30
     6fe:	94 e0       	ldi	r25, 0x04	; 4
     700:	0e 94 86 01 	call	0x30c	; 0x30c <mcp2515_send_message>
     704:	ff 91       	pop	r31
     706:	ef 91       	pop	r30
     708:	bf 91       	pop	r27
     70a:	af 91       	pop	r26
     70c:	9f 91       	pop	r25
     70e:	8f 91       	pop	r24
     710:	7f 91       	pop	r23
     712:	6f 91       	pop	r22
     714:	5f 91       	pop	r21
     716:	4f 91       	pop	r20
     718:	3f 91       	pop	r19
     71a:	2f 91       	pop	r18
     71c:	0f 90       	pop	r0
     71e:	0f be       	out	0x3f, r0	; 63
     720:	0f 90       	pop	r0
     722:	1f 90       	pop	r1
     724:	18 95       	reti

00000726 <__vector_1>:
     726:	1f 92       	push	r1
     728:	0f 92       	push	r0
     72a:	0f b6       	in	r0, 0x3f	; 63
     72c:	0f 92       	push	r0
     72e:	11 24       	eor	r1, r1
     730:	2f 93       	push	r18
     732:	3f 93       	push	r19
     734:	4f 93       	push	r20
     736:	5f 93       	push	r21
     738:	6f 93       	push	r22
     73a:	7f 93       	push	r23
     73c:	8f 93       	push	r24
     73e:	9f 93       	push	r25
     740:	af 93       	push	r26
     742:	bf 93       	push	r27
     744:	ef 93       	push	r30
     746:	ff 93       	push	r31
     748:	8f ea       	ldi	r24, 0xAF	; 175
     74a:	93 e0       	ldi	r25, 0x03	; 3
     74c:	0e 94 06 01 	call	0x20c	; 0x20c <mcp2515_get_message>
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <rx_flag>
     756:	ff 91       	pop	r31
     758:	ef 91       	pop	r30
     75a:	bf 91       	pop	r27
     75c:	af 91       	pop	r26
     75e:	9f 91       	pop	r25
     760:	8f 91       	pop	r24
     762:	7f 91       	pop	r23
     764:	6f 91       	pop	r22
     766:	5f 91       	pop	r21
     768:	4f 91       	pop	r20
     76a:	3f 91       	pop	r19
     76c:	2f 91       	pop	r18
     76e:	0f 90       	pop	r0
     770:	0f be       	out	0x3f, r0	; 63
     772:	0f 90       	pop	r0
     774:	1f 90       	pop	r1
     776:	18 95       	reti

00000778 <__vector_24>:
     778:	1f 92       	push	r1
     77a:	0f 92       	push	r0
     77c:	0f b6       	in	r0, 0x3f	; 63
     77e:	0f 92       	push	r0
     780:	11 24       	eor	r1, r1
     782:	8f 93       	push	r24
     784:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     788:	8c 7f       	andi	r24, 0xFC	; 252
     78a:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <i2c_status>
     78e:	8f 91       	pop	r24
     790:	0f 90       	pop	r0
     792:	0f be       	out	0x3f, r0	; 63
     794:	0f 90       	pop	r0
     796:	1f 90       	pop	r1
     798:	18 95       	reti

0000079a <init_i2c>:
     79a:	ec eb       	ldi	r30, 0xBC	; 188
     79c:	f0 e0       	ldi	r31, 0x00	; 0
     79e:	80 81       	ld	r24, Z
     7a0:	84 60       	ori	r24, 0x04	; 4
     7a2:	80 83       	st	Z, r24
     7a4:	80 81       	ld	r24, Z
     7a6:	81 60       	ori	r24, 0x01	; 1
     7a8:	80 83       	st	Z, r24
     7aa:	a9 eb       	ldi	r26, 0xB9	; 185
     7ac:	b0 e0       	ldi	r27, 0x00	; 0
     7ae:	8c 91       	ld	r24, X
     7b0:	81 60       	ori	r24, 0x01	; 1
     7b2:	8c 93       	st	X, r24
     7b4:	83 e0       	ldi	r24, 0x03	; 3
     7b6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     7ba:	80 81       	ld	r24, Z
     7bc:	80 62       	ori	r24, 0x20	; 32
     7be:	80 83       	st	Z, r24
     7c0:	80 81       	ld	r24, Z
     7c2:	80 68       	ori	r24, 0x80	; 128
     7c4:	80 83       	st	Z, r24
     7c6:	80 81       	ld	r24, Z
     7c8:	80 62       	ori	r24, 0x20	; 32
     7ca:	80 83       	st	Z, r24
     7cc:	08 95       	ret

000007ce <__vector_11>:
     7ce:	1f 92       	push	r1
     7d0:	0f 92       	push	r0
     7d2:	0f b6       	in	r0, 0x3f	; 63
     7d4:	0f 92       	push	r0
     7d6:	11 24       	eor	r1, r1
     7d8:	2f 93       	push	r18
     7da:	3f 93       	push	r19
     7dc:	4f 93       	push	r20
     7de:	5f 93       	push	r21
     7e0:	6f 93       	push	r22
     7e2:	7f 93       	push	r23
     7e4:	8f 93       	push	r24
     7e6:	9f 93       	push	r25
     7e8:	af 93       	push	r26
     7ea:	bf 93       	push	r27
     7ec:	ef 93       	push	r30
     7ee:	ff 93       	push	r31
     7f0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     7f4:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <state>
     7f8:	83 30       	cpi	r24, 0x03	; 3
     7fa:	40 f4       	brcc	.+16     	; 0x80c <__vector_11+0x3e>
     7fc:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <state>
     800:	8f 5f       	subi	r24, 0xFF	; 255
     802:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <state>
     806:	0e 94 cd 03 	call	0x79a	; 0x79a <init_i2c>
     80a:	05 c0       	rjmp	.+10     	; 0x816 <__vector_11+0x48>
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <state>
     812:	0e 94 cd 03 	call	0x79a	; 0x79a <init_i2c>
     816:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <__data_end>
     81a:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <__data_end+0x1>
     81e:	a0 91 62 03 	lds	r26, 0x0362	; 0x800362 <__data_end+0x2>
     822:	b0 91 63 03 	lds	r27, 0x0363	; 0x800363 <__data_end+0x3>
     826:	01 96       	adiw	r24, 0x01	; 1
     828:	a1 1d       	adc	r26, r1
     82a:	b1 1d       	adc	r27, r1
     82c:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <__data_end>
     830:	90 93 61 03 	sts	0x0361, r25	; 0x800361 <__data_end+0x1>
     834:	a0 93 62 03 	sts	0x0362, r26	; 0x800362 <__data_end+0x2>
     838:	b0 93 63 03 	sts	0x0363, r27	; 0x800363 <__data_end+0x3>
     83c:	ff 91       	pop	r31
     83e:	ef 91       	pop	r30
     840:	bf 91       	pop	r27
     842:	af 91       	pop	r26
     844:	9f 91       	pop	r25
     846:	8f 91       	pop	r24
     848:	7f 91       	pop	r23
     84a:	6f 91       	pop	r22
     84c:	5f 91       	pop	r21
     84e:	4f 91       	pop	r20
     850:	3f 91       	pop	r19
     852:	2f 91       	pop	r18
     854:	0f 90       	pop	r0
     856:	0f be       	out	0x3f, r0	; 63
     858:	0f 90       	pop	r0
     85a:	1f 90       	pop	r1
     85c:	18 95       	reti

0000085e <ext_press_CAN>:
		adcDone = 0;
	}
}

void ext_press_CAN(void)
{
     85e:	ef 92       	push	r14
     860:	ff 92       	push	r15
     862:	0f 93       	push	r16
     864:	1f 93       	push	r17
     866:	cf 93       	push	r28
     868:	df 93       	push	r29
	uint16_t ep3;								//current external pressure values
	uint16_t median;
	uint16_t min;
	uint16_t max;

	ep1 = ep1_raw[history];
     86a:	e0 91 6c 03 	lds	r30, 0x036C	; 0x80036c <history>
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	ee 0f       	add	r30, r30
     872:	ff 1f       	adc	r31, r31
     874:	ea 50       	subi	r30, 0x0A	; 10
     876:	fc 4f       	sbci	r31, 0xFC	; 252
     878:	00 81       	ld	r16, Z
     87a:	11 81       	ldd	r17, Z+1	; 0x01
	ep2 = ep2_raw[history];
     87c:	e0 91 6c 03 	lds	r30, 0x036C	; 0x80036c <history>
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	ee 0f       	add	r30, r30
     884:	ff 1f       	adc	r31, r31
     886:	ee 51       	subi	r30, 0x1E	; 30
     888:	fc 4f       	sbci	r31, 0xFC	; 252
     88a:	e0 80       	ld	r14, Z
     88c:	f1 80       	ldd	r15, Z+1	; 0x01
	ep3 = ep3_raw[history];
     88e:	e0 91 6c 03 	lds	r30, 0x036C	; 0x80036c <history>
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	ee 0f       	add	r30, r30
     896:	ff 1f       	adc	r31, r31
     898:	e5 56       	subi	r30, 0x65	; 101
     89a:	fc 4f       	sbci	r31, 0xFC	; 252
     89c:	c0 81       	ld	r28, Z
     89e:	d1 81       	ldd	r29, Z+1	; 0x01

	//check pressure 1 continuity
	if(ep1_raw[history] > ep1_raw[history-1])
     8a0:	a0 91 6c 03 	lds	r26, 0x036C	; 0x80036c <history>
     8a4:	e0 91 6c 03 	lds	r30, 0x036C	; 0x80036c <history>
     8a8:	b0 e0       	ldi	r27, 0x00	; 0
     8aa:	aa 0f       	add	r26, r26
     8ac:	bb 1f       	adc	r27, r27
     8ae:	aa 50       	subi	r26, 0x0A	; 10
     8b0:	bc 4f       	sbci	r27, 0xFC	; 252
     8b2:	f0 e0       	ldi	r31, 0x00	; 0
     8b4:	ee 0f       	add	r30, r30
     8b6:	ff 1f       	adc	r31, r31
     8b8:	ec 50       	subi	r30, 0x0C	; 12
     8ba:	fc 4f       	sbci	r31, 0xFC	; 252
     8bc:	6d 91       	ld	r22, X+
     8be:	7c 91       	ld	r23, X
     8c0:	40 81       	ld	r20, Z
     8c2:	51 81       	ldd	r21, Z+1	; 0x01
     8c4:	46 17       	cp	r20, r22
     8c6:	57 07       	cpc	r21, r23
     8c8:	60 f4       	brcc	.+24     	; 0x8e2 <ext_press_CAN+0x84>
	{
		diff1 = ep1-ep1_raw[history-1];
     8ca:	e0 91 6c 03 	lds	r30, 0x036C	; 0x80036c <history>
     8ce:	f0 e0       	ldi	r31, 0x00	; 0
     8d0:	ee 0f       	add	r30, r30
     8d2:	ff 1f       	adc	r31, r31
     8d4:	ec 50       	subi	r30, 0x0C	; 12
     8d6:	fc 4f       	sbci	r31, 0xFC	; 252
     8d8:	80 81       	ld	r24, Z
     8da:	40 2f       	mov	r20, r16
     8dc:	48 1b       	sub	r20, r24
     8de:	84 2f       	mov	r24, r20
     8e0:	09 c0       	rjmp	.+18     	; 0x8f4 <ext_press_CAN+0x96>
	}
	else
	{
		diff1 = ep1_raw[history-1]-ep1;
     8e2:	e0 91 6c 03 	lds	r30, 0x036C	; 0x80036c <history>
     8e6:	f0 e0       	ldi	r31, 0x00	; 0
     8e8:	ee 0f       	add	r30, r30
     8ea:	ff 1f       	adc	r31, r31
     8ec:	ec 50       	subi	r30, 0x0C	; 12
     8ee:	fc 4f       	sbci	r31, 0xFC	; 252
     8f0:	80 81       	ld	r24, Z
     8f2:	80 1b       	sub	r24, r16
	}

	//check pressure 2 continuity
	if(ep2_raw[history] > ep2_raw[history-1])
     8f4:	a0 91 6c 03 	lds	r26, 0x036C	; 0x80036c <history>
     8f8:	e0 91 6c 03 	lds	r30, 0x036C	; 0x80036c <history>
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	aa 0f       	add	r26, r26
     900:	bb 1f       	adc	r27, r27
     902:	ae 51       	subi	r26, 0x1E	; 30
     904:	bc 4f       	sbci	r27, 0xFC	; 252
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	ee 0f       	add	r30, r30
     90a:	ff 1f       	adc	r31, r31
     90c:	e0 52       	subi	r30, 0x20	; 32
     90e:	fc 4f       	sbci	r31, 0xFC	; 252
     910:	6d 91       	ld	r22, X+
     912:	7c 91       	ld	r23, X
     914:	40 81       	ld	r20, Z
     916:	51 81       	ldd	r21, Z+1	; 0x01
     918:	46 17       	cp	r20, r22
     91a:	57 07       	cpc	r21, r23
     91c:	60 f4       	brcc	.+24     	; 0x936 <__stack+0x37>
	{
		diff2 = ep2-ep2_raw[history-1];
     91e:	e0 91 6c 03 	lds	r30, 0x036C	; 0x80036c <history>
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	ee 0f       	add	r30, r30
     926:	ff 1f       	adc	r31, r31
     928:	e0 52       	subi	r30, 0x20	; 32
     92a:	fc 4f       	sbci	r31, 0xFC	; 252
     92c:	40 81       	ld	r20, Z
     92e:	5e 2d       	mov	r21, r14
     930:	54 1b       	sub	r21, r20
     932:	45 2f       	mov	r20, r21
     934:	09 c0       	rjmp	.+18     	; 0x948 <__stack+0x49>
	}
	else
	{
		diff2 = ep2_raw[history-1]-ep2;
     936:	e0 91 6c 03 	lds	r30, 0x036C	; 0x80036c <history>
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	ee 0f       	add	r30, r30
     93e:	ff 1f       	adc	r31, r31
     940:	e0 52       	subi	r30, 0x20	; 32
     942:	fc 4f       	sbci	r31, 0xFC	; 252
     944:	40 81       	ld	r20, Z
     946:	4e 19       	sub	r20, r14
	}

	//check pressure 3 continuity
	if(ep3_raw[history] > ep3_raw[history-1])
     948:	a0 91 6c 03 	lds	r26, 0x036C	; 0x80036c <history>
     94c:	e0 91 6c 03 	lds	r30, 0x036C	; 0x80036c <history>
     950:	b0 e0       	ldi	r27, 0x00	; 0
     952:	aa 0f       	add	r26, r26
     954:	bb 1f       	adc	r27, r27
     956:	a5 56       	subi	r26, 0x65	; 101
     958:	bc 4f       	sbci	r27, 0xFC	; 252
     95a:	f0 e0       	ldi	r31, 0x00	; 0
     95c:	ee 0f       	add	r30, r30
     95e:	ff 1f       	adc	r31, r31
     960:	e7 56       	subi	r30, 0x67	; 103
     962:	fc 4f       	sbci	r31, 0xFC	; 252
     964:	0d 90       	ld	r0, X+
     966:	bc 91       	ld	r27, X
     968:	a0 2d       	mov	r26, r0
     96a:	60 81       	ld	r22, Z
     96c:	71 81       	ldd	r23, Z+1	; 0x01
     96e:	6a 17       	cp	r22, r26
     970:	7b 07       	cpc	r23, r27
     972:	58 f4       	brcc	.+22     	; 0x98a <__stack+0x8b>
	{
		diff3 = ep3-ep3_raw[history-1];
     974:	e0 91 6c 03 	lds	r30, 0x036C	; 0x80036c <history>
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	ee 0f       	add	r30, r30
     97c:	ff 1f       	adc	r31, r31
     97e:	e7 56       	subi	r30, 0x67	; 103
     980:	fc 4f       	sbci	r31, 0xFC	; 252
     982:	50 81       	ld	r21, Z
     984:	6c 2f       	mov	r22, r28
     986:	65 1b       	sub	r22, r21
     988:	09 c0       	rjmp	.+18     	; 0x99c <__stack+0x9d>
	}
	else
	{
		diff3 = ep3_raw[history-1]-ep3;
     98a:	e0 91 6c 03 	lds	r30, 0x036C	; 0x80036c <history>
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	ee 0f       	add	r30, r30
     992:	ff 1f       	adc	r31, r31
     994:	e7 56       	subi	r30, 0x67	; 103
     996:	fc 4f       	sbci	r31, 0xFC	; 252
     998:	60 81       	ld	r22, Z
     99a:	6c 1b       	sub	r22, r28
	}

	if(diff1 > 50 || diff2 > 50 || diff3 > 50)
     99c:	83 33       	cpi	r24, 0x33	; 51
     99e:	08 f0       	brcs	.+2      	; 0x9a2 <__stack+0xa3>
     9a0:	af c0       	rjmp	.+350    	; 0xb00 <__stack+0x201>
     9a2:	43 33       	cpi	r20, 0x33	; 51
     9a4:	20 f4       	brcc	.+8      	; 0x9ae <__stack+0xaf>
     9a6:	63 33       	cpi	r22, 0x33	; 51
     9a8:	08 f0       	brcs	.+2      	; 0x9ac <__stack+0xad>
     9aa:	a6 c0       	rjmp	.+332    	; 0xaf8 <__stack+0x1f9>
     9ac:	19 c0       	rjmp	.+50     	; 0x9e0 <__stack+0xe1>
	{
		crit_error = DEPTH;
     9ae:	52 e0       	ldi	r21, 0x02	; 2
     9b0:	50 93 66 03 	sts	0x0366, r21	; 0x800366 <crit_error>
			p3_dc = 1;
		}
	}
	errors = p1_dc+p2_dc+p3_dc;

	switch (errors)
     9b4:	71 e0       	ldi	r23, 0x01	; 1
     9b6:	43 33       	cpi	r20, 0x33	; 51
     9b8:	08 f4       	brcc	.+2      	; 0x9bc <__stack+0xbd>
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	51 e0       	ldi	r21, 0x01	; 1
     9be:	83 33       	cpi	r24, 0x33	; 51
     9c0:	08 f4       	brcc	.+2      	; 0x9c4 <__stack+0xc5>
     9c2:	50 e0       	ldi	r21, 0x00	; 0
     9c4:	57 0f       	add	r21, r23
     9c6:	71 e0       	ldi	r23, 0x01	; 1
     9c8:	63 33       	cpi	r22, 0x33	; 51
     9ca:	08 f4       	brcc	.+2      	; 0x9ce <__stack+0xcf>
     9cc:	70 e0       	ldi	r23, 0x00	; 0
     9ce:	57 0f       	add	r21, r23
     9d0:	51 30       	cpi	r21, 0x01	; 1
     9d2:	b9 f0       	breq	.+46     	; 0xa02 <__stack+0x103>
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <__stack+0xe1>
     9d6:	52 30       	cpi	r21, 0x02	; 2
     9d8:	01 f1       	breq	.+64     	; 0xa1a <__stack+0x11b>
     9da:	53 30       	cpi	r21, 0x03	; 3
     9dc:	29 f1       	breq	.+74     	; 0xa28 <__stack+0x129>
     9de:	42 c0       	rjmp	.+132    	; 0xa64 <__stack+0x165>
	{
		case 0:
			num_sensors = 3;
			if((ep1 == ep2) && (ep2 == ep3))
     9e0:	0e 15       	cp	r16, r14
     9e2:	1f 05       	cpc	r17, r15
     9e4:	29 f1       	breq	.+74     	; 0xa30 <__stack+0x131>
			{
				median = ep3;
			}
			else if ((ep1 == ep2) || (ep1 == ep3))
     9e6:	0c 17       	cp	r16, r28
     9e8:	1d 07       	cpc	r17, r29
     9ea:	29 f1       	breq	.+74     	; 0xa36 <__stack+0x137>
			{
				median = ep1;
			}
			else if (ep2 == ep3)
     9ec:	ec 16       	cp	r14, r28
     9ee:	fd 06       	cpc	r15, r29
     9f0:	29 f1       	breq	.+74     	; 0xa3c <__stack+0x13d>
			{
				median = ep2;
			}
			else
			{
				median = getMedian_of3(ep1,ep2,ep3);
     9f2:	ae 01       	movw	r20, r28
     9f4:	b7 01       	movw	r22, r14
     9f6:	c8 01       	movw	r24, r16
     9f8:	0e 94 96 00 	call	0x12c	; 0x12c <getMedian_of3>
     9fc:	9c 01       	movw	r18, r24
	errors = p1_dc+p2_dc+p3_dc;

	switch (errors)
	{
		case 0:
			num_sensors = 3;
     9fe:	93 e0       	ldi	r25, 0x03	; 3
     a00:	31 c0       	rjmp	.+98     	; 0xa64 <__stack+0x165>
				median = getMedian_of3(ep1,ep2,ep3);
			}
			break;
		case 1:
			num_sensors = 2;
			if ((ep1 == ep2) || (ep1 == ep3))
     a02:	0e 15       	cp	r16, r14
     a04:	1f 05       	cpc	r17, r15
     a06:	e9 f0       	breq	.+58     	; 0xa42 <__stack+0x143>
     a08:	0c 17       	cp	r16, r28
     a0a:	1d 07       	cpc	r17, r29
     a0c:	e9 f0       	breq	.+58     	; 0xa48 <__stack+0x149>
			{
				median = ep1;
			}
			else if (ep2 == ep3)
     a0e:	ec 16       	cp	r14, r28
     a10:	fd 06       	cpc	r15, r29
     a12:	e9 f4       	brne	.+58     	; 0xa4e <__stack+0x14f>
			{
				median = ep2;
     a14:	9e 01       	movw	r18, r28
			{
				median = getMedian_of3(ep1,ep2,ep3);
			}
			break;
		case 1:
			num_sensors = 2;
     a16:	92 e0       	ldi	r25, 0x02	; 2
     a18:	25 c0       	rjmp	.+74     	; 0xa64 <__stack+0x165>
			}
			break;
		case 2:
			num_sensors=1;

			if(!p1_dc)
     a1a:	83 33       	cpi	r24, 0x33	; 51
     a1c:	d0 f0       	brcs	.+52     	; 0xa52 <__stack+0x153>
			{median = ep1;}

			else if(!p2_dc)
     a1e:	43 33       	cpi	r20, 0x33	; 51
     a20:	d8 f0       	brcs	.+54     	; 0xa58 <__stack+0x159>
			{median = ep2;}

			else 
			{median = ep3;}
     a22:	9e 01       	movw	r18, r28
			{
				median = ep2;
			}
			break;
		case 2:
			num_sensors=1;
     a24:	91 e0       	ldi	r25, 0x01	; 1
     a26:	1e c0       	rjmp	.+60     	; 0xa64 <__stack+0x165>

			else 
			{median = ep3;}
			break;
		case 3:
			median = 0xFF;
     a28:	2f ef       	ldi	r18, 0xFF	; 255
     a2a:	30 e0       	ldi	r19, 0x00	; 0
			num_sensors = 0;
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	1a c0       	rjmp	.+52     	; 0xa64 <__stack+0x165>
			{
				median = ep3;
			}
			else if ((ep1 == ep2) || (ep1 == ep3))
			{
				median = ep1;
     a30:	98 01       	movw	r18, r16
	errors = p1_dc+p2_dc+p3_dc;

	switch (errors)
	{
		case 0:
			num_sensors = 3;
     a32:	93 e0       	ldi	r25, 0x03	; 3
     a34:	17 c0       	rjmp	.+46     	; 0xa64 <__stack+0x165>
			{
				median = ep3;
			}
			else if ((ep1 == ep2) || (ep1 == ep3))
			{
				median = ep1;
     a36:	9e 01       	movw	r18, r28
	errors = p1_dc+p2_dc+p3_dc;

	switch (errors)
	{
		case 0:
			num_sensors = 3;
     a38:	93 e0       	ldi	r25, 0x03	; 3
     a3a:	14 c0       	rjmp	.+40     	; 0xa64 <__stack+0x165>
			{
				median = ep1;
			}
			else if (ep2 == ep3)
			{
				median = ep2;
     a3c:	9e 01       	movw	r18, r28
	errors = p1_dc+p2_dc+p3_dc;

	switch (errors)
	{
		case 0:
			num_sensors = 3;
     a3e:	93 e0       	ldi	r25, 0x03	; 3
     a40:	11 c0       	rjmp	.+34     	; 0xa64 <__stack+0x165>
			break;
		case 1:
			num_sensors = 2;
			if ((ep1 == ep2) || (ep1 == ep3))
			{
				median = ep1;
     a42:	97 01       	movw	r18, r14
			{
				median = getMedian_of3(ep1,ep2,ep3);
			}
			break;
		case 1:
			num_sensors = 2;
     a44:	92 e0       	ldi	r25, 0x02	; 2
     a46:	0e c0       	rjmp	.+28     	; 0xa64 <__stack+0x165>
			if ((ep1 == ep2) || (ep1 == ep3))
			{
				median = ep1;
     a48:	9e 01       	movw	r18, r28
			{
				median = getMedian_of3(ep1,ep2,ep3);
			}
			break;
		case 1:
			num_sensors = 2;
     a4a:	92 e0       	ldi	r25, 0x02	; 2
     a4c:	0b c0       	rjmp	.+22     	; 0xa64 <__stack+0x165>
     a4e:	92 e0       	ldi	r25, 0x02	; 2
     a50:	09 c0       	rjmp	.+18     	; 0xa64 <__stack+0x165>
			break;
		case 2:
			num_sensors=1;

			if(!p1_dc)
			{median = ep1;}
     a52:	98 01       	movw	r18, r16
			{
				median = ep2;
			}
			break;
		case 2:
			num_sensors=1;
     a54:	91 e0       	ldi	r25, 0x01	; 1
     a56:	06 c0       	rjmp	.+12     	; 0xa64 <__stack+0x165>

			if(!p1_dc)
			{median = ep1;}

			else if(!p2_dc)
			{median = ep2;}
     a58:	97 01       	movw	r18, r14
			{
				median = ep2;
			}
			break;
		case 2:
			num_sensors=1;
     a5a:	91 e0       	ldi	r25, 0x01	; 1
     a5c:	03 c0       	rjmp	.+6      	; 0xa64 <__stack+0x165>

			else 
			{median = ep3;}
			break;
		case 3:
			median = 0xFF;
     a5e:	2f ef       	ldi	r18, 0xFF	; 255
     a60:	30 e0       	ldi	r19, 0x00	; 0
			num_sensors = 0;
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a8 01       	movw	r20, r16
     a66:	0e 15       	cp	r16, r14
     a68:	1f 05       	cpc	r17, r15
     a6a:	08 f4       	brcc	.+2      	; 0xa6e <__stack+0x16f>
     a6c:	a7 01       	movw	r20, r14
     a6e:	e0 16       	cp	r14, r16
     a70:	f1 06       	cpc	r15, r17
     a72:	08 f4       	brcc	.+2      	; 0xa76 <__stack+0x177>
     a74:	87 01       	movw	r16, r14
     a76:	be 01       	movw	r22, r28
     a78:	0c 17       	cp	r16, r28
     a7a:	1d 07       	cpc	r17, r29
     a7c:	08 f4       	brcc	.+2      	; 0xa80 <__stack+0x181>
     a7e:	b8 01       	movw	r22, r16
	//NEED TO MODIFY FRAME SO VARIATION IS 5 BITS
	max = getMax(ep1,ep2,ep3);
	min =  getMin(ep1,ep2,ep3);
	p_variation = 100*(max-min)/min;
	
	Request_Response_SIB_Pressure.data[0] = 0;
     a80:	eb e0       	ldi	r30, 0x0B	; 11
     a82:	f1 e0       	ldi	r31, 0x01	; 1
     a84:	13 82       	std	Z+3, r1	; 0x03
	Request_Response_SIB_Pressure.data[1] = 0;
     a86:	14 82       	std	Z+4, r1	; 0x04
	Request_Response_SIB_Pressure.data[2] = 0;
     a88:	15 82       	std	Z+5, r1	; 0x05
	Request_Response_SIB_Pressure.data[3]  = (median<<2) | (num_sensors);
     a8a:	82 2f       	mov	r24, r18
     a8c:	88 0f       	add	r24, r24
     a8e:	88 0f       	add	r24, r24
     a90:	98 2b       	or	r25, r24
     a92:	96 83       	std	Z+6, r25	; 0x06
	Request_Response_SIB_Pressure.data[4]  = (median>>4) | (p_variation<<4);
     a94:	c4 17       	cp	r28, r20
     a96:	d5 07       	cpc	r29, r21
     a98:	08 f4       	brcc	.+2      	; 0xa9c <__stack+0x19d>
     a9a:	ea 01       	movw	r28, r20
     a9c:	c6 1b       	sub	r28, r22
     a9e:	d7 0b       	sbc	r29, r23
     aa0:	44 e6       	ldi	r20, 0x64	; 100
     aa2:	4c 9f       	mul	r20, r28
     aa4:	c0 01       	movw	r24, r0
     aa6:	4d 9f       	mul	r20, r29
     aa8:	90 0d       	add	r25, r0
     aaa:	11 24       	eor	r1, r1
     aac:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__udivmodhi4>
     ab0:	62 95       	swap	r22
     ab2:	60 7f       	andi	r22, 0xF0	; 240
     ab4:	32 95       	swap	r19
     ab6:	22 95       	swap	r18
     ab8:	2f 70       	andi	r18, 0x0F	; 15
     aba:	23 27       	eor	r18, r19
     abc:	3f 70       	andi	r19, 0x0F	; 15
     abe:	23 27       	eor	r18, r19
     ac0:	26 2b       	or	r18, r22
     ac2:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <Request_Response_SIB_Pressure+0x7>

	sprintf(string_out, "RR_SIB_Press = %u\n\r", Request_Response_SIB_Pressure.data);
     ac6:	8e e0       	ldi	r24, 0x0E	; 14
     ac8:	91 e0       	ldi	r25, 0x01	; 1
     aca:	9f 93       	push	r25
     acc:	8f 93       	push	r24
     ace:	8e e0       	ldi	r24, 0x0E	; 14
     ad0:	93 e0       	ldi	r25, 0x03	; 3
     ad2:	9f 93       	push	r25
     ad4:	8f 93       	push	r24
     ad6:	8e e6       	ldi	r24, 0x6E	; 110
     ad8:	93 e0       	ldi	r25, 0x03	; 3
     ada:	9f 93       	push	r25
     adc:	8f 93       	push	r24
     ade:	0e 94 f4 06 	call	0xde8	; 0xde8 <sprintf>
	sendString(string_out);
     ae2:	8e e6       	ldi	r24, 0x6E	; 110
     ae4:	93 e0       	ldi	r25, 0x03	; 3
     ae6:	0e 94 a6 02 	call	0x54c	; 0x54c <sendString>

	//sprintf(string_out, "%u\n\r", Request_Response_SIB_Pressure.data[4] );
	//sendString(string_out);
}
     aea:	0f 90       	pop	r0
     aec:	0f 90       	pop	r0
     aee:	0f 90       	pop	r0
     af0:	0f 90       	pop	r0
     af2:	0f 90       	pop	r0
     af4:	0f 90       	pop	r0
     af6:	21 c0       	rjmp	.+66     	; 0xb3a <__stack+0x23b>
		diff3 = ep3_raw[history-1]-ep3;
	}

	if(diff1 > 50 || diff2 > 50 || diff3 > 50)
	{
		crit_error = DEPTH;
     af8:	82 e0       	ldi	r24, 0x02	; 2
     afa:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <crit_error>
     afe:	81 cf       	rjmp	.-254    	; 0xa02 <__stack+0x103>
     b00:	52 e0       	ldi	r21, 0x02	; 2
     b02:	50 93 66 03 	sts	0x0366, r21	; 0x800366 <crit_error>
			p3_dc = 1;
		}
	}
	errors = p1_dc+p2_dc+p3_dc;

	switch (errors)
     b06:	51 e0       	ldi	r21, 0x01	; 1
     b08:	83 33       	cpi	r24, 0x33	; 51
     b0a:	08 f4       	brcc	.+2      	; 0xb0e <__stack+0x20f>
     b0c:	50 e0       	ldi	r21, 0x00	; 0
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	43 33       	cpi	r20, 0x33	; 51
     b12:	08 f4       	brcc	.+2      	; 0xb16 <__stack+0x217>
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	85 0f       	add	r24, r21
     b18:	51 e0       	ldi	r21, 0x01	; 1
     b1a:	63 33       	cpi	r22, 0x33	; 51
     b1c:	08 f4       	brcc	.+2      	; 0xb20 <__stack+0x221>
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	85 0f       	add	r24, r21
     b22:	81 30       	cpi	r24, 0x01	; 1
     b24:	09 f4       	brne	.+2      	; 0xb28 <__stack+0x229>
     b26:	6d cf       	rjmp	.-294    	; 0xa02 <__stack+0x103>
     b28:	08 f4       	brcc	.+2      	; 0xb2c <__stack+0x22d>
     b2a:	5a cf       	rjmp	.-332    	; 0x9e0 <__stack+0xe1>
     b2c:	82 30       	cpi	r24, 0x02	; 2
     b2e:	09 f4       	brne	.+2      	; 0xb32 <__stack+0x233>
     b30:	76 cf       	rjmp	.-276    	; 0xa1e <__stack+0x11f>
     b32:	83 30       	cpi	r24, 0x03	; 3
     b34:	09 f4       	brne	.+2      	; 0xb38 <__stack+0x239>
     b36:	93 cf       	rjmp	.-218    	; 0xa5e <__stack+0x15f>
     b38:	95 cf       	rjmp	.-214    	; 0xa64 <__stack+0x165>
	sprintf(string_out, "RR_SIB_Press = %u\n\r", Request_Response_SIB_Pressure.data);
	sendString(string_out);

	//sprintf(string_out, "%u\n\r", Request_Response_SIB_Pressure.data[4] );
	//sendString(string_out);
}
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	1f 91       	pop	r17
     b40:	0f 91       	pop	r16
     b42:	ff 90       	pop	r15
     b44:	ef 90       	pop	r14
     b46:	08 95       	ret

00000b48 <get_ext_press>:
	SET_TWSTA;
	//SCL freq = 400k
}

void get_ext_press(void)
{
     b48:	df 92       	push	r13
     b4a:	ef 92       	push	r14
     b4c:	ff 92       	push	r15
     b4e:	0f 93       	push	r16
     b50:	1f 93       	push	r17
     b52:	cf 93       	push	r28
     b54:	df 93       	push	r29
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
     b5a:	e5 97       	sbiw	r28, 0x35	; 53
     b5c:	0f b6       	in	r0, 0x3f	; 63
     b5e:	f8 94       	cli
     b60:	de bf       	out	0x3e, r29	; 62
     b62:	0f be       	out	0x3f, r0	; 63
     b64:	cd bf       	out	0x3d, r28	; 61
	char extPressState[20];
	char sensorNum[13];
	uint8_t sensor;
	uint16_t data_out;

	if(adcDone)
     b66:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <adcDone>
     b6a:	88 23       	and	r24, r24
     b6c:	09 f4       	brne	.+2      	; 0xb70 <get_ext_press+0x28>
     b6e:	6c c0       	rjmp	.+216    	; 0xc48 <get_ext_press+0x100>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b70:	f8 94       	cli
	{
		ATOMIC_BLOCK(ATOMIC_FORCEON)
		{
			if(adCount == 1)
     b72:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <adCount>
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	49 f4       	brne	.+18     	; 0xb8c <get_ext_press+0x44>
			{
				sensor = 1;
				data_out = ep1_raw[ep_history];
     b7a:	e0 91 6b 03 	lds	r30, 0x036B	; 0x80036b <ep_history>
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	ee 0f       	add	r30, r30
     b82:	ff 1f       	adc	r31, r31
     b84:	ea 50       	subi	r30, 0x0A	; 10
     b86:	fc 4f       	sbci	r31, 0xFC	; 252
     b88:	e0 80       	ld	r14, Z
     b8a:	d1 80       	ldd	r13, Z+1	; 0x01
			}
			if(adCount == 3)
     b8c:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <adCount>
     b90:	83 30       	cpi	r24, 0x03	; 3
     b92:	69 f4       	brne	.+26     	; 0xbae <get_ext_press+0x66>
			{
				sensor = 2;
				data_out = ep2_raw[ep_history];
     b94:	e0 91 6b 03 	lds	r30, 0x036B	; 0x80036b <ep_history>
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	ee 0f       	add	r30, r30
     b9c:	ff 1f       	adc	r31, r31
     b9e:	ee 51       	subi	r30, 0x1E	; 30
     ba0:	fc 4f       	sbci	r31, 0xFC	; 252
     ba2:	e0 80       	ld	r14, Z
     ba4:	d1 80       	ldd	r13, Z+1	; 0x01
				sensor = 1;
				data_out = ep1_raw[ep_history];
			}
			if(adCount == 3)
			{
				sensor = 2;
     ba6:	68 94       	set
     ba8:	ff 24       	eor	r15, r15
     baa:	f1 f8       	bld	r15, 1
     bac:	02 c0       	rjmp	.+4      	; 0xbb2 <get_ext_press+0x6a>
     bae:	ff 24       	eor	r15, r15
     bb0:	f3 94       	inc	r15
				data_out = ep2_raw[ep_history];
			}
			if(adCount == 5)
     bb2:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <adCount>
     bb6:	85 30       	cpi	r24, 0x05	; 5
     bb8:	79 f4       	brne	.+30     	; 0xbd8 <get_ext_press+0x90>
			{
				sensor = 3;
				data_out = ep3_raw[ep_history];
     bba:	e0 91 6b 03 	lds	r30, 0x036B	; 0x80036b <ep_history>
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	ee 0f       	add	r30, r30
     bc2:	ff 1f       	adc	r31, r31
     bc4:	e5 56       	subi	r30, 0x65	; 101
     bc6:	fc 4f       	sbci	r31, 0xFC	; 252
     bc8:	e0 80       	ld	r14, Z
     bca:	d1 80       	ldd	r13, Z+1	; 0x01
				
				ext_press_CAN();
     bcc:	0e 94 2f 04 	call	0x85e	; 0x85e <ext_press_CAN>
				sensor = 2;
				data_out = ep2_raw[ep_history];
			}
			if(adCount == 5)
			{
				sensor = 3;
     bd0:	0f 2e       	mov	r0, r31
     bd2:	f3 e0       	ldi	r31, 0x03	; 3
     bd4:	ff 2e       	mov	r15, r31
     bd6:	f0 2d       	mov	r31, r0
				data_out = ep3_raw[ep_history];
				
				ext_press_CAN();
			}

			sprintf(extPressState, "Sample Count-%u", ep_history);
     bd8:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <ep_history>
     bdc:	1f 92       	push	r1
     bde:	8f 93       	push	r24
     be0:	82 e2       	ldi	r24, 0x22	; 34
     be2:	93 e0       	ldi	r25, 0x03	; 3
     be4:	9f 93       	push	r25
     be6:	8f 93       	push	r24
     be8:	8e 01       	movw	r16, r28
     bea:	0b 5e       	subi	r16, 0xEB	; 235
     bec:	1f 4f       	sbci	r17, 0xFF	; 255
     bee:	1f 93       	push	r17
     bf0:	0f 93       	push	r16
     bf2:	0e 94 f4 06 	call	0xde8	; 0xde8 <sprintf>
			sendString(extPressState);
     bf6:	c8 01       	movw	r24, r16
     bf8:	0e 94 a6 02 	call	0x54c	; 0x54c <sendString>
			sprintf(sensorNum, "- Sensor - %u", sensor);
     bfc:	1f 92       	push	r1
     bfe:	ff 92       	push	r15
     c00:	82 e3       	ldi	r24, 0x32	; 50
     c02:	93 e0       	ldi	r25, 0x03	; 3
     c04:	9f 93       	push	r25
     c06:	8f 93       	push	r24
     c08:	0c 5e       	subi	r16, 0xEC	; 236
     c0a:	1f 4f       	sbci	r17, 0xFF	; 255
     c0c:	1f 93       	push	r17
     c0e:	0f 93       	push	r16
     c10:	0e 94 f4 06 	call	0xde8	; 0xde8 <sprintf>
			sendString(sensorNum);
     c14:	c8 01       	movw	r24, r16
     c16:	0e 94 a6 02 	call	0x54c	; 0x54c <sendString>
			sprintf(extPress, ", Value = %u\n\r", data_out );
     c1a:	df 92       	push	r13
     c1c:	ef 92       	push	r14
     c1e:	80 e4       	ldi	r24, 0x40	; 64
     c20:	93 e0       	ldi	r25, 0x03	; 3
     c22:	9f 93       	push	r25
     c24:	8f 93       	push	r24
     c26:	08 52       	subi	r16, 0x28	; 40
     c28:	11 09       	sbc	r17, r1
     c2a:	1f 93       	push	r17
     c2c:	0f 93       	push	r16
     c2e:	0e 94 f4 06 	call	0xde8	; 0xde8 <sprintf>
			sendString(extPress);
     c32:	c8 01       	movw	r24, r16
     c34:	0e 94 a6 02 	call	0x54c	; 0x54c <sendString>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     c38:	78 94       	sei
			//_delay_ms(20);
		}

		adcDone = 0;
     c3a:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <adcDone>
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
	}
}
     c48:	e5 96       	adiw	r28, 0x35	; 53
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	de bf       	out	0x3e, r29	; 62
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	cd bf       	out	0x3d, r28	; 61
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	1f 91       	pop	r17
     c5a:	0f 91       	pop	r16
     c5c:	ff 90       	pop	r15
     c5e:	ef 90       	pop	r14
     c60:	df 90       	pop	r13
     c62:	08 95       	ret

00000c64 <main>:
}

//STATE is incremented when the TWEN is disabled
int main(void)
{
	sys_config();
     c64:	0e 94 79 00 	call	0xf2	; 0xf2 <sys_config>
	init_ADC_timer();
     c68:	0e 94 be 02 	call	0x57c	; 0x57c <init_ADC_timer>
	init_ADC();
     c6c:	0e 94 b5 02 	call	0x56a	; 0x56a <init_ADC>
	initUART();
     c70:	0e 94 92 02 	call	0x524	; 0x524 <initUART>
	INTERRUPT_init();
     c74:	0e 94 c5 00 	call	0x18a	; 0x18a <INTERRUPT_init>
	USART_Init(103);//103 sets baud rate at 9600
     c78:	87 e6       	ldi	r24, 0x67	; 103
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	0e 94 15 02 	call	0x42a	; 0x42a <USART_Init>
	SPI_masterInit();
     c80:	0e 94 cd 00 	call	0x19a	; 0x19a <SPI_masterInit>

	//DEBUG STRINGING
	sprintf(string_out, "UART INIT. %d\n\r", i2c_status);
     c84:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <i2c_status>
     c88:	1f 92       	push	r1
     c8a:	8f 93       	push	r24
     c8c:	8f e4       	ldi	r24, 0x4F	; 79
     c8e:	93 e0       	ldi	r25, 0x03	; 3
     c90:	9f 93       	push	r25
     c92:	8f 93       	push	r24
     c94:	8e e6       	ldi	r24, 0x6E	; 110
     c96:	93 e0       	ldi	r25, 0x03	; 3
     c98:	9f 93       	push	r25
     c9a:	8f 93       	push	r24
     c9c:	0e 94 f4 06 	call	0xde8	; 0xde8 <sprintf>
	sendString(string_out);
     ca0:	8e e6       	ldi	r24, 0x6E	; 110
     ca2:	93 e0       	ldi	r25, 0x03	; 3
     ca4:	0e 94 a6 02 	call	0x54c	; 0x54c <sendString>
     ca8:	0f 90       	pop	r0
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
			ATOMIC_BLOCK(ATOMIC_FORCEON){//disables interrupts
				//[FOR DEBUGGING]transmits received frame over uart.
				USART_CAN_TX(CANRX_buffer);
				
				//matches received ID. 
				switch (CANRX_buffer.id)
     cb4:	cf ea       	ldi	r28, 0xAF	; 175
     cb6:	d3 e0       	ldi	r29, 0x03	; 3
   while (1) 
    {
		//i2c_FSM();
		
		//Ext Press. ADC Triggered by timer 0 interrupt
		get_ext_press();	//loads data array if 2nd adc conversion on given channel is complete (Channels: 6,7,0)
     cb8:	0e 94 a4 05 	call	0xb48	; 0xb48 <get_ext_press>

		//if data received on CAN...
		if(rx_flag){
     cbc:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <rx_flag>
     cc0:	88 23       	and	r24, r24
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <main+0x62>
     cc4:	5f c0       	rjmp	.+190    	; 0xd84 <main+0x120>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     cc6:	f8 94       	cli
			ATOMIC_BLOCK(ATOMIC_FORCEON){//disables interrupts
				//[FOR DEBUGGING]transmits received frame over uart.
				USART_CAN_TX(CANRX_buffer);
     cc8:	e0 90 af 03 	lds	r14, 0x03AF	; 0x8003af <CANRX_buffer>
     ccc:	f0 90 b0 03 	lds	r15, 0x03B0	; 0x8003b0 <CANRX_buffer+0x1>
     cd0:	00 91 b1 03 	lds	r16, 0x03B1	; 0x8003b1 <CANRX_buffer+0x2>
     cd4:	10 91 b2 03 	lds	r17, 0x03B2	; 0x8003b2 <CANRX_buffer+0x3>
     cd8:	20 91 b3 03 	lds	r18, 0x03B3	; 0x8003b3 <CANRX_buffer+0x4>
     cdc:	30 91 b4 03 	lds	r19, 0x03B4	; 0x8003b4 <CANRX_buffer+0x5>
     ce0:	40 91 b5 03 	lds	r20, 0x03B5	; 0x8003b5 <CANRX_buffer+0x6>
     ce4:	50 91 b6 03 	lds	r21, 0x03B6	; 0x8003b6 <CANRX_buffer+0x7>
     ce8:	60 91 b7 03 	lds	r22, 0x03B7	; 0x8003b7 <CANRX_buffer+0x8>
     cec:	70 91 b8 03 	lds	r23, 0x03B8	; 0x8003b8 <CANRX_buffer+0x9>
     cf0:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <CANRX_buffer+0xa>
     cf4:	0e 94 34 02 	call	0x468	; 0x468 <USART_CAN_TX>
				
				//matches received ID. 
				switch (CANRX_buffer.id)
     cf8:	88 81       	ld	r24, Y
     cfa:	99 81       	ldd	r25, Y+1	; 0x01
     cfc:	8b 3f       	cpi	r24, 0xFB	; 251
     cfe:	21 e0       	ldi	r18, 0x01	; 1
     d00:	92 07       	cpc	r25, r18
     d02:	21 f0       	breq	.+8      	; 0xd0c <main+0xa8>
     d04:	83 30       	cpi	r24, 0x03	; 3
     d06:	92 40       	sbci	r25, 0x02	; 2
     d08:	f1 f0       	breq	.+60     	; 0xd46 <main+0xe2>
     d0a:	39 c0       	rjmp	.+114    	; 0xd7e <main+0x11a>
				{
					case RR_Press_ID: 

							USART_CAN_TX(Request_Response_SIB_Pressure);
     d0c:	e0 90 0b 01 	lds	r14, 0x010B	; 0x80010b <Request_Response_SIB_Pressure>
     d10:	f0 90 0c 01 	lds	r15, 0x010C	; 0x80010c <Request_Response_SIB_Pressure+0x1>
     d14:	00 91 0d 01 	lds	r16, 0x010D	; 0x80010d <Request_Response_SIB_Pressure+0x2>
     d18:	10 91 0e 01 	lds	r17, 0x010E	; 0x80010e <Request_Response_SIB_Pressure+0x3>
     d1c:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <Request_Response_SIB_Pressure+0x4>
     d20:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <Request_Response_SIB_Pressure+0x5>
     d24:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <Request_Response_SIB_Pressure+0x6>
     d28:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <Request_Response_SIB_Pressure+0x7>
     d2c:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <Request_Response_SIB_Pressure+0x8>
     d30:	70 91 14 01 	lds	r23, 0x0114	; 0x800114 <Request_Response_SIB_Pressure+0x9>
     d34:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <Request_Response_SIB_Pressure+0xa>
     d38:	0e 94 34 02 	call	0x468	; 0x468 <USART_CAN_TX>
							//send over uart
							mcp2515_send_message(&Request_Response_SIB_Pressure);
     d3c:	8b e0       	ldi	r24, 0x0B	; 11
     d3e:	91 e0       	ldi	r25, 0x01	; 1
     d40:	0e 94 86 01 	call	0x30c	; 0x30c <mcp2515_send_message>
							//send over can
							break;
     d44:	1c c0       	rjmp	.+56     	; 0xd7e <main+0x11a>

					case RR_Temp_ID:

							USART_CAN_TX(Request_Response_SIB_Temp);
     d46:	e0 90 00 01 	lds	r14, 0x0100	; 0x800100 <Request_Response_SIB_Temp>
     d4a:	f0 90 01 01 	lds	r15, 0x0101	; 0x800101 <Request_Response_SIB_Temp+0x1>
     d4e:	00 91 02 01 	lds	r16, 0x0102	; 0x800102 <Request_Response_SIB_Temp+0x2>
     d52:	10 91 03 01 	lds	r17, 0x0103	; 0x800103 <Request_Response_SIB_Temp+0x3>
     d56:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <Request_Response_SIB_Temp+0x4>
     d5a:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <Request_Response_SIB_Temp+0x5>
     d5e:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <Request_Response_SIB_Temp+0x6>
     d62:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <Request_Response_SIB_Temp+0x7>
     d66:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <Request_Response_SIB_Temp+0x8>
     d6a:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <Request_Response_SIB_Temp+0x9>
     d6e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Request_Response_SIB_Temp+0xa>
     d72:	0e 94 34 02 	call	0x468	; 0x468 <USART_CAN_TX>
							//send over uart
							mcp2515_send_message(&Request_Response_SIB_Temp);
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	91 e0       	ldi	r25, 0x01	; 1
     d7a:	0e 94 86 01 	call	0x30c	; 0x30c <mcp2515_send_message>
							//send over can
							break;
					default: break;
				}
				rx_flag = 0;//clear receive flag
     d7e:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <rx_flag>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     d82:	78 94       	sei
			}//end ATOMIC_BLOCK
		}

		if(crit_error)
     d84:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <crit_error>
     d88:	88 23       	and	r24, r24
     d8a:	09 f4       	brne	.+2      	; 0xd8e <main+0x12a>
     d8c:	95 cf       	rjmp	.-214    	; 0xcb8 <main+0x54>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d8e:	f8 94       	cli
		{
			ATOMIC_BLOCK(ATOMIC_FORCEON)
			{
				switch(crit_error)
     d90:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <crit_error>
     d94:	82 30       	cpi	r24, 0x02	; 2
     d96:	49 f0       	breq	.+18     	; 0xdaa <main+0x146>
     d98:	83 30       	cpi	r24, 0x03	; 3
     d9a:	61 f0       	breq	.+24     	; 0xdb4 <main+0x150>
     d9c:	81 30       	cpi	r24, 0x01	; 1
     d9e:	71 f4       	brne	.+28     	; 0xdbc <main+0x158>
				{
					case LEAK: 
						mcp2515_send_message(&CI_Leak);
     da0:	8c e2       	ldi	r24, 0x2C	; 44
     da2:	91 e0       	ldi	r25, 0x01	; 1
     da4:	0e 94 86 01 	call	0x30c	; 0x30c <mcp2515_send_message>
						break;
     da8:	09 c0       	rjmp	.+18     	; 0xdbc <main+0x158>
					case DEPTH:
						mcp2515_send_message(&CI_Depth);
     daa:	81 e2       	ldi	r24, 0x21	; 33
     dac:	91 e0       	ldi	r25, 0x01	; 1
     dae:	0e 94 86 01 	call	0x30c	; 0x30c <mcp2515_send_message>
						break;
     db2:	04 c0       	rjmp	.+8      	; 0xdbc <main+0x158>
					case GENERAL:
						mcp2515_send_message(&CI_SIB_General);
     db4:	86 e1       	ldi	r24, 0x16	; 22
     db6:	91 e0       	ldi	r25, 0x01	; 1
     db8:	0e 94 86 01 	call	0x30c	; 0x30c <mcp2515_send_message>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     dbc:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
     dbe:	7c cf       	rjmp	.-264    	; 0xcb8 <main+0x54>

00000dc0 <__udivmodhi4>:
     dc0:	aa 1b       	sub	r26, r26
     dc2:	bb 1b       	sub	r27, r27
     dc4:	51 e1       	ldi	r21, 0x11	; 17
     dc6:	07 c0       	rjmp	.+14     	; 0xdd6 <__udivmodhi4_ep>

00000dc8 <__udivmodhi4_loop>:
     dc8:	aa 1f       	adc	r26, r26
     dca:	bb 1f       	adc	r27, r27
     dcc:	a6 17       	cp	r26, r22
     dce:	b7 07       	cpc	r27, r23
     dd0:	10 f0       	brcs	.+4      	; 0xdd6 <__udivmodhi4_ep>
     dd2:	a6 1b       	sub	r26, r22
     dd4:	b7 0b       	sbc	r27, r23

00000dd6 <__udivmodhi4_ep>:
     dd6:	88 1f       	adc	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	5a 95       	dec	r21
     ddc:	a9 f7       	brne	.-22     	; 0xdc8 <__udivmodhi4_loop>
     dde:	80 95       	com	r24
     de0:	90 95       	com	r25
     de2:	bc 01       	movw	r22, r24
     de4:	cd 01       	movw	r24, r26
     de6:	08 95       	ret

00000de8 <sprintf>:
     de8:	ae e0       	ldi	r26, 0x0E	; 14
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	ea ef       	ldi	r30, 0xFA	; 250
     dee:	f6 e0       	ldi	r31, 0x06	; 6
     df0:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__prologue_saves__+0x1c>
     df4:	0d 89       	ldd	r16, Y+21	; 0x15
     df6:	1e 89       	ldd	r17, Y+22	; 0x16
     df8:	86 e0       	ldi	r24, 0x06	; 6
     dfa:	8c 83       	std	Y+4, r24	; 0x04
     dfc:	1a 83       	std	Y+2, r17	; 0x02
     dfe:	09 83       	std	Y+1, r16	; 0x01
     e00:	8f ef       	ldi	r24, 0xFF	; 255
     e02:	9f e7       	ldi	r25, 0x7F	; 127
     e04:	9e 83       	std	Y+6, r25	; 0x06
     e06:	8d 83       	std	Y+5, r24	; 0x05
     e08:	ae 01       	movw	r20, r28
     e0a:	47 5e       	subi	r20, 0xE7	; 231
     e0c:	5f 4f       	sbci	r21, 0xFF	; 255
     e0e:	6f 89       	ldd	r22, Y+23	; 0x17
     e10:	78 8d       	ldd	r23, Y+24	; 0x18
     e12:	ce 01       	movw	r24, r28
     e14:	01 96       	adiw	r24, 0x01	; 1
     e16:	0e 94 16 07 	call	0xe2c	; 0xe2c <vfprintf>
     e1a:	ef 81       	ldd	r30, Y+7	; 0x07
     e1c:	f8 85       	ldd	r31, Y+8	; 0x08
     e1e:	e0 0f       	add	r30, r16
     e20:	f1 1f       	adc	r31, r17
     e22:	10 82       	st	Z, r1
     e24:	2e 96       	adiw	r28, 0x0e	; 14
     e26:	e4 e0       	ldi	r30, 0x04	; 4
     e28:	0c 94 d1 09 	jmp	0x13a2	; 0x13a2 <__epilogue_restores__+0x1c>

00000e2c <vfprintf>:
     e2c:	ab e0       	ldi	r26, 0x0B	; 11
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	ec e1       	ldi	r30, 0x1C	; 28
     e32:	f7 e0       	ldi	r31, 0x07	; 7
     e34:	0c 94 a7 09 	jmp	0x134e	; 0x134e <__prologue_saves__>
     e38:	6c 01       	movw	r12, r24
     e3a:	7b 01       	movw	r14, r22
     e3c:	8a 01       	movw	r16, r20
     e3e:	fc 01       	movw	r30, r24
     e40:	17 82       	std	Z+7, r1	; 0x07
     e42:	16 82       	std	Z+6, r1	; 0x06
     e44:	83 81       	ldd	r24, Z+3	; 0x03
     e46:	81 ff       	sbrs	r24, 1
     e48:	cc c1       	rjmp	.+920    	; 0x11e2 <vfprintf+0x3b6>
     e4a:	ce 01       	movw	r24, r28
     e4c:	01 96       	adiw	r24, 0x01	; 1
     e4e:	3c 01       	movw	r6, r24
     e50:	f6 01       	movw	r30, r12
     e52:	93 81       	ldd	r25, Z+3	; 0x03
     e54:	f7 01       	movw	r30, r14
     e56:	93 fd       	sbrc	r25, 3
     e58:	85 91       	lpm	r24, Z+
     e5a:	93 ff       	sbrs	r25, 3
     e5c:	81 91       	ld	r24, Z+
     e5e:	7f 01       	movw	r14, r30
     e60:	88 23       	and	r24, r24
     e62:	09 f4       	brne	.+2      	; 0xe66 <vfprintf+0x3a>
     e64:	ba c1       	rjmp	.+884    	; 0x11da <vfprintf+0x3ae>
     e66:	85 32       	cpi	r24, 0x25	; 37
     e68:	39 f4       	brne	.+14     	; 0xe78 <vfprintf+0x4c>
     e6a:	93 fd       	sbrc	r25, 3
     e6c:	85 91       	lpm	r24, Z+
     e6e:	93 ff       	sbrs	r25, 3
     e70:	81 91       	ld	r24, Z+
     e72:	7f 01       	movw	r14, r30
     e74:	85 32       	cpi	r24, 0x25	; 37
     e76:	29 f4       	brne	.+10     	; 0xe82 <vfprintf+0x56>
     e78:	b6 01       	movw	r22, r12
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	0e 94 0d 09 	call	0x121a	; 0x121a <fputc>
     e80:	e7 cf       	rjmp	.-50     	; 0xe50 <vfprintf+0x24>
     e82:	91 2c       	mov	r9, r1
     e84:	21 2c       	mov	r2, r1
     e86:	31 2c       	mov	r3, r1
     e88:	ff e1       	ldi	r31, 0x1F	; 31
     e8a:	f3 15       	cp	r31, r3
     e8c:	d8 f0       	brcs	.+54     	; 0xec4 <vfprintf+0x98>
     e8e:	8b 32       	cpi	r24, 0x2B	; 43
     e90:	79 f0       	breq	.+30     	; 0xeb0 <vfprintf+0x84>
     e92:	38 f4       	brcc	.+14     	; 0xea2 <vfprintf+0x76>
     e94:	80 32       	cpi	r24, 0x20	; 32
     e96:	79 f0       	breq	.+30     	; 0xeb6 <vfprintf+0x8a>
     e98:	83 32       	cpi	r24, 0x23	; 35
     e9a:	a1 f4       	brne	.+40     	; 0xec4 <vfprintf+0x98>
     e9c:	23 2d       	mov	r18, r3
     e9e:	20 61       	ori	r18, 0x10	; 16
     ea0:	1d c0       	rjmp	.+58     	; 0xedc <vfprintf+0xb0>
     ea2:	8d 32       	cpi	r24, 0x2D	; 45
     ea4:	61 f0       	breq	.+24     	; 0xebe <vfprintf+0x92>
     ea6:	80 33       	cpi	r24, 0x30	; 48
     ea8:	69 f4       	brne	.+26     	; 0xec4 <vfprintf+0x98>
     eaa:	23 2d       	mov	r18, r3
     eac:	21 60       	ori	r18, 0x01	; 1
     eae:	16 c0       	rjmp	.+44     	; 0xedc <vfprintf+0xb0>
     eb0:	83 2d       	mov	r24, r3
     eb2:	82 60       	ori	r24, 0x02	; 2
     eb4:	38 2e       	mov	r3, r24
     eb6:	e3 2d       	mov	r30, r3
     eb8:	e4 60       	ori	r30, 0x04	; 4
     eba:	3e 2e       	mov	r3, r30
     ebc:	2a c0       	rjmp	.+84     	; 0xf12 <vfprintf+0xe6>
     ebe:	f3 2d       	mov	r31, r3
     ec0:	f8 60       	ori	r31, 0x08	; 8
     ec2:	1d c0       	rjmp	.+58     	; 0xefe <vfprintf+0xd2>
     ec4:	37 fc       	sbrc	r3, 7
     ec6:	2d c0       	rjmp	.+90     	; 0xf22 <vfprintf+0xf6>
     ec8:	20 ed       	ldi	r18, 0xD0	; 208
     eca:	28 0f       	add	r18, r24
     ecc:	2a 30       	cpi	r18, 0x0A	; 10
     ece:	40 f0       	brcs	.+16     	; 0xee0 <vfprintf+0xb4>
     ed0:	8e 32       	cpi	r24, 0x2E	; 46
     ed2:	b9 f4       	brne	.+46     	; 0xf02 <vfprintf+0xd6>
     ed4:	36 fc       	sbrc	r3, 6
     ed6:	81 c1       	rjmp	.+770    	; 0x11da <vfprintf+0x3ae>
     ed8:	23 2d       	mov	r18, r3
     eda:	20 64       	ori	r18, 0x40	; 64
     edc:	32 2e       	mov	r3, r18
     ede:	19 c0       	rjmp	.+50     	; 0xf12 <vfprintf+0xe6>
     ee0:	36 fe       	sbrs	r3, 6
     ee2:	06 c0       	rjmp	.+12     	; 0xef0 <vfprintf+0xc4>
     ee4:	8a e0       	ldi	r24, 0x0A	; 10
     ee6:	98 9e       	mul	r9, r24
     ee8:	20 0d       	add	r18, r0
     eea:	11 24       	eor	r1, r1
     eec:	92 2e       	mov	r9, r18
     eee:	11 c0       	rjmp	.+34     	; 0xf12 <vfprintf+0xe6>
     ef0:	ea e0       	ldi	r30, 0x0A	; 10
     ef2:	2e 9e       	mul	r2, r30
     ef4:	20 0d       	add	r18, r0
     ef6:	11 24       	eor	r1, r1
     ef8:	22 2e       	mov	r2, r18
     efa:	f3 2d       	mov	r31, r3
     efc:	f0 62       	ori	r31, 0x20	; 32
     efe:	3f 2e       	mov	r3, r31
     f00:	08 c0       	rjmp	.+16     	; 0xf12 <vfprintf+0xe6>
     f02:	8c 36       	cpi	r24, 0x6C	; 108
     f04:	21 f4       	brne	.+8      	; 0xf0e <vfprintf+0xe2>
     f06:	83 2d       	mov	r24, r3
     f08:	80 68       	ori	r24, 0x80	; 128
     f0a:	38 2e       	mov	r3, r24
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <vfprintf+0xe6>
     f0e:	88 36       	cpi	r24, 0x68	; 104
     f10:	41 f4       	brne	.+16     	; 0xf22 <vfprintf+0xf6>
     f12:	f7 01       	movw	r30, r14
     f14:	93 fd       	sbrc	r25, 3
     f16:	85 91       	lpm	r24, Z+
     f18:	93 ff       	sbrs	r25, 3
     f1a:	81 91       	ld	r24, Z+
     f1c:	7f 01       	movw	r14, r30
     f1e:	81 11       	cpse	r24, r1
     f20:	b3 cf       	rjmp	.-154    	; 0xe88 <vfprintf+0x5c>
     f22:	98 2f       	mov	r25, r24
     f24:	9f 7d       	andi	r25, 0xDF	; 223
     f26:	95 54       	subi	r25, 0x45	; 69
     f28:	93 30       	cpi	r25, 0x03	; 3
     f2a:	28 f4       	brcc	.+10     	; 0xf36 <vfprintf+0x10a>
     f2c:	0c 5f       	subi	r16, 0xFC	; 252
     f2e:	1f 4f       	sbci	r17, 0xFF	; 255
     f30:	9f e3       	ldi	r25, 0x3F	; 63
     f32:	99 83       	std	Y+1, r25	; 0x01
     f34:	0d c0       	rjmp	.+26     	; 0xf50 <vfprintf+0x124>
     f36:	83 36       	cpi	r24, 0x63	; 99
     f38:	31 f0       	breq	.+12     	; 0xf46 <vfprintf+0x11a>
     f3a:	83 37       	cpi	r24, 0x73	; 115
     f3c:	71 f0       	breq	.+28     	; 0xf5a <vfprintf+0x12e>
     f3e:	83 35       	cpi	r24, 0x53	; 83
     f40:	09 f0       	breq	.+2      	; 0xf44 <vfprintf+0x118>
     f42:	59 c0       	rjmp	.+178    	; 0xff6 <vfprintf+0x1ca>
     f44:	21 c0       	rjmp	.+66     	; 0xf88 <vfprintf+0x15c>
     f46:	f8 01       	movw	r30, r16
     f48:	80 81       	ld	r24, Z
     f4a:	89 83       	std	Y+1, r24	; 0x01
     f4c:	0e 5f       	subi	r16, 0xFE	; 254
     f4e:	1f 4f       	sbci	r17, 0xFF	; 255
     f50:	88 24       	eor	r8, r8
     f52:	83 94       	inc	r8
     f54:	91 2c       	mov	r9, r1
     f56:	53 01       	movw	r10, r6
     f58:	13 c0       	rjmp	.+38     	; 0xf80 <vfprintf+0x154>
     f5a:	28 01       	movw	r4, r16
     f5c:	f2 e0       	ldi	r31, 0x02	; 2
     f5e:	4f 0e       	add	r4, r31
     f60:	51 1c       	adc	r5, r1
     f62:	f8 01       	movw	r30, r16
     f64:	a0 80       	ld	r10, Z
     f66:	b1 80       	ldd	r11, Z+1	; 0x01
     f68:	36 fe       	sbrs	r3, 6
     f6a:	03 c0       	rjmp	.+6      	; 0xf72 <vfprintf+0x146>
     f6c:	69 2d       	mov	r22, r9
     f6e:	70 e0       	ldi	r23, 0x00	; 0
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <vfprintf+0x14a>
     f72:	6f ef       	ldi	r22, 0xFF	; 255
     f74:	7f ef       	ldi	r23, 0xFF	; 255
     f76:	c5 01       	movw	r24, r10
     f78:	0e 94 02 09 	call	0x1204	; 0x1204 <strnlen>
     f7c:	4c 01       	movw	r8, r24
     f7e:	82 01       	movw	r16, r4
     f80:	f3 2d       	mov	r31, r3
     f82:	ff 77       	andi	r31, 0x7F	; 127
     f84:	3f 2e       	mov	r3, r31
     f86:	16 c0       	rjmp	.+44     	; 0xfb4 <vfprintf+0x188>
     f88:	28 01       	movw	r4, r16
     f8a:	22 e0       	ldi	r18, 0x02	; 2
     f8c:	42 0e       	add	r4, r18
     f8e:	51 1c       	adc	r5, r1
     f90:	f8 01       	movw	r30, r16
     f92:	a0 80       	ld	r10, Z
     f94:	b1 80       	ldd	r11, Z+1	; 0x01
     f96:	36 fe       	sbrs	r3, 6
     f98:	03 c0       	rjmp	.+6      	; 0xfa0 <vfprintf+0x174>
     f9a:	69 2d       	mov	r22, r9
     f9c:	70 e0       	ldi	r23, 0x00	; 0
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <vfprintf+0x178>
     fa0:	6f ef       	ldi	r22, 0xFF	; 255
     fa2:	7f ef       	ldi	r23, 0xFF	; 255
     fa4:	c5 01       	movw	r24, r10
     fa6:	0e 94 f7 08 	call	0x11ee	; 0x11ee <strnlen_P>
     faa:	4c 01       	movw	r8, r24
     fac:	f3 2d       	mov	r31, r3
     fae:	f0 68       	ori	r31, 0x80	; 128
     fb0:	3f 2e       	mov	r3, r31
     fb2:	82 01       	movw	r16, r4
     fb4:	33 fc       	sbrc	r3, 3
     fb6:	1b c0       	rjmp	.+54     	; 0xfee <vfprintf+0x1c2>
     fb8:	82 2d       	mov	r24, r2
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	88 16       	cp	r8, r24
     fbe:	99 06       	cpc	r9, r25
     fc0:	b0 f4       	brcc	.+44     	; 0xfee <vfprintf+0x1c2>
     fc2:	b6 01       	movw	r22, r12
     fc4:	80 e2       	ldi	r24, 0x20	; 32
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	0e 94 0d 09 	call	0x121a	; 0x121a <fputc>
     fcc:	2a 94       	dec	r2
     fce:	f4 cf       	rjmp	.-24     	; 0xfb8 <vfprintf+0x18c>
     fd0:	f5 01       	movw	r30, r10
     fd2:	37 fc       	sbrc	r3, 7
     fd4:	85 91       	lpm	r24, Z+
     fd6:	37 fe       	sbrs	r3, 7
     fd8:	81 91       	ld	r24, Z+
     fda:	5f 01       	movw	r10, r30
     fdc:	b6 01       	movw	r22, r12
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0e 94 0d 09 	call	0x121a	; 0x121a <fputc>
     fe4:	21 10       	cpse	r2, r1
     fe6:	2a 94       	dec	r2
     fe8:	21 e0       	ldi	r18, 0x01	; 1
     fea:	82 1a       	sub	r8, r18
     fec:	91 08       	sbc	r9, r1
     fee:	81 14       	cp	r8, r1
     ff0:	91 04       	cpc	r9, r1
     ff2:	71 f7       	brne	.-36     	; 0xfd0 <vfprintf+0x1a4>
     ff4:	e8 c0       	rjmp	.+464    	; 0x11c6 <vfprintf+0x39a>
     ff6:	84 36       	cpi	r24, 0x64	; 100
     ff8:	11 f0       	breq	.+4      	; 0xffe <vfprintf+0x1d2>
     ffa:	89 36       	cpi	r24, 0x69	; 105
     ffc:	41 f5       	brne	.+80     	; 0x104e <vfprintf+0x222>
     ffe:	f8 01       	movw	r30, r16
    1000:	37 fe       	sbrs	r3, 7
    1002:	07 c0       	rjmp	.+14     	; 0x1012 <vfprintf+0x1e6>
    1004:	60 81       	ld	r22, Z
    1006:	71 81       	ldd	r23, Z+1	; 0x01
    1008:	82 81       	ldd	r24, Z+2	; 0x02
    100a:	93 81       	ldd	r25, Z+3	; 0x03
    100c:	0c 5f       	subi	r16, 0xFC	; 252
    100e:	1f 4f       	sbci	r17, 0xFF	; 255
    1010:	08 c0       	rjmp	.+16     	; 0x1022 <vfprintf+0x1f6>
    1012:	60 81       	ld	r22, Z
    1014:	71 81       	ldd	r23, Z+1	; 0x01
    1016:	07 2e       	mov	r0, r23
    1018:	00 0c       	add	r0, r0
    101a:	88 0b       	sbc	r24, r24
    101c:	99 0b       	sbc	r25, r25
    101e:	0e 5f       	subi	r16, 0xFE	; 254
    1020:	1f 4f       	sbci	r17, 0xFF	; 255
    1022:	f3 2d       	mov	r31, r3
    1024:	ff 76       	andi	r31, 0x6F	; 111
    1026:	3f 2e       	mov	r3, r31
    1028:	97 ff       	sbrs	r25, 7
    102a:	09 c0       	rjmp	.+18     	; 0x103e <vfprintf+0x212>
    102c:	90 95       	com	r25
    102e:	80 95       	com	r24
    1030:	70 95       	com	r23
    1032:	61 95       	neg	r22
    1034:	7f 4f       	sbci	r23, 0xFF	; 255
    1036:	8f 4f       	sbci	r24, 0xFF	; 255
    1038:	9f 4f       	sbci	r25, 0xFF	; 255
    103a:	f0 68       	ori	r31, 0x80	; 128
    103c:	3f 2e       	mov	r3, r31
    103e:	2a e0       	ldi	r18, 0x0A	; 10
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	a3 01       	movw	r20, r6
    1044:	0e 94 49 09 	call	0x1292	; 0x1292 <__ultoa_invert>
    1048:	88 2e       	mov	r8, r24
    104a:	86 18       	sub	r8, r6
    104c:	45 c0       	rjmp	.+138    	; 0x10d8 <vfprintf+0x2ac>
    104e:	85 37       	cpi	r24, 0x75	; 117
    1050:	31 f4       	brne	.+12     	; 0x105e <vfprintf+0x232>
    1052:	23 2d       	mov	r18, r3
    1054:	2f 7e       	andi	r18, 0xEF	; 239
    1056:	b2 2e       	mov	r11, r18
    1058:	2a e0       	ldi	r18, 0x0A	; 10
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	25 c0       	rjmp	.+74     	; 0x10a8 <vfprintf+0x27c>
    105e:	93 2d       	mov	r25, r3
    1060:	99 7f       	andi	r25, 0xF9	; 249
    1062:	b9 2e       	mov	r11, r25
    1064:	8f 36       	cpi	r24, 0x6F	; 111
    1066:	c1 f0       	breq	.+48     	; 0x1098 <vfprintf+0x26c>
    1068:	18 f4       	brcc	.+6      	; 0x1070 <vfprintf+0x244>
    106a:	88 35       	cpi	r24, 0x58	; 88
    106c:	79 f0       	breq	.+30     	; 0x108c <vfprintf+0x260>
    106e:	b5 c0       	rjmp	.+362    	; 0x11da <vfprintf+0x3ae>
    1070:	80 37       	cpi	r24, 0x70	; 112
    1072:	19 f0       	breq	.+6      	; 0x107a <vfprintf+0x24e>
    1074:	88 37       	cpi	r24, 0x78	; 120
    1076:	21 f0       	breq	.+8      	; 0x1080 <vfprintf+0x254>
    1078:	b0 c0       	rjmp	.+352    	; 0x11da <vfprintf+0x3ae>
    107a:	e9 2f       	mov	r30, r25
    107c:	e0 61       	ori	r30, 0x10	; 16
    107e:	be 2e       	mov	r11, r30
    1080:	b4 fe       	sbrs	r11, 4
    1082:	0d c0       	rjmp	.+26     	; 0x109e <vfprintf+0x272>
    1084:	fb 2d       	mov	r31, r11
    1086:	f4 60       	ori	r31, 0x04	; 4
    1088:	bf 2e       	mov	r11, r31
    108a:	09 c0       	rjmp	.+18     	; 0x109e <vfprintf+0x272>
    108c:	34 fe       	sbrs	r3, 4
    108e:	0a c0       	rjmp	.+20     	; 0x10a4 <vfprintf+0x278>
    1090:	29 2f       	mov	r18, r25
    1092:	26 60       	ori	r18, 0x06	; 6
    1094:	b2 2e       	mov	r11, r18
    1096:	06 c0       	rjmp	.+12     	; 0x10a4 <vfprintf+0x278>
    1098:	28 e0       	ldi	r18, 0x08	; 8
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	05 c0       	rjmp	.+10     	; 0x10a8 <vfprintf+0x27c>
    109e:	20 e1       	ldi	r18, 0x10	; 16
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <vfprintf+0x27c>
    10a4:	20 e1       	ldi	r18, 0x10	; 16
    10a6:	32 e0       	ldi	r19, 0x02	; 2
    10a8:	f8 01       	movw	r30, r16
    10aa:	b7 fe       	sbrs	r11, 7
    10ac:	07 c0       	rjmp	.+14     	; 0x10bc <vfprintf+0x290>
    10ae:	60 81       	ld	r22, Z
    10b0:	71 81       	ldd	r23, Z+1	; 0x01
    10b2:	82 81       	ldd	r24, Z+2	; 0x02
    10b4:	93 81       	ldd	r25, Z+3	; 0x03
    10b6:	0c 5f       	subi	r16, 0xFC	; 252
    10b8:	1f 4f       	sbci	r17, 0xFF	; 255
    10ba:	06 c0       	rjmp	.+12     	; 0x10c8 <vfprintf+0x29c>
    10bc:	60 81       	ld	r22, Z
    10be:	71 81       	ldd	r23, Z+1	; 0x01
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	0e 5f       	subi	r16, 0xFE	; 254
    10c6:	1f 4f       	sbci	r17, 0xFF	; 255
    10c8:	a3 01       	movw	r20, r6
    10ca:	0e 94 49 09 	call	0x1292	; 0x1292 <__ultoa_invert>
    10ce:	88 2e       	mov	r8, r24
    10d0:	86 18       	sub	r8, r6
    10d2:	fb 2d       	mov	r31, r11
    10d4:	ff 77       	andi	r31, 0x7F	; 127
    10d6:	3f 2e       	mov	r3, r31
    10d8:	36 fe       	sbrs	r3, 6
    10da:	0d c0       	rjmp	.+26     	; 0x10f6 <vfprintf+0x2ca>
    10dc:	23 2d       	mov	r18, r3
    10de:	2e 7f       	andi	r18, 0xFE	; 254
    10e0:	a2 2e       	mov	r10, r18
    10e2:	89 14       	cp	r8, r9
    10e4:	58 f4       	brcc	.+22     	; 0x10fc <vfprintf+0x2d0>
    10e6:	34 fe       	sbrs	r3, 4
    10e8:	0b c0       	rjmp	.+22     	; 0x1100 <vfprintf+0x2d4>
    10ea:	32 fc       	sbrc	r3, 2
    10ec:	09 c0       	rjmp	.+18     	; 0x1100 <vfprintf+0x2d4>
    10ee:	83 2d       	mov	r24, r3
    10f0:	8e 7e       	andi	r24, 0xEE	; 238
    10f2:	a8 2e       	mov	r10, r24
    10f4:	05 c0       	rjmp	.+10     	; 0x1100 <vfprintf+0x2d4>
    10f6:	b8 2c       	mov	r11, r8
    10f8:	a3 2c       	mov	r10, r3
    10fa:	03 c0       	rjmp	.+6      	; 0x1102 <vfprintf+0x2d6>
    10fc:	b8 2c       	mov	r11, r8
    10fe:	01 c0       	rjmp	.+2      	; 0x1102 <vfprintf+0x2d6>
    1100:	b9 2c       	mov	r11, r9
    1102:	a4 fe       	sbrs	r10, 4
    1104:	0f c0       	rjmp	.+30     	; 0x1124 <vfprintf+0x2f8>
    1106:	fe 01       	movw	r30, r28
    1108:	e8 0d       	add	r30, r8
    110a:	f1 1d       	adc	r31, r1
    110c:	80 81       	ld	r24, Z
    110e:	80 33       	cpi	r24, 0x30	; 48
    1110:	21 f4       	brne	.+8      	; 0x111a <vfprintf+0x2ee>
    1112:	9a 2d       	mov	r25, r10
    1114:	99 7e       	andi	r25, 0xE9	; 233
    1116:	a9 2e       	mov	r10, r25
    1118:	09 c0       	rjmp	.+18     	; 0x112c <vfprintf+0x300>
    111a:	a2 fe       	sbrs	r10, 2
    111c:	06 c0       	rjmp	.+12     	; 0x112a <vfprintf+0x2fe>
    111e:	b3 94       	inc	r11
    1120:	b3 94       	inc	r11
    1122:	04 c0       	rjmp	.+8      	; 0x112c <vfprintf+0x300>
    1124:	8a 2d       	mov	r24, r10
    1126:	86 78       	andi	r24, 0x86	; 134
    1128:	09 f0       	breq	.+2      	; 0x112c <vfprintf+0x300>
    112a:	b3 94       	inc	r11
    112c:	a3 fc       	sbrc	r10, 3
    112e:	11 c0       	rjmp	.+34     	; 0x1152 <vfprintf+0x326>
    1130:	a0 fe       	sbrs	r10, 0
    1132:	06 c0       	rjmp	.+12     	; 0x1140 <vfprintf+0x314>
    1134:	b2 14       	cp	r11, r2
    1136:	88 f4       	brcc	.+34     	; 0x115a <vfprintf+0x32e>
    1138:	28 0c       	add	r2, r8
    113a:	92 2c       	mov	r9, r2
    113c:	9b 18       	sub	r9, r11
    113e:	0e c0       	rjmp	.+28     	; 0x115c <vfprintf+0x330>
    1140:	b2 14       	cp	r11, r2
    1142:	60 f4       	brcc	.+24     	; 0x115c <vfprintf+0x330>
    1144:	b6 01       	movw	r22, r12
    1146:	80 e2       	ldi	r24, 0x20	; 32
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	0e 94 0d 09 	call	0x121a	; 0x121a <fputc>
    114e:	b3 94       	inc	r11
    1150:	f7 cf       	rjmp	.-18     	; 0x1140 <vfprintf+0x314>
    1152:	b2 14       	cp	r11, r2
    1154:	18 f4       	brcc	.+6      	; 0x115c <vfprintf+0x330>
    1156:	2b 18       	sub	r2, r11
    1158:	02 c0       	rjmp	.+4      	; 0x115e <vfprintf+0x332>
    115a:	98 2c       	mov	r9, r8
    115c:	21 2c       	mov	r2, r1
    115e:	a4 fe       	sbrs	r10, 4
    1160:	10 c0       	rjmp	.+32     	; 0x1182 <vfprintf+0x356>
    1162:	b6 01       	movw	r22, r12
    1164:	80 e3       	ldi	r24, 0x30	; 48
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	0e 94 0d 09 	call	0x121a	; 0x121a <fputc>
    116c:	a2 fe       	sbrs	r10, 2
    116e:	17 c0       	rjmp	.+46     	; 0x119e <vfprintf+0x372>
    1170:	a1 fc       	sbrc	r10, 1
    1172:	03 c0       	rjmp	.+6      	; 0x117a <vfprintf+0x34e>
    1174:	88 e7       	ldi	r24, 0x78	; 120
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 c0       	rjmp	.+4      	; 0x117e <vfprintf+0x352>
    117a:	88 e5       	ldi	r24, 0x58	; 88
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	b6 01       	movw	r22, r12
    1180:	0c c0       	rjmp	.+24     	; 0x119a <vfprintf+0x36e>
    1182:	8a 2d       	mov	r24, r10
    1184:	86 78       	andi	r24, 0x86	; 134
    1186:	59 f0       	breq	.+22     	; 0x119e <vfprintf+0x372>
    1188:	a1 fe       	sbrs	r10, 1
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <vfprintf+0x364>
    118c:	8b e2       	ldi	r24, 0x2B	; 43
    118e:	01 c0       	rjmp	.+2      	; 0x1192 <vfprintf+0x366>
    1190:	80 e2       	ldi	r24, 0x20	; 32
    1192:	a7 fc       	sbrc	r10, 7
    1194:	8d e2       	ldi	r24, 0x2D	; 45
    1196:	b6 01       	movw	r22, r12
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	0e 94 0d 09 	call	0x121a	; 0x121a <fputc>
    119e:	89 14       	cp	r8, r9
    11a0:	38 f4       	brcc	.+14     	; 0x11b0 <vfprintf+0x384>
    11a2:	b6 01       	movw	r22, r12
    11a4:	80 e3       	ldi	r24, 0x30	; 48
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	0e 94 0d 09 	call	0x121a	; 0x121a <fputc>
    11ac:	9a 94       	dec	r9
    11ae:	f7 cf       	rjmp	.-18     	; 0x119e <vfprintf+0x372>
    11b0:	8a 94       	dec	r8
    11b2:	f3 01       	movw	r30, r6
    11b4:	e8 0d       	add	r30, r8
    11b6:	f1 1d       	adc	r31, r1
    11b8:	80 81       	ld	r24, Z
    11ba:	b6 01       	movw	r22, r12
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	0e 94 0d 09 	call	0x121a	; 0x121a <fputc>
    11c2:	81 10       	cpse	r8, r1
    11c4:	f5 cf       	rjmp	.-22     	; 0x11b0 <vfprintf+0x384>
    11c6:	22 20       	and	r2, r2
    11c8:	09 f4       	brne	.+2      	; 0x11cc <vfprintf+0x3a0>
    11ca:	42 ce       	rjmp	.-892    	; 0xe50 <vfprintf+0x24>
    11cc:	b6 01       	movw	r22, r12
    11ce:	80 e2       	ldi	r24, 0x20	; 32
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	0e 94 0d 09 	call	0x121a	; 0x121a <fputc>
    11d6:	2a 94       	dec	r2
    11d8:	f6 cf       	rjmp	.-20     	; 0x11c6 <vfprintf+0x39a>
    11da:	f6 01       	movw	r30, r12
    11dc:	86 81       	ldd	r24, Z+6	; 0x06
    11de:	97 81       	ldd	r25, Z+7	; 0x07
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <vfprintf+0x3ba>
    11e2:	8f ef       	ldi	r24, 0xFF	; 255
    11e4:	9f ef       	ldi	r25, 0xFF	; 255
    11e6:	2b 96       	adiw	r28, 0x0b	; 11
    11e8:	e2 e1       	ldi	r30, 0x12	; 18
    11ea:	0c 94 c3 09 	jmp	0x1386	; 0x1386 <__epilogue_restores__>

000011ee <strnlen_P>:
    11ee:	fc 01       	movw	r30, r24
    11f0:	05 90       	lpm	r0, Z+
    11f2:	61 50       	subi	r22, 0x01	; 1
    11f4:	70 40       	sbci	r23, 0x00	; 0
    11f6:	01 10       	cpse	r0, r1
    11f8:	d8 f7       	brcc	.-10     	; 0x11f0 <strnlen_P+0x2>
    11fa:	80 95       	com	r24
    11fc:	90 95       	com	r25
    11fe:	8e 0f       	add	r24, r30
    1200:	9f 1f       	adc	r25, r31
    1202:	08 95       	ret

00001204 <strnlen>:
    1204:	fc 01       	movw	r30, r24
    1206:	61 50       	subi	r22, 0x01	; 1
    1208:	70 40       	sbci	r23, 0x00	; 0
    120a:	01 90       	ld	r0, Z+
    120c:	01 10       	cpse	r0, r1
    120e:	d8 f7       	brcc	.-10     	; 0x1206 <strnlen+0x2>
    1210:	80 95       	com	r24
    1212:	90 95       	com	r25
    1214:	8e 0f       	add	r24, r30
    1216:	9f 1f       	adc	r25, r31
    1218:	08 95       	ret

0000121a <fputc>:
    121a:	0f 93       	push	r16
    121c:	1f 93       	push	r17
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	fb 01       	movw	r30, r22
    1224:	23 81       	ldd	r18, Z+3	; 0x03
    1226:	21 fd       	sbrc	r18, 1
    1228:	03 c0       	rjmp	.+6      	; 0x1230 <fputc+0x16>
    122a:	8f ef       	ldi	r24, 0xFF	; 255
    122c:	9f ef       	ldi	r25, 0xFF	; 255
    122e:	2c c0       	rjmp	.+88     	; 0x1288 <fputc+0x6e>
    1230:	22 ff       	sbrs	r18, 2
    1232:	16 c0       	rjmp	.+44     	; 0x1260 <fputc+0x46>
    1234:	46 81       	ldd	r20, Z+6	; 0x06
    1236:	57 81       	ldd	r21, Z+7	; 0x07
    1238:	24 81       	ldd	r18, Z+4	; 0x04
    123a:	35 81       	ldd	r19, Z+5	; 0x05
    123c:	42 17       	cp	r20, r18
    123e:	53 07       	cpc	r21, r19
    1240:	44 f4       	brge	.+16     	; 0x1252 <fputc+0x38>
    1242:	a0 81       	ld	r26, Z
    1244:	b1 81       	ldd	r27, Z+1	; 0x01
    1246:	9d 01       	movw	r18, r26
    1248:	2f 5f       	subi	r18, 0xFF	; 255
    124a:	3f 4f       	sbci	r19, 0xFF	; 255
    124c:	31 83       	std	Z+1, r19	; 0x01
    124e:	20 83       	st	Z, r18
    1250:	8c 93       	st	X, r24
    1252:	26 81       	ldd	r18, Z+6	; 0x06
    1254:	37 81       	ldd	r19, Z+7	; 0x07
    1256:	2f 5f       	subi	r18, 0xFF	; 255
    1258:	3f 4f       	sbci	r19, 0xFF	; 255
    125a:	37 83       	std	Z+7, r19	; 0x07
    125c:	26 83       	std	Z+6, r18	; 0x06
    125e:	14 c0       	rjmp	.+40     	; 0x1288 <fputc+0x6e>
    1260:	8b 01       	movw	r16, r22
    1262:	ec 01       	movw	r28, r24
    1264:	fb 01       	movw	r30, r22
    1266:	00 84       	ldd	r0, Z+8	; 0x08
    1268:	f1 85       	ldd	r31, Z+9	; 0x09
    126a:	e0 2d       	mov	r30, r0
    126c:	09 95       	icall
    126e:	89 2b       	or	r24, r25
    1270:	e1 f6       	brne	.-72     	; 0x122a <fputc+0x10>
    1272:	d8 01       	movw	r26, r16
    1274:	16 96       	adiw	r26, 0x06	; 6
    1276:	8d 91       	ld	r24, X+
    1278:	9c 91       	ld	r25, X
    127a:	17 97       	sbiw	r26, 0x07	; 7
    127c:	01 96       	adiw	r24, 0x01	; 1
    127e:	17 96       	adiw	r26, 0x07	; 7
    1280:	9c 93       	st	X, r25
    1282:	8e 93       	st	-X, r24
    1284:	16 97       	sbiw	r26, 0x06	; 6
    1286:	ce 01       	movw	r24, r28
    1288:	df 91       	pop	r29
    128a:	cf 91       	pop	r28
    128c:	1f 91       	pop	r17
    128e:	0f 91       	pop	r16
    1290:	08 95       	ret

00001292 <__ultoa_invert>:
    1292:	fa 01       	movw	r30, r20
    1294:	aa 27       	eor	r26, r26
    1296:	28 30       	cpi	r18, 0x08	; 8
    1298:	51 f1       	breq	.+84     	; 0x12ee <__ultoa_invert+0x5c>
    129a:	20 31       	cpi	r18, 0x10	; 16
    129c:	81 f1       	breq	.+96     	; 0x12fe <__ultoa_invert+0x6c>
    129e:	e8 94       	clt
    12a0:	6f 93       	push	r22
    12a2:	6e 7f       	andi	r22, 0xFE	; 254
    12a4:	6e 5f       	subi	r22, 0xFE	; 254
    12a6:	7f 4f       	sbci	r23, 0xFF	; 255
    12a8:	8f 4f       	sbci	r24, 0xFF	; 255
    12aa:	9f 4f       	sbci	r25, 0xFF	; 255
    12ac:	af 4f       	sbci	r26, 0xFF	; 255
    12ae:	b1 e0       	ldi	r27, 0x01	; 1
    12b0:	3e d0       	rcall	.+124    	; 0x132e <__ultoa_invert+0x9c>
    12b2:	b4 e0       	ldi	r27, 0x04	; 4
    12b4:	3c d0       	rcall	.+120    	; 0x132e <__ultoa_invert+0x9c>
    12b6:	67 0f       	add	r22, r23
    12b8:	78 1f       	adc	r23, r24
    12ba:	89 1f       	adc	r24, r25
    12bc:	9a 1f       	adc	r25, r26
    12be:	a1 1d       	adc	r26, r1
    12c0:	68 0f       	add	r22, r24
    12c2:	79 1f       	adc	r23, r25
    12c4:	8a 1f       	adc	r24, r26
    12c6:	91 1d       	adc	r25, r1
    12c8:	a1 1d       	adc	r26, r1
    12ca:	6a 0f       	add	r22, r26
    12cc:	71 1d       	adc	r23, r1
    12ce:	81 1d       	adc	r24, r1
    12d0:	91 1d       	adc	r25, r1
    12d2:	a1 1d       	adc	r26, r1
    12d4:	20 d0       	rcall	.+64     	; 0x1316 <__ultoa_invert+0x84>
    12d6:	09 f4       	brne	.+2      	; 0x12da <__ultoa_invert+0x48>
    12d8:	68 94       	set
    12da:	3f 91       	pop	r19
    12dc:	2a e0       	ldi	r18, 0x0A	; 10
    12de:	26 9f       	mul	r18, r22
    12e0:	11 24       	eor	r1, r1
    12e2:	30 19       	sub	r19, r0
    12e4:	30 5d       	subi	r19, 0xD0	; 208
    12e6:	31 93       	st	Z+, r19
    12e8:	de f6       	brtc	.-74     	; 0x12a0 <__ultoa_invert+0xe>
    12ea:	cf 01       	movw	r24, r30
    12ec:	08 95       	ret
    12ee:	46 2f       	mov	r20, r22
    12f0:	47 70       	andi	r20, 0x07	; 7
    12f2:	40 5d       	subi	r20, 0xD0	; 208
    12f4:	41 93       	st	Z+, r20
    12f6:	b3 e0       	ldi	r27, 0x03	; 3
    12f8:	0f d0       	rcall	.+30     	; 0x1318 <__ultoa_invert+0x86>
    12fa:	c9 f7       	brne	.-14     	; 0x12ee <__ultoa_invert+0x5c>
    12fc:	f6 cf       	rjmp	.-20     	; 0x12ea <__ultoa_invert+0x58>
    12fe:	46 2f       	mov	r20, r22
    1300:	4f 70       	andi	r20, 0x0F	; 15
    1302:	40 5d       	subi	r20, 0xD0	; 208
    1304:	4a 33       	cpi	r20, 0x3A	; 58
    1306:	18 f0       	brcs	.+6      	; 0x130e <__ultoa_invert+0x7c>
    1308:	49 5d       	subi	r20, 0xD9	; 217
    130a:	31 fd       	sbrc	r19, 1
    130c:	40 52       	subi	r20, 0x20	; 32
    130e:	41 93       	st	Z+, r20
    1310:	02 d0       	rcall	.+4      	; 0x1316 <__ultoa_invert+0x84>
    1312:	a9 f7       	brne	.-22     	; 0x12fe <__ultoa_invert+0x6c>
    1314:	ea cf       	rjmp	.-44     	; 0x12ea <__ultoa_invert+0x58>
    1316:	b4 e0       	ldi	r27, 0x04	; 4
    1318:	a6 95       	lsr	r26
    131a:	97 95       	ror	r25
    131c:	87 95       	ror	r24
    131e:	77 95       	ror	r23
    1320:	67 95       	ror	r22
    1322:	ba 95       	dec	r27
    1324:	c9 f7       	brne	.-14     	; 0x1318 <__ultoa_invert+0x86>
    1326:	00 97       	sbiw	r24, 0x00	; 0
    1328:	61 05       	cpc	r22, r1
    132a:	71 05       	cpc	r23, r1
    132c:	08 95       	ret
    132e:	9b 01       	movw	r18, r22
    1330:	ac 01       	movw	r20, r24
    1332:	0a 2e       	mov	r0, r26
    1334:	06 94       	lsr	r0
    1336:	57 95       	ror	r21
    1338:	47 95       	ror	r20
    133a:	37 95       	ror	r19
    133c:	27 95       	ror	r18
    133e:	ba 95       	dec	r27
    1340:	c9 f7       	brne	.-14     	; 0x1334 <__ultoa_invert+0xa2>
    1342:	62 0f       	add	r22, r18
    1344:	73 1f       	adc	r23, r19
    1346:	84 1f       	adc	r24, r20
    1348:	95 1f       	adc	r25, r21
    134a:	a0 1d       	adc	r26, r0
    134c:	08 95       	ret

0000134e <__prologue_saves__>:
    134e:	2f 92       	push	r2
    1350:	3f 92       	push	r3
    1352:	4f 92       	push	r4
    1354:	5f 92       	push	r5
    1356:	6f 92       	push	r6
    1358:	7f 92       	push	r7
    135a:	8f 92       	push	r8
    135c:	9f 92       	push	r9
    135e:	af 92       	push	r10
    1360:	bf 92       	push	r11
    1362:	cf 92       	push	r12
    1364:	df 92       	push	r13
    1366:	ef 92       	push	r14
    1368:	ff 92       	push	r15
    136a:	0f 93       	push	r16
    136c:	1f 93       	push	r17
    136e:	cf 93       	push	r28
    1370:	df 93       	push	r29
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
    1376:	ca 1b       	sub	r28, r26
    1378:	db 0b       	sbc	r29, r27
    137a:	0f b6       	in	r0, 0x3f	; 63
    137c:	f8 94       	cli
    137e:	de bf       	out	0x3e, r29	; 62
    1380:	0f be       	out	0x3f, r0	; 63
    1382:	cd bf       	out	0x3d, r28	; 61
    1384:	09 94       	ijmp

00001386 <__epilogue_restores__>:
    1386:	2a 88       	ldd	r2, Y+18	; 0x12
    1388:	39 88       	ldd	r3, Y+17	; 0x11
    138a:	48 88       	ldd	r4, Y+16	; 0x10
    138c:	5f 84       	ldd	r5, Y+15	; 0x0f
    138e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1390:	7d 84       	ldd	r7, Y+13	; 0x0d
    1392:	8c 84       	ldd	r8, Y+12	; 0x0c
    1394:	9b 84       	ldd	r9, Y+11	; 0x0b
    1396:	aa 84       	ldd	r10, Y+10	; 0x0a
    1398:	b9 84       	ldd	r11, Y+9	; 0x09
    139a:	c8 84       	ldd	r12, Y+8	; 0x08
    139c:	df 80       	ldd	r13, Y+7	; 0x07
    139e:	ee 80       	ldd	r14, Y+6	; 0x06
    13a0:	fd 80       	ldd	r15, Y+5	; 0x05
    13a2:	0c 81       	ldd	r16, Y+4	; 0x04
    13a4:	1b 81       	ldd	r17, Y+3	; 0x03
    13a6:	aa 81       	ldd	r26, Y+2	; 0x02
    13a8:	b9 81       	ldd	r27, Y+1	; 0x01
    13aa:	ce 0f       	add	r28, r30
    13ac:	d1 1d       	adc	r29, r1
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	f8 94       	cli
    13b2:	de bf       	out	0x3e, r29	; 62
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	cd bf       	out	0x3d, r28	; 61
    13b8:	ed 01       	movw	r28, r26
    13ba:	08 95       	ret

000013bc <_exit>:
    13bc:	f8 94       	cli

000013be <__stop_program>:
    13be:	ff cf       	rjmp	.-2      	; 0x13be <__stop_program>
